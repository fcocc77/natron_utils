# -*- coding: utf-8 -*-
# DO NOT EDIT THIS FILE
# Natron PyPlug
# This file was automatically generated by Natron PyPlug exporter version 10.

# Hand-written code should be added in a separate file named ShapeTransitionExt.py
# See http://natron.readthedocs.org/en/master/devel/groups.html#adding-hand-written-code-callbacks-etc
# Note that Viewers are never exported

import NatronEngine
import sys

# Try to import the extensions file where callbacks and hand-written code should be located.
try:
    from ShapeTransitionExt import *
except ImportError:
    pass

def getPluginID():
    return "vv.ShapeTransition"

def getLabel():
    return "ShapeTransition"

def getVersion():
    return 1

def getIconPath():
    return "Transition.png"

def getGrouping():
    return "videovina"

def createInstance(app,group):
    # Create all nodes in the group

    # Create the parameters of the group node the same way we did for all internal nodes
    lastNode = group
    lastNode.setColor(0.7, 0.7, 0.7)
    param = lastNode.getParam("onParamChanged")
    if param is not None:
        param.setValue("shape_transition.main")
        del param


    # Create the user parameters
    lastNode.control = lastNode.createPageParam("control", "Control")
    param = lastNode.createButtonParam("refresh", "Refresh")

    # Add the param to the page
    lastNode.control.addParam(param)

    # Set param properties
    param.setHelp("")
    param.setAddNewLine(True)
    param.setEvaluateOnChange(False)
    lastNode.refresh = param
    del param

    param = lastNode.createSeparatorParam("sep2", "")

    # Add the param to the page
    lastNode.control.addParam(param)

    # Set param properties
    param.setHelp("")
    param.setAddNewLine(True)
    param.setPersistent(False)
    param.setEvaluateOnChange(False)
    lastNode.sep2 = param
    del param

    param = lastNode.createStringParam("general", "")
    param.setType(NatronEngine.StringParam.TypeEnum.eStringTypeLabel)
    param.setDefaultValue("GENERAL:")
    param.restoreDefaultValue()

    # Add the param to the page
    lastNode.control.addParam(param)

    # Set param properties
    param.setHelp("")
    param.setAddNewLine(True)
    param.setEvaluateOnChange(False)
    param.setAnimationEnabled(False)
    lastNode.general = param
    del param

    param = lastNode.createInt2DParam("formatboxSize", "Size")
    param.setDefaultValue(200, 0)
    param.restoreDefaultValue(0)
    param.setDefaultValue(200, 1)
    param.restoreDefaultValue(1)

    # Add the param to the page
    lastNode.control.addParam(param)

    # Set param properties
    param.setAddNewLine(True)
    param.setAnimationEnabled(False)
    param.setValue(1920, 0)
    param.setValue(1080, 1)
    lastNode.formatboxSize = param
    del param

    param = lastNode.createChoiceParam("direction", "Direction")
    entries = [ ("Left", ""),
    ("Right", ""),
    ("Up", ""),
    ("Down", "")]
    param.setOptions(entries)
    del entries

    # Add the param to the page
    lastNode.control.addParam(param)

    # Set param properties
    param.setHelp("")
    param.setAddNewLine(True)
    param.setAnimationEnabled(True)
    param.set("Right")
    lastNode.direction = param
    del param

    param = lastNode.createChoiceParam("sort", "Sort")
    entries = [ ("Random", ""),
    ("Uniform", "")]
    param.setOptions(entries)
    del entries
    param.setDefaultValue("Uniform")
    param.restoreDefaultValue()

    # Add the param to the page
    lastNode.control.addParam(param)

    # Set param properties
    param.setHelp("")
    param.setAddNewLine(False)
    param.setAnimationEnabled(True)
    lastNode.sort = param
    del param

    param = lastNode.createIntParam("repetitions", "Repetitions")
    param.setMinimum(1, 0)
    param.setMaximum(7, 0)
    param.setDisplayMinimum(1, 0)
    param.setDisplayMaximum(7, 0)
    param.setDefaultValue(0, 0)
    param.restoreDefaultValue(0)

    # Add the param to the page
    lastNode.control.addParam(param)

    # Set param properties
    param.setHelp("")
    param.setAddNewLine(True)
    param.setAnimationEnabled(True)
    param.setValue(7, 0)
    lastNode.repetitions = param
    del param

    param = lastNode.createIntParam("seed", "Random Seed")
    param.setMinimum(0, 0)
    param.setMaximum(100, 0)
    param.setDisplayMinimum(0, 0)
    param.setDisplayMaximum(100, 0)
    param.setDefaultValue(0, 0)
    param.restoreDefaultValue(0)

    # Add the param to the page
    lastNode.control.addParam(param)

    # Set param properties
    param.setHelp("")
    param.setAddNewLine(True)
    param.setAnimationEnabled(True)
    param.setValue(10, 0)
    lastNode.seed = param
    del param

    param = lastNode.createSeparatorParam("sep4", "")

    # Add the param to the page
    lastNode.control.addParam(param)

    # Set param properties
    param.setHelp("")
    param.setAddNewLine(True)
    param.setPersistent(False)
    param.setEvaluateOnChange(False)
    lastNode.sep4 = param
    del param

    param = lastNode.createDoubleParam("motion_blur", "Motion Blur")
    param.setMinimum(0, 0)
    param.setMaximum(4, 0)
    param.setDisplayMinimum(0, 0)
    param.setDisplayMaximum(4, 0)

    # Add the param to the page
    lastNode.control.addParam(param)

    # Set param properties
    param.setHelp("")
    param.setAddNewLine(True)
    param.setAnimationEnabled(True)
    lastNode.motion_blur = param
    del param

    param = lastNode.createSeparatorParam("sep3", "")

    # Add the param to the page
    lastNode.control.addParam(param)

    # Set param properties
    param.setHelp("")
    param.setAddNewLine(True)
    param.setPersistent(False)
    param.setEvaluateOnChange(False)
    lastNode.sep3 = param
    del param

    param = lastNode.createStringParam("time_", "")
    param.setType(NatronEngine.StringParam.TypeEnum.eStringTypeLabel)
    param.setDefaultValue("TIME:")
    param.restoreDefaultValue()

    # Add the param to the page
    lastNode.control.addParam(param)

    # Set param properties
    param.setHelp("")
    param.setAddNewLine(True)
    param.setEvaluateOnChange(False)
    param.setAnimationEnabled(False)
    lastNode.time_ = param
    del param

    param = lastNode.createIntParam("start_frame", "Start Frame")
    param.setMinimum(0, 0)
    param.setMaximum(1000, 0)
    param.setDisplayMinimum(0, 0)
    param.setDisplayMaximum(1000, 0)
    param.setDefaultValue(0, 0)
    param.restoreDefaultValue(0)

    # Add the param to the page
    lastNode.control.addParam(param)

    # Set param properties
    param.setHelp("")
    param.setAddNewLine(True)
    param.setAnimationEnabled(True)
    param.setValue(1, 0)
    lastNode.start_frame = param
    del param

    param = lastNode.createIntParam("duration", "Duration")
    param.setMinimum(1, 0)
    param.setMaximum(100, 0)
    param.setDisplayMinimum(1, 0)
    param.setDisplayMaximum(100, 0)
    param.setDefaultValue(0, 0)
    param.restoreDefaultValue(0)

    # Add the param to the page
    lastNode.control.addParam(param)

    # Set param properties
    param.setHelp("")
    param.setAddNewLine(True)
    param.setAnimationEnabled(True)
    param.setValue(50, 0)
    lastNode.duration = param
    del param

    param = lastNode.createIntParam("gap", "Gap")
    param.setDisplayMinimum(0, 0)
    param.setDisplayMaximum(100, 0)
    param.setDefaultValue(0, 0)
    param.restoreDefaultValue(0)

    # Add the param to the page
    lastNode.control.addParam(param)

    # Set param properties
    param.setHelp("")
    param.setAddNewLine(True)
    param.setAnimationEnabled(True)
    param.setValue(5, 0)
    lastNode.gap = param
    del param

    param = lastNode.createSeparatorParam("sep1", "")

    # Add the param to the page
    lastNode.control.addParam(param)

    # Set param properties
    param.setHelp("")
    param.setAddNewLine(True)
    param.setPersistent(False)
    param.setEvaluateOnChange(False)
    lastNode.sep1 = param
    del param

    param = lastNode.createStringParam("initial_shapes", "")
    param.setType(NatronEngine.StringParam.TypeEnum.eStringTypeLabel)
    param.setDefaultValue("INITIAL SHAPE:")
    param.restoreDefaultValue()

    # Add the param to the page
    lastNode.control.addParam(param)

    # Set param properties
    param.setHelp("")
    param.setAddNewLine(True)
    param.setEvaluateOnChange(False)
    param.setAnimationEnabled(False)
    lastNode.initial_shapes = param
    del param

    param = lastNode.createIntParam("initial_width", "Initial Width")
    param.setMinimum(0, 0)
    param.setMaximum(500, 0)
    param.setDisplayMinimum(0, 0)
    param.setDisplayMaximum(500, 0)
    param.setDefaultValue(0, 0)
    param.restoreDefaultValue(0)

    # Add the param to the page
    lastNode.control.addParam(param)

    # Set param properties
    param.setHelp("")
    param.setAddNewLine(True)
    param.setAnimationEnabled(True)
    lastNode.initial_width = param
    del param

    param = lastNode.createIntParam("initial_translate", "Inicial Translate")
    param.setMinimum(0, 0)
    param.setMaximum(1920, 0)
    param.setDisplayMinimum(0, 0)
    param.setDisplayMaximum(1920, 0)
    param.setDefaultValue(0, 0)
    param.restoreDefaultValue(0)

    # Add the param to the page
    lastNode.control.addParam(param)

    # Set param properties
    param.setHelp("")
    param.setAddNewLine(True)
    param.setAnimationEnabled(True)
    param.setValue(1000, 0)
    lastNode.initial_translate = param
    del param

    param = lastNode.createIntParam("end_translate", "End Translate")
    param.setMinimum(0, 0)
    param.setMaximum(1920, 0)
    param.setDisplayMinimum(0, 0)
    param.setDisplayMaximum(1920, 0)
    param.setDefaultValue(0, 0)
    param.restoreDefaultValue(0)

    # Add the param to the page
    lastNode.control.addParam(param)

    # Set param properties
    param.setHelp("")
    param.setAddNewLine(True)
    param.setAnimationEnabled(True)
    param.setValue(500, 0)
    lastNode.end_translate = param
    del param

    param = lastNode.createIntParam("initial_rotate", "Initial Rotate")
    param.setMinimum(-45, 0)
    param.setMaximum(45, 0)
    param.setDisplayMinimum(-45, 0)
    param.setDisplayMaximum(45, 0)
    param.setDefaultValue(0, 0)
    param.restoreDefaultValue(0)

    # Add the param to the page
    lastNode.control.addParam(param)

    # Set param properties
    param.setHelp("")
    param.setAddNewLine(True)
    param.setAnimationEnabled(True)
    lastNode.initial_rotate = param
    del param

    # Refresh the GUI with the newly created parameters
    lastNode.setPagesOrder(['control', 'Node', 'Settings'])
    lastNode.refreshUserParamsGUI()
    del lastNode

    # Start of node "Output1"
    lastNode = app.createNode("fr.inria.built-in.Output", 1, group)
    lastNode.setLabel("Output")
    lastNode.setPosition(3469, 915)
    lastNode.setSize(104, 30)
    lastNode.setColor(0.7, 0.7, 0.7)
    groupOutput1 = lastNode

    del lastNode
    # End of node "Output1"

    # Start of node "Shape"
    lastNode = app.createNode("fr.inria.built-in.Input", 1, group)
    lastNode.setScriptName("Shape")
    lastNode.setLabel("Shape")
    lastNode.setPosition(1258, -215)
    lastNode.setSize(104, 32)
    lastNode.setColor(0.3, 0.5, 0.2)
    groupShape = lastNode

    del lastNode
    # End of node "Shape"

    # Start of node "shape_width_1"
    lastNode = app.createNode("net.sf.openfx.Position", 1, group)
    lastNode.setScriptName("shape_width_1")
    lastNode.setLabel("shape_width_1")
    lastNode.setPosition(1431, 159)
    lastNode.setSize(104, 32)
    lastNode.setColor(0.7, 0.3, 0.1)
    groupshape_width_1 = lastNode

    param = lastNode.getParam("translate")
    if param is not None:
        param.setValueAtTime(0, 1, 0)
        param.setValueAtTime(-51.90000000000001, 18.5, 0)
        param.setValueAtTime(-294.1, 33.5, 0)
        param.setValueAtTime(-346, 51, 0)
        del param

    del lastNode
    # End of node "shape_width_1"

    # Start of node "shape_mask_1"
    lastNode = app.createNode("net.sf.openfx.MergePlugin", 1, group)
    lastNode.setScriptName("shape_mask_1")
    lastNode.setLabel("shape_mask_1")
    lastNode.setPosition(1257, 249)
    lastNode.setSize(104, 55)
    lastNode.setColor(0.3, 0.37, 0.776)
    groupshape_mask_1 = lastNode

    param = lastNode.getParam("operation")
    if param is not None:
        param.set("stencil")
        del param

    del lastNode
    # End of node "shape_mask_1"

    # Start of node "Dot1"
    lastNode = app.createNode("fr.inria.built-in.Dot", 1, group)
    lastNode.setScriptName("Dot1")
    lastNode.setLabel("Dot1")
    lastNode.setPosition(1302, 168)
    lastNode.setSize(15, 15)
    lastNode.setColor(0.7, 0.7, 0.7)
    groupDot1 = lastNode

    del lastNode
    # End of node "Dot1"

    # Start of node "Dot2"
    lastNode = app.createNode("fr.inria.built-in.Dot", 1, group)
    lastNode.setScriptName("Dot2")
    lastNode.setLabel("Dot2")
    lastNode.setPosition(1303, 9)
    lastNode.setSize(15, 15)
    lastNode.setColor(0.7, 0.7, 0.7)
    groupDot2 = lastNode

    del lastNode
    # End of node "Dot2"

    # Start of node "shape_width_2"
    lastNode = app.createNode("net.sf.openfx.Position", 1, group)
    lastNode.setScriptName("shape_width_2")
    lastNode.setLabel("shape_width_2")
    lastNode.setPosition(1824, 152)
    lastNode.setSize(104, 32)
    lastNode.setColor(0.7, 0.3, 0.1)
    groupshape_width_2 = lastNode

    param = lastNode.getParam("translate")
    if param is not None:
        param.setValueAtTime(0, 6, 0)
        param.setValueAtTime(-51.90000000000001, 23.5, 0)
        param.setValueAtTime(-294.1, 38.5, 0)
        param.setValueAtTime(-346, 56, 0)
        del param

    del lastNode
    # End of node "shape_width_2"

    # Start of node "shape_mask_2"
    lastNode = app.createNode("net.sf.openfx.MergePlugin", 1, group)
    lastNode.setScriptName("shape_mask_2")
    lastNode.setLabel("shape_mask_2")
    lastNode.setPosition(1662, 244)
    lastNode.setSize(104, 55)
    lastNode.setColor(0.3, 0.37, 0.776)
    groupshape_mask_2 = lastNode

    param = lastNode.getParam("operation")
    if param is not None:
        param.set("stencil")
        del param

    del lastNode
    # End of node "shape_mask_2"

    # Start of node "Dot1_3"
    lastNode = app.createNode("fr.inria.built-in.Dot", 1, group)
    lastNode.setScriptName("Dot1_3")
    lastNode.setLabel("Dot1_3")
    lastNode.setPosition(1707, 161)
    lastNode.setSize(15, 15)
    lastNode.setColor(0.7, 0.7, 0.7)
    groupDot1_3 = lastNode

    del lastNode
    # End of node "Dot1_3"

    # Start of node "Dot2_2"
    lastNode = app.createNode("fr.inria.built-in.Dot", 1, group)
    lastNode.setScriptName("Dot2_2")
    lastNode.setLabel("Dot2_2")
    lastNode.setPosition(1705, 9)
    lastNode.setSize(15, 15)
    lastNode.setColor(0.7, 0.7, 0.7)
    groupDot2_2 = lastNode

    del lastNode
    # End of node "Dot2_2"

    # Start of node "shape_width_3"
    lastNode = app.createNode("net.sf.openfx.Position", 1, group)
    lastNode.setScriptName("shape_width_3")
    lastNode.setLabel("shape_width_3")
    lastNode.setPosition(2185, 158)
    lastNode.setSize(104, 32)
    lastNode.setColor(0.7, 0.3, 0.1)
    groupshape_width_3 = lastNode

    param = lastNode.getParam("translate")
    if param is not None:
        param.setValueAtTime(0, 11, 0)
        param.setValueAtTime(-51.90000000000001, 28.5, 0)
        param.setValueAtTime(-294.1, 43.5, 0)
        param.setValueAtTime(-346, 61, 0)
        del param

    del lastNode
    # End of node "shape_width_3"

    # Start of node "shape_mask_3"
    lastNode = app.createNode("net.sf.openfx.MergePlugin", 1, group)
    lastNode.setScriptName("shape_mask_3")
    lastNode.setLabel("shape_mask_3")
    lastNode.setPosition(1997, 245)
    lastNode.setSize(104, 55)
    lastNode.setColor(0.3, 0.37, 0.776)
    groupshape_mask_3 = lastNode

    param = lastNode.getParam("operation")
    if param is not None:
        param.set("stencil")
        del param

    del lastNode
    # End of node "shape_mask_3"

    # Start of node "Dot1_4"
    lastNode = app.createNode("fr.inria.built-in.Dot", 1, group)
    lastNode.setScriptName("Dot1_4")
    lastNode.setLabel("Dot1_4")
    lastNode.setPosition(2042, 167)
    lastNode.setSize(15, 15)
    lastNode.setColor(0.7, 0.7, 0.7)
    groupDot1_4 = lastNode

    del lastNode
    # End of node "Dot1_4"

    # Start of node "Dot2_3"
    lastNode = app.createNode("fr.inria.built-in.Dot", 1, group)
    lastNode.setScriptName("Dot2_3")
    lastNode.setLabel("Dot2_3")
    lastNode.setPosition(2042, 9)
    lastNode.setSize(15, 15)
    lastNode.setColor(0.7, 0.7, 0.7)
    groupDot2_3 = lastNode

    del lastNode
    # End of node "Dot2_3"

    # Start of node "shape_width_4"
    lastNode = app.createNode("net.sf.openfx.Position", 1, group)
    lastNode.setScriptName("shape_width_4")
    lastNode.setLabel("shape_width_4")
    lastNode.setPosition(2495, 165)
    lastNode.setSize(104, 32)
    lastNode.setColor(0.7, 0.3, 0.1)
    groupshape_width_4 = lastNode

    param = lastNode.getParam("translate")
    if param is not None:
        param.setValueAtTime(0, 16, 0)
        param.setValueAtTime(-51.90000000000001, 33.5, 0)
        param.setValueAtTime(-294.1, 48.5, 0)
        param.setValueAtTime(-346, 66, 0)
        del param

    del lastNode
    # End of node "shape_width_4"

    # Start of node "shape_mask_4"
    lastNode = app.createNode("net.sf.openfx.MergePlugin", 1, group)
    lastNode.setScriptName("shape_mask_4")
    lastNode.setLabel("shape_mask_4")
    lastNode.setPosition(2344, 239)
    lastNode.setSize(104, 55)
    lastNode.setColor(0.3, 0.37, 0.776)
    groupshape_mask_4 = lastNode

    param = lastNode.getParam("operation")
    if param is not None:
        param.set("stencil")
        del param

    del lastNode
    # End of node "shape_mask_4"

    # Start of node "Dot1_5"
    lastNode = app.createNode("fr.inria.built-in.Dot", 1, group)
    lastNode.setScriptName("Dot1_5")
    lastNode.setLabel("Dot1_5")
    lastNode.setPosition(2389, 174)
    lastNode.setSize(15, 15)
    lastNode.setColor(0.7, 0.7, 0.7)
    groupDot1_5 = lastNode

    del lastNode
    # End of node "Dot1_5"

    # Start of node "Dot2_4"
    lastNode = app.createNode("fr.inria.built-in.Dot", 1, group)
    lastNode.setScriptName("Dot2_4")
    lastNode.setLabel("Dot2_4")
    lastNode.setPosition(2389, 9)
    lastNode.setSize(15, 15)
    lastNode.setColor(0.7, 0.7, 0.7)
    groupDot2_4 = lastNode

    del lastNode
    # End of node "Dot2_4"

    # Start of node "shape_width_5"
    lastNode = app.createNode("net.sf.openfx.Position", 1, group)
    lastNode.setScriptName("shape_width_5")
    lastNode.setLabel("shape_width_5")
    lastNode.setPosition(2878, 155)
    lastNode.setSize(104, 32)
    lastNode.setColor(0.7, 0.3, 0.1)
    groupshape_width_5 = lastNode

    param = lastNode.getParam("translate")
    if param is not None:
        param.setValueAtTime(0, 21, 0)
        param.setValueAtTime(-51.90000000000001, 38.5, 0)
        param.setValueAtTime(-294.1, 53.5, 0)
        param.setValueAtTime(-346, 71, 0)
        del param

    del lastNode
    # End of node "shape_width_5"

    # Start of node "shape_mask_5"
    lastNode = app.createNode("net.sf.openfx.MergePlugin", 1, group)
    lastNode.setScriptName("shape_mask_5")
    lastNode.setLabel("shape_mask_5")
    lastNode.setPosition(2706, 245)
    lastNode.setSize(104, 55)
    lastNode.setColor(0.3, 0.37, 0.776)
    groupshape_mask_5 = lastNode

    param = lastNode.getParam("operation")
    if param is not None:
        param.set("stencil")
        del param

    del lastNode
    # End of node "shape_mask_5"

    # Start of node "Dot1_6"
    lastNode = app.createNode("fr.inria.built-in.Dot", 1, group)
    lastNode.setScriptName("Dot1_6")
    lastNode.setLabel("Dot1_6")
    lastNode.setPosition(2751, 164)
    lastNode.setSize(15, 15)
    lastNode.setColor(0.7, 0.7, 0.7)
    groupDot1_6 = lastNode

    del lastNode
    # End of node "Dot1_6"

    # Start of node "Dot2_5"
    lastNode = app.createNode("fr.inria.built-in.Dot", 1, group)
    lastNode.setScriptName("Dot2_5")
    lastNode.setLabel("Dot2_5")
    lastNode.setPosition(2749, 12)
    lastNode.setSize(15, 15)
    lastNode.setColor(0.7, 0.7, 0.7)
    groupDot2_5 = lastNode

    del lastNode
    # End of node "Dot2_5"

    # Start of node "shape_width_6"
    lastNode = app.createNode("net.sf.openfx.Position", 1, group)
    lastNode.setScriptName("shape_width_6")
    lastNode.setLabel("shape_width_6")
    lastNode.setPosition(3254, 170)
    lastNode.setSize(104, 32)
    lastNode.setColor(0.7, 0.3, 0.1)
    groupshape_width_6 = lastNode

    param = lastNode.getParam("translate")
    if param is not None:
        param.setValueAtTime(0, 26, 0)
        param.setValueAtTime(-51.90000000000001, 43.5, 0)
        param.setValueAtTime(-294.1, 58.5, 0)
        param.setValueAtTime(-346, 76, 0)
        del param

    del lastNode
    # End of node "shape_width_6"

    # Start of node "shape_mask_6"
    lastNode = app.createNode("net.sf.openfx.MergePlugin", 1, group)
    lastNode.setScriptName("shape_mask_6")
    lastNode.setLabel("shape_mask_6")
    lastNode.setPosition(3099, 269)
    lastNode.setSize(104, 55)
    lastNode.setColor(0.3, 0.37, 0.776)
    groupshape_mask_6 = lastNode

    param = lastNode.getParam("operation")
    if param is not None:
        param.set("stencil")
        del param

    del lastNode
    # End of node "shape_mask_6"

    # Start of node "Dot1_7"
    lastNode = app.createNode("fr.inria.built-in.Dot", 1, group)
    lastNode.setScriptName("Dot1_7")
    lastNode.setLabel("Dot1_7")
    lastNode.setPosition(3144, 179)
    lastNode.setSize(15, 15)
    lastNode.setColor(0.7, 0.7, 0.7)
    groupDot1_7 = lastNode

    del lastNode
    # End of node "Dot1_7"

    # Start of node "Dot2_6"
    lastNode = app.createNode("fr.inria.built-in.Dot", 1, group)
    lastNode.setScriptName("Dot2_6")
    lastNode.setLabel("Dot2_6")
    lastNode.setPosition(3144, 12)
    lastNode.setSize(15, 15)
    lastNode.setColor(0.7, 0.7, 0.7)
    groupDot2_6 = lastNode

    del lastNode
    # End of node "Dot2_6"

    # Start of node "shape_width_7"
    lastNode = app.createNode("net.sf.openfx.Position", 1, group)
    lastNode.setScriptName("shape_width_7")
    lastNode.setLabel("shape_width_7")
    lastNode.setPosition(3666, 162)
    lastNode.setSize(104, 32)
    lastNode.setColor(0.7, 0.3, 0.1)
    groupshape_width_7 = lastNode

    param = lastNode.getParam("translate")
    if param is not None:
        param.setValueAtTime(0, 31, 0)
        param.setValueAtTime(-51.90000000000001, 48.5, 0)
        param.setValueAtTime(-294.1, 63.5, 0)
        param.setValueAtTime(-346, 81, 0)
        del param

    del lastNode
    # End of node "shape_width_7"

    # Start of node "shape_mask_7"
    lastNode = app.createNode("net.sf.openfx.MergePlugin", 1, group)
    lastNode.setScriptName("shape_mask_7")
    lastNode.setLabel("shape_mask_7")
    lastNode.setPosition(3468, 236)
    lastNode.setSize(104, 55)
    lastNode.setColor(0.3, 0.37, 0.776)
    groupshape_mask_7 = lastNode

    param = lastNode.getParam("operation")
    if param is not None:
        param.set("stencil")
        del param

    del lastNode
    # End of node "shape_mask_7"

    # Start of node "Dot1_2"
    lastNode = app.createNode("fr.inria.built-in.Dot", 1, group)
    lastNode.setScriptName("Dot1_2")
    lastNode.setLabel("Dot1_2")
    lastNode.setPosition(3513, 171)
    lastNode.setSize(15, 15)
    lastNode.setColor(0.7, 0.7, 0.7)
    groupDot1_2 = lastNode

    del lastNode
    # End of node "Dot1_2"

    # Start of node "Dot2_7"
    lastNode = app.createNode("fr.inria.built-in.Dot", 1, group)
    lastNode.setScriptName("Dot2_7")
    lastNode.setLabel("Dot2_7")
    lastNode.setPosition(3513, 16)
    lastNode.setSize(15, 15)
    lastNode.setColor(0.7, 0.7, 0.7)
    groupDot2_7 = lastNode

    del lastNode
    # End of node "Dot2_7"

    # Start of node "merge_2"
    lastNode = app.createNode("net.sf.openfx.MergePlugin", 1, group)
    lastNode.setScriptName("merge_2")
    lastNode.setLabel("merge_2")
    lastNode.setPosition(1662, 461)
    lastNode.setSize(104, 55)
    lastNode.setColor(0.3, 0.37, 0.776)
    groupmerge_2 = lastNode

    del lastNode
    # End of node "merge_2"

    # Start of node "merge_3"
    lastNode = app.createNode("net.sf.openfx.MergePlugin", 1, group)
    lastNode.setScriptName("merge_3")
    lastNode.setLabel("merge_3")
    lastNode.setPosition(1997, 461)
    lastNode.setSize(104, 55)
    lastNode.setColor(0.3, 0.37, 0.776)
    groupmerge_3 = lastNode

    del lastNode
    # End of node "merge_3"

    # Start of node "merge_4"
    lastNode = app.createNode("net.sf.openfx.MergePlugin", 1, group)
    lastNode.setScriptName("merge_4")
    lastNode.setLabel("merge_4")
    lastNode.setPosition(2344, 461)
    lastNode.setSize(104, 55)
    lastNode.setColor(0.3, 0.37, 0.776)
    groupmerge_4 = lastNode

    del lastNode
    # End of node "merge_4"

    # Start of node "merge_5"
    lastNode = app.createNode("net.sf.openfx.MergePlugin", 1, group)
    lastNode.setScriptName("merge_5")
    lastNode.setLabel("merge_5")
    lastNode.setPosition(2706, 461)
    lastNode.setSize(104, 55)
    lastNode.setColor(0.3, 0.37, 0.776)
    groupmerge_5 = lastNode

    del lastNode
    # End of node "merge_5"

    # Start of node "merge_6"
    lastNode = app.createNode("net.sf.openfx.MergePlugin", 1, group)
    lastNode.setScriptName("merge_6")
    lastNode.setLabel("merge_6")
    lastNode.setPosition(3099, 458)
    lastNode.setSize(104, 55)
    lastNode.setColor(0.3, 0.37, 0.776)
    groupmerge_6 = lastNode

    del lastNode
    # End of node "merge_6"

    # Start of node "merge_7"
    lastNode = app.createNode("net.sf.openfx.MergePlugin", 1, group)
    lastNode.setScriptName("merge_7")
    lastNode.setLabel("merge_7")
    lastNode.setPosition(3468, 458)
    lastNode.setSize(104, 55)
    lastNode.setColor(0.3, 0.37, 0.776)
    groupmerge_7 = lastNode

    del lastNode
    # End of node "merge_7"

    # Start of node "merge_1"
    lastNode = app.createNode("net.sf.openfx.MergePlugin", 1, group)
    lastNode.setScriptName("merge_1")
    lastNode.setLabel("merge_1")
    lastNode.setPosition(1257, 461)
    lastNode.setSize(104, 55)
    lastNode.setColor(0.3, 0.37, 0.776)
    groupmerge_1 = lastNode

    del lastNode
    # End of node "merge_1"

    # Start of node "transform_1"
    lastNode = app.createNode("net.sf.openfx.TransformPlugin", 1, group)
    lastNode.setScriptName("transform_1")
    lastNode.setLabel("transform_1")
    lastNode.setPosition(1257, 380)
    lastNode.setSize(104, 32)
    lastNode.setColor(0.7, 0.3, 0.1)
    grouptransform_1 = lastNode

    param = lastNode.getParam("translate")
    if param is not None:
        param.setValueAtTime(-500, 1, 0)
        param.setValueAtTime(-350, 18.5, 0)
        param.setValueAtTime(350, 33.5, 0)
        param.setValueAtTime(500, 51, 0)
        del param

    param = lastNode.getParam("rotate")
    if param is not None:
        param.setValueAtTime(0, 1, 0)
        param.setValueAtTime(0, 18.5, 0)
        param.setValueAtTime(0, 33.5, 0)
        param.setValueAtTime(0, 51, 0)
        del param

    param = lastNode.getParam("center")
    if param is not None:
        param.setValue(2248, 0)
        param.setValue(960, 1)
        del param

    param = lastNode.getParam("transformCenterChanged")
    if param is not None:
        param.setValue(True)
        del param

    param = lastNode.getParam("motionBlur")
    if param is not None:
        param.setValue(0, 0)
        del param

    del lastNode
    # End of node "transform_1"

    # Start of node "transform_2"
    lastNode = app.createNode("net.sf.openfx.TransformPlugin", 1, group)
    lastNode.setScriptName("transform_2")
    lastNode.setLabel("transform_2")
    lastNode.setPosition(1662, 339)
    lastNode.setSize(104, 32)
    lastNode.setColor(0.7, 0.3, 0.1)
    grouptransform_2 = lastNode

    param = lastNode.getParam("translate")
    if param is not None:
        param.setValueAtTime(-845, 6, 0)
        param.setValueAtTime(-695, 23.5, 0)
        param.setValueAtTime(4.999999999999972, 38.5, 0)
        param.setValueAtTime(155, 56, 0)
        del param

    param = lastNode.getParam("rotate")
    if param is not None:
        param.setValueAtTime(0, 6, 0)
        param.setValueAtTime(0, 23.5, 0)
        param.setValueAtTime(0, 38.5, 0)
        param.setValueAtTime(0, 56, 0)
        del param

    param = lastNode.getParam("center")
    if param is not None:
        param.setValue(2248, 0)
        param.setValue(960, 1)
        del param

    param = lastNode.getParam("transformCenterChanged")
    if param is not None:
        param.setValue(True)
        del param

    param = lastNode.getParam("motionBlur")
    if param is not None:
        param.setValue(0, 0)
        del param

    del lastNode
    # End of node "transform_2"

    # Start of node "transform_3"
    lastNode = app.createNode("net.sf.openfx.TransformPlugin", 1, group)
    lastNode.setScriptName("transform_3")
    lastNode.setLabel("transform_3")
    lastNode.setPosition(1997, 326)
    lastNode.setSize(104, 32)
    lastNode.setColor(0.7, 0.3, 0.1)
    grouptransform_3 = lastNode

    param = lastNode.getParam("translate")
    if param is not None:
        param.setValueAtTime(-1190, 11, 0)
        param.setValueAtTime(-1040, 28.5, 0)
        param.setValueAtTime(-340, 43.5, 0)
        param.setValueAtTime(-190, 61, 0)
        del param

    param = lastNode.getParam("rotate")
    if param is not None:
        param.setValueAtTime(0, 11, 0)
        param.setValueAtTime(0, 28.5, 0)
        param.setValueAtTime(0, 43.5, 0)
        param.setValueAtTime(0, 61, 0)
        del param

    param = lastNode.getParam("center")
    if param is not None:
        param.setValue(2248, 0)
        param.setValue(960, 1)
        del param

    param = lastNode.getParam("transformCenterChanged")
    if param is not None:
        param.setValue(True)
        del param

    param = lastNode.getParam("motionBlur")
    if param is not None:
        param.setValue(0, 0)
        del param

    del lastNode
    # End of node "transform_3"

    # Start of node "transform_4"
    lastNode = app.createNode("net.sf.openfx.TransformPlugin", 1, group)
    lastNode.setScriptName("transform_4")
    lastNode.setLabel("transform_4")
    lastNode.setPosition(2344, 327)
    lastNode.setSize(104, 32)
    lastNode.setColor(0.7, 0.3, 0.1)
    grouptransform_4 = lastNode

    param = lastNode.getParam("translate")
    if param is not None:
        param.setValueAtTime(-1535, 16, 0)
        param.setValueAtTime(-1385, 33.5, 0)
        param.setValueAtTime(-685, 48.5, 0)
        param.setValueAtTime(-535, 66, 0)
        del param

    param = lastNode.getParam("rotate")
    if param is not None:
        param.setValueAtTime(0, 16, 0)
        param.setValueAtTime(0, 33.5, 0)
        param.setValueAtTime(0, 48.5, 0)
        param.setValueAtTime(0, 66, 0)
        del param

    param = lastNode.getParam("center")
    if param is not None:
        param.setValue(2248, 0)
        param.setValue(960, 1)
        del param

    param = lastNode.getParam("transformCenterChanged")
    if param is not None:
        param.setValue(True)
        del param

    param = lastNode.getParam("motionBlur")
    if param is not None:
        param.setValue(0, 0)
        del param

    del lastNode
    # End of node "transform_4"

    # Start of node "transform_5"
    lastNode = app.createNode("net.sf.openfx.TransformPlugin", 1, group)
    lastNode.setScriptName("transform_5")
    lastNode.setLabel("transform_5")
    lastNode.setPosition(2706, 337)
    lastNode.setSize(104, 32)
    lastNode.setColor(0.7, 0.3, 0.1)
    grouptransform_5 = lastNode

    param = lastNode.getParam("translate")
    if param is not None:
        param.setValueAtTime(-1880, 21, 0)
        param.setValueAtTime(-1730, 38.5, 0)
        param.setValueAtTime(-1030, 53.5, 0)
        param.setValueAtTime(-880, 71, 0)
        del param

    param = lastNode.getParam("rotate")
    if param is not None:
        param.setValueAtTime(0, 21, 0)
        param.setValueAtTime(0, 38.5, 0)
        param.setValueAtTime(0, 53.5, 0)
        param.setValueAtTime(0, 71, 0)
        del param

    param = lastNode.getParam("center")
    if param is not None:
        param.setValue(2248, 0)
        param.setValue(960, 1)
        del param

    param = lastNode.getParam("transformCenterChanged")
    if param is not None:
        param.setValue(True)
        del param

    param = lastNode.getParam("motionBlur")
    if param is not None:
        param.setValue(0, 0)
        del param

    del lastNode
    # End of node "transform_5"

    # Start of node "transform_6"
    lastNode = app.createNode("net.sf.openfx.TransformPlugin", 1, group)
    lastNode.setScriptName("transform_6")
    lastNode.setLabel("transform_6")
    lastNode.setPosition(3099, 347)
    lastNode.setSize(104, 32)
    lastNode.setColor(0.7, 0.3, 0.1)
    grouptransform_6 = lastNode

    param = lastNode.getParam("translate")
    if param is not None:
        param.setValueAtTime(-2225, 26, 0)
        param.setValueAtTime(-2075, 43.5, 0)
        param.setValueAtTime(-1375, 58.5, 0)
        param.setValueAtTime(-1225, 76, 0)
        del param

    param = lastNode.getParam("rotate")
    if param is not None:
        param.setValueAtTime(0, 26, 0)
        param.setValueAtTime(0, 43.5, 0)
        param.setValueAtTime(0, 58.5, 0)
        param.setValueAtTime(0, 76, 0)
        del param

    param = lastNode.getParam("center")
    if param is not None:
        param.setValue(2248, 0)
        param.setValue(960, 1)
        del param

    param = lastNode.getParam("transformCenterChanged")
    if param is not None:
        param.setValue(True)
        del param

    param = lastNode.getParam("motionBlur")
    if param is not None:
        param.setValue(0, 0)
        del param

    del lastNode
    # End of node "transform_6"

    # Start of node "transform_7"
    lastNode = app.createNode("net.sf.openfx.TransformPlugin", 1, group)
    lastNode.setScriptName("transform_7")
    lastNode.setLabel("transform_7")
    lastNode.setPosition(3468, 341)
    lastNode.setSize(104, 32)
    lastNode.setColor(0.7, 0.3, 0.1)
    grouptransform_7 = lastNode

    param = lastNode.getParam("translate")
    if param is not None:
        param.setValueAtTime(-2570, 31, 0)
        param.setValueAtTime(-2420, 48.5, 0)
        param.setValueAtTime(-1720, 63.5, 0)
        param.setValueAtTime(-1570, 81, 0)
        del param

    param = lastNode.getParam("rotate")
    if param is not None:
        param.setValueAtTime(0, 31, 0)
        param.setValueAtTime(0, 48.5, 0)
        param.setValueAtTime(0, 63.5, 0)
        param.setValueAtTime(0, 81, 0)
        del param

    param = lastNode.getParam("center")
    if param is not None:
        param.setValue(2248, 0)
        param.setValue(960, 1)
        del param

    param = lastNode.getParam("transformCenterChanged")
    if param is not None:
        param.setValue(True)
        del param

    param = lastNode.getParam("motionBlur")
    if param is not None:
        param.setValue(0, 0)
        del param

    del lastNode
    # End of node "transform_7"

    # Start of node "Crop2"
    lastNode = app.createNode("net.sf.openfx.CropPlugin", 1, group)
    lastNode.setScriptName("Crop2")
    lastNode.setLabel("Crop2")
    lastNode.setPosition(3468, 561)
    lastNode.setSize(104, 32)
    lastNode.setColor(0.7, 0.3, 0.1)
    groupCrop2 = lastNode

    param = lastNode.getParam("NatronParamFormatChoice")
    if param is not None:
        param.set("PC_Video")
        del param

    param = lastNode.getParam("size")
    if param is not None:
        param.setValue(1920, 0)
        param.setValue(1920, 1)
        del param

    del lastNode
    # End of node "Crop2"

    # Start of node "Crop3"
    lastNode = app.createNode("net.sf.openfx.CropPlugin", 1, group)
    lastNode.setScriptName("Crop3")
    lastNode.setLabel("Crop3")
    lastNode.setPosition(1258, -105)
    lastNode.setSize(104, 32)
    lastNode.setColor(0.7, 0.3, 0.1)
    groupCrop3 = lastNode

    param = lastNode.getParam("NatronParamFormatChoice")
    if param is not None:
        param.set("PC_Video")
        del param

    param = lastNode.getParam("size")
    if param is not None:
        param.setValue(1920, 0)
        param.setValue(1920, 1)
        del param

    param = lastNode.getParam("intersect")
    if param is not None:
        param.setValue(True)
        del param

    del lastNode
    # End of node "Crop3"

    # Start of node "Reformat1_2_2"
    lastNode = app.createNode("net.sf.openfx.Reformat", 1, group)
    lastNode.setScriptName("Reformat1_2_2")
    lastNode.setLabel("Reformat1_2_2")
    lastNode.setPosition(981, 472)
    lastNode.setSize(104, 32)
    lastNode.setColor(0.7, 0.3, 0.1)
    groupReformat1_2_2 = lastNode

    param = lastNode.getParam("reformatType")
    if param is not None:
        param.set("box")
        del param

    param = lastNode.getParam("NatronParamFormatChoice")
    if param is not None:
        param.set("PC_Video")
        del param

    param = lastNode.getParam("boxSize")
    if param is not None:
        param.setValue(1920, 0)
        param.setValue(1920, 1)
        del param

    param = lastNode.getParam("boxFixed")
    if param is not None:
        param.setValue(True)
        del param

    del lastNode
    # End of node "Reformat1_2_2"

    # Start of node "direction_transform"
    lastNode = app.createNode("net.sf.openfx.TransformPlugin", 1, group)
    lastNode.setScriptName("direction_transform")
    lastNode.setLabel("direction_transform")
    lastNode.setPosition(3468, 616)
    lastNode.setSize(104, 55)
    lastNode.setColor(0.7, 0.3, 0.1)
    groupdirection_transform = lastNode

    param = lastNode.getParam("center")
    if param is not None:
        param.setValue(960, 1)
        del param

    param = lastNode.getParam("transformCenterChanged")
    if param is not None:
        param.setValue(True)
        del param

    del lastNode
    # End of node "direction_transform"

    # Start of node "format"
    lastNode = app.createNode("net.sf.openfx.Reformat", 1, group)
    lastNode.setScriptName("format")
    lastNode.setLabel("format")
    lastNode.setPosition(3469, 726)
    lastNode.setSize(104, 32)
    lastNode.setColor(0.7, 0.3, 0.1)
    groupformat = lastNode

    param = lastNode.getParam("reformatType")
    if param is not None:
        param.set("box")
        del param

    param = lastNode.getParam("NatronParamFormatChoice")
    if param is not None:
        param.set("PC_Video")
        del param

    param = lastNode.getParam("boxSize")
    if param is not None:
        param.setValue(1920, 0)
        param.setValue(1080, 1)
        del param

    param = lastNode.getParam("boxFixed")
    if param is not None:
        param.setValue(True)
        del param

    del lastNode
    # End of node "format"

    # Now that all nodes are created we can connect them together, restore expressions
    groupOutput1.connectInput(0, groupformat)
    groupshape_width_1.connectInput(0, groupDot1)
    groupshape_mask_1.connectInput(0, groupDot1)
    groupshape_mask_1.connectInput(1, groupshape_width_1)
    groupDot1.connectInput(0, groupDot2)
    groupDot2.connectInput(0, groupCrop3)
    groupshape_width_2.connectInput(0, groupDot1_3)
    groupshape_mask_2.connectInput(0, groupDot1_3)
    groupshape_mask_2.connectInput(1, groupshape_width_2)
    groupDot1_3.connectInput(0, groupDot2_2)
    groupDot2_2.connectInput(0, groupDot2)
    groupshape_width_3.connectInput(0, groupDot1_4)
    groupshape_mask_3.connectInput(0, groupDot1_4)
    groupshape_mask_3.connectInput(1, groupshape_width_3)
    groupDot1_4.connectInput(0, groupDot2_3)
    groupDot2_3.connectInput(0, groupDot2_2)
    groupshape_width_4.connectInput(0, groupDot1_5)
    groupshape_mask_4.connectInput(0, groupDot1_5)
    groupshape_mask_4.connectInput(1, groupshape_width_4)
    groupDot1_5.connectInput(0, groupDot2_4)
    groupDot2_4.connectInput(0, groupDot2_3)
    groupshape_width_5.connectInput(0, groupDot1_6)
    groupshape_mask_5.connectInput(0, groupDot1_6)
    groupshape_mask_5.connectInput(1, groupshape_width_5)
    groupDot1_6.connectInput(0, groupDot2_5)
    groupDot2_5.connectInput(0, groupDot2_4)
    groupshape_width_6.connectInput(0, groupDot1_7)
    groupshape_mask_6.connectInput(0, groupDot1_7)
    groupshape_mask_6.connectInput(1, groupshape_width_6)
    groupDot1_7.connectInput(0, groupDot2_6)
    groupDot2_6.connectInput(0, groupDot2_5)
    groupshape_width_7.connectInput(0, groupDot1_2)
    groupshape_mask_7.connectInput(0, groupDot1_2)
    groupshape_mask_7.connectInput(1, groupshape_width_7)
    groupDot1_2.connectInput(0, groupDot2_7)
    groupDot2_7.connectInput(0, groupDot2_6)
    groupmerge_2.connectInput(0, groupmerge_1)
    groupmerge_2.connectInput(1, grouptransform_2)
    groupmerge_3.connectInput(0, groupmerge_2)
    groupmerge_3.connectInput(1, grouptransform_3)
    groupmerge_4.connectInput(0, groupmerge_3)
    groupmerge_4.connectInput(1, grouptransform_4)
    groupmerge_5.connectInput(0, groupmerge_4)
    groupmerge_5.connectInput(1, grouptransform_5)
    groupmerge_6.connectInput(0, groupmerge_5)
    groupmerge_6.connectInput(1, grouptransform_6)
    groupmerge_7.connectInput(0, groupmerge_6)
    groupmerge_7.connectInput(1, grouptransform_7)
    groupmerge_1.connectInput(0, groupReformat1_2_2)
    groupmerge_1.connectInput(1, grouptransform_1)
    grouptransform_1.connectInput(0, groupshape_mask_1)
    grouptransform_2.connectInput(0, groupshape_mask_2)
    grouptransform_3.connectInput(0, groupshape_mask_3)
    grouptransform_4.connectInput(0, groupshape_mask_4)
    grouptransform_5.connectInput(0, groupshape_mask_5)
    grouptransform_6.connectInput(0, groupshape_mask_6)
    grouptransform_7.connectInput(0, groupshape_mask_7)
    groupCrop2.connectInput(0, groupmerge_7)
    groupCrop3.connectInput(0, groupShape)
    groupdirection_transform.connectInput(0, groupCrop2)
    groupformat.connectInput(0, groupdirection_transform)

    param = grouptransform_1.getParam("motionBlur")
    param.setExpression("thisGroup.motion_blur.get()", False, 0)
    del param
    param = grouptransform_2.getParam("motionBlur")
    param.setExpression("thisGroup.motion_blur.get()", False, 0)
    del param
    param = grouptransform_3.getParam("motionBlur")
    param.setExpression("thisGroup.motion_blur.get()", False, 0)
    del param
    param = grouptransform_4.getParam("motionBlur")
    param.setExpression("thisGroup.motion_blur.get()", False, 0)
    del param
    param = grouptransform_5.getParam("motionBlur")
    param.setExpression("thisGroup.motion_blur.get()", False, 0)
    del param
    param = grouptransform_6.getParam("motionBlur")
    param.setExpression("thisGroup.motion_blur.get()", False, 0)
    del param
    param = grouptransform_7.getParam("motionBlur")
    param.setExpression("thisGroup.motion_blur.get()", False, 0)
    del param
    param = groupCrop2.getParam("size")
    param.setExpression("thisGroup.format.boxSize.getValue(0)", False, 0)
    param.setExpression("thisGroup.format.boxSize.getValue(0)", False, 1)
    del param
    param = groupCrop3.getParam("size")
    param.setExpression("thisGroup.format.boxSize.getValue(0)", False, 0)
    param.setExpression("thisGroup.format.boxSize.getValue(0)", False, 1)
    del param
    param = groupReformat1_2_2.getParam("boxSize")
    param.setExpression("thisGroup.format.boxSize.getValue(0)", False, 0)
    param.setExpression("thisGroup.format.boxSize.getValue(0)", False, 1)
    del param
    param = groupformat.getParam("boxSize")
    group.getParam("formatboxSize").setAsAlias(param)
    del param

    try:
        extModule = sys.modules["ShapeTransitionExt"]
    except KeyError:
        extModule = None
    if extModule is not None and hasattr(extModule ,"createInstanceExt") and hasattr(extModule.createInstanceExt,"__call__"):
        extModule.createInstanceExt(app,group)
