# -*- coding: utf-8 -*-
# DO NOT EDIT THIS FILE
# Natron PyPlug
# This file was automatically generated by Natron PyPlug exporter version 10.

# Hand-written code should be added in a separate file named LetterAnimationExt.py
# See http://natron.readthedocs.org/en/master/devel/groups.html#adding-hand-written-code-callbacks-etc
# Note that Viewers are never exported

import NatronEngine
import sys

# Try to import the extensions file where callbacks and hand-written code should be located.
try:
    from LetterAnimationExt import *
except ImportError:
    pass

def getPluginID():
    return "vv.LetterAnimation"

def getLabel():
    return "LetterAnimation"

def getVersion():
    return 1

def getIconPath():
    return "Text.png"

def getGrouping():
    return "videovina/Texts"

def createInstance(app,group):
    # Create all nodes in the group

    # Create the parameters of the group node the same way we did for all internal nodes
    lastNode = group
    lastNode.setColor(0.7, 0.7, 0.7)
    param = lastNode.getParam("onParamChanged")
    if param is not None:
        param.setValue("letter_animation.main")
        del param


    # Create the user parameters
    lastNode.control = lastNode.createPageParam("control", "Control")
    param = lastNode.createStringParam("state_label", "State")
    param.setType(NatronEngine.StringParam.TypeEnum.eStringTypeLabel)
    param.setDefaultValue("- - - - - - - >    STATE :")
    param.restoreDefaultValue()

    # Add the param to the page
    lastNode.control.addParam(param)

    # Set param properties
    param.setHelp("")
    param.setAddNewLine(True)
    param.setEvaluateOnChange(False)
    param.setAnimationEnabled(False)
    lastNode.state_label = param
    del param

    param = lastNode.createChoiceParam("format", "Format")
    entries = [ ("Quarter HD - 480 x 270", ""),
    ("Half HD - 960 x 540", ""),
    ("Full HD - 1920 x 1080", ""),
    ("4K - 3840 x 2160", "")]
    param.setOptions(entries)
    del entries
    param.setDefaultValue("Full HD - 1920 x 1080")
    param.restoreDefaultValue()

    # Add the param to the page
    lastNode.control.addParam(param)

    # Set param properties
    param.setHelp("")
    param.setAddNewLine(True)
    param.setAnimationEnabled(True)
    lastNode.format = param
    del param

    param = lastNode.createChoiceParam("speed", "Speed")
    entries = [ ("Slow", ""),
    ("Normal", ""),
    ("Fast", "")]
    param.setOptions(entries)
    del entries
    param.setDefaultValue("Normal")
    param.restoreDefaultValue()

    # Add the param to the page
    lastNode.control.addParam(param)

    # Set param properties
    param.setHelp("")
    param.setAddNewLine(False)
    param.setAnimationEnabled(True)
    param.set("Slow")
    lastNode.speed = param
    del param

    param = lastNode.createButtonParam("link", "Link To Parent")

    # Add the param to the page
    lastNode.control.addParam(param)

    # Set param properties
    param.setHelp("")
    param.setAddNewLine(False)
    param.setEvaluateOnChange(False)
    lastNode.link = param
    del param

    param = lastNode.createButtonParam("refresh", "Refresh")

    # Add the param to the page
    lastNode.control.addParam(param)

    # Set param properties
    param.setHelp("")
    param.setAddNewLine(False)
    param.setEvaluateOnChange(False)
    lastNode.refresh = param
    del param

    param = lastNode.createSeparatorParam("sep5", "")

    # Add the param to the page
    lastNode.control.addParam(param)

    # Set param properties
    param.setHelp("")
    param.setAddNewLine(True)
    param.setPersistent(False)
    param.setEvaluateOnChange(False)
    lastNode.sep5 = param
    del param

    param = lastNode.createStringParam("time_label", "")
    param.setType(NatronEngine.StringParam.TypeEnum.eStringTypeLabel)
    param.setDefaultValue("- - - - - - - >    TIME :")
    param.restoreDefaultValue()

    # Add the param to the page
    lastNode.control.addParam(param)

    # Set param properties
    param.setHelp("")
    param.setAddNewLine(True)
    param.setEvaluateOnChange(False)
    param.setAnimationEnabled(False)
    lastNode.time_label = param
    del param

    param = lastNode.createIntParam("start_frame", "Start Frame")
    param.setDisplayMinimum(0, 0)
    param.setDisplayMaximum(100, 0)
    param.setDefaultValue(0, 0)
    param.restoreDefaultValue(0)

    # Add the param to the page
    lastNode.control.addParam(param)

    # Set param properties
    param.setHelp("")
    param.setAddNewLine(True)
    param.setAnimationEnabled(True)
    lastNode.start_frame = param
    del param

    param = lastNode.createInt3DParam("durations", "Durations")
    param.setDisplayMinimum(0, 0)
    param.setDisplayMaximum(100, 0)
    param.setDefaultValue(0, 0)
    param.restoreDefaultValue(0)
    param.setDisplayMinimum(0, 1)
    param.setDisplayMaximum(100, 1)
    param.setDefaultValue(0, 1)
    param.restoreDefaultValue(1)
    param.setDisplayMinimum(0, 2)
    param.setDisplayMaximum(100, 2)
    param.setDefaultValue(0, 2)
    param.restoreDefaultValue(2)

    # Add the param to the page
    lastNode.control.addParam(param)

    # Set param properties
    param.setHelp("")
    param.setAddNewLine(False)
    param.setAnimationEnabled(True)
    param.setValue(150, 0)
    param.setValue(100, 1)
    param.setValue(50, 2)
    lastNode.durations = param
    del param

    param = lastNode.createDoubleParam("transition", "Transition %")
    param.setMinimum(0, 0)
    param.setMaximum(100, 0)
    param.setDisplayMinimum(0, 0)
    param.setDisplayMaximum(100, 0)

    # Add the param to the page
    lastNode.control.addParam(param)

    # Set param properties
    param.setHelp("Es la duracion en que la palabra se armara,\neste es el porcentaje de la duracion de arriba.")
    param.setAddNewLine(True)
    param.setAnimationEnabled(True)
    param.setValue(50, 0)
    lastNode.transition = param
    del param

    param = lastNode.createSeparatorParam("sep6", "")

    # Add the param to the page
    lastNode.control.addParam(param)

    # Set param properties
    param.setHelp("")
    param.setAddNewLine(True)
    param.setPersistent(False)
    param.setEvaluateOnChange(False)
    lastNode.sep6 = param
    del param

    param = lastNode.createStringParam("texts_label", "")
    param.setType(NatronEngine.StringParam.TypeEnum.eStringTypeLabel)
    param.setDefaultValue("- - - - - - - >    TEXT :")
    param.restoreDefaultValue()

    # Add the param to the page
    lastNode.control.addParam(param)

    # Set param properties
    param.setHelp("")
    param.setAddNewLine(True)
    param.setEvaluateOnChange(False)
    param.setAnimationEnabled(False)
    lastNode.texts_label = param
    del param

    param = lastNode.createStringParam("title", "Title")
    param.setType(NatronEngine.StringParam.TypeEnum.eStringTypeDefault)

    # Add the param to the page
    lastNode.control.addParam(param)

    # Set param properties
    param.setHelp("")
    param.setAddNewLine(True)
    param.setAnimationEnabled(True)
    param.setValue("Francisco")
    lastNode.title = param
    del param

    param = lastNode.createStringParam("subtitle", "Subtitle")
    param.setType(NatronEngine.StringParam.TypeEnum.eStringTypeDefault)

    # Add the param to the page
    lastNode.control.addParam(param)

    # Set param properties
    param.setHelp("")
    param.setAddNewLine(True)
    param.setAnimationEnabled(True)
    param.setValue("Jose")
    lastNode.subtitle = param
    del param

    param = lastNode.createFileParam("font", "Font")
    param.setSequenceEnabled(False)

    # Add the param to the page
    lastNode.control.addParam(param)

    # Set param properties
    param.setHelp("")
    param.setAddNewLine(True)
    param.setAnimationEnabled(False)
    param.setValue("/home/pancho/Documents/GitHub/videovina/private/fonts/Kingthings Trypewriter.ttf")
    lastNode.font = param
    del param

    param = lastNode.createColorParam("color", "Color", False)
    param.setMinimum(-2147483648, 0)
    param.setMaximum(2147483647, 0)
    param.setDisplayMinimum(0, 0)
    param.setDisplayMaximum(1, 0)
    param.setMinimum(-2147483648, 1)
    param.setMaximum(2147483647, 1)
    param.setDisplayMinimum(0, 1)
    param.setDisplayMaximum(1, 1)
    param.setMinimum(-2147483648, 2)
    param.setMaximum(2147483647, 2)
    param.setDisplayMinimum(0, 2)
    param.setDisplayMaximum(1, 2)

    # Add the param to the page
    lastNode.control.addParam(param)

    # Set param properties
    param.setHelp("")
    param.setAddNewLine(True)
    param.setAnimationEnabled(True)
    param.setValue(0.1714411079883575, 0)
    param.setValue(1, 1)
    param.setValue(0.904661238193512, 2)
    lastNode.color = param
    del param

    param = lastNode.createButtonParam("text_generator", "Text Generator")

    # Add the param to the page
    lastNode.control.addParam(param)

    # Set param properties
    param.setHelp("")
    param.setAddNewLine(False)
    param.setEvaluateOnChange(False)
    lastNode.text_generator = param
    del param

    param = lastNode.createSeparatorParam("sep7", "")

    # Add the param to the page
    lastNode.control.addParam(param)

    # Set param properties
    param.setHelp("")
    param.setAddNewLine(True)
    param.setPersistent(False)
    param.setEvaluateOnChange(False)
    lastNode.sep7 = param
    del param

    param = lastNode.createStringParam("settings_label", "")
    param.setType(NatronEngine.StringParam.TypeEnum.eStringTypeLabel)
    param.setDefaultValue("- - - - - - - >    SETTINGS :")
    param.restoreDefaultValue()

    # Add the param to the page
    lastNode.control.addParam(param)

    # Set param properties
    param.setHelp("")
    param.setAddNewLine(True)
    param.setEvaluateOnChange(False)
    param.setAnimationEnabled(False)
    lastNode.settings_label = param
    del param

    param = lastNode.createDoubleParam("word_gap", "Word Gap %")
    param.setMinimum(0, 0)
    param.setMaximum(2147483647, 0)
    param.setDisplayMinimum(0, 0)
    param.setDisplayMaximum(100, 0)

    # Add the param to the page
    lastNode.control.addParam(param)

    # Set param properties
    param.setHelp("")
    param.setAddNewLine(True)
    param.setAnimationEnabled(True)
    param.setValue(27.4, 0)
    lastNode.word_gap = param
    del param

    param = lastNode.createDoubleParam("letter_gap", "Letter Gap %")
    param.setMinimum(0, 0)
    param.setMaximum(2147483647, 0)
    param.setDisplayMinimum(0, 0)
    param.setDisplayMaximum(100, 0)

    # Add the param to the page
    lastNode.control.addParam(param)

    # Set param properties
    param.setHelp("")
    param.setAddNewLine(False)
    param.setAnimationEnabled(True)
    param.setValue(28.4, 0)
    lastNode.letter_gap = param
    del param

    param = lastNode.createDoubleParam("displacement", "Displacement")
    param.setMinimum(0, 0)
    param.setMaximum(2147483647, 0)
    param.setDisplayMinimum(0, 0)
    param.setDisplayMaximum(2000, 0)

    # Add the param to the page
    lastNode.control.addParam(param)

    # Set param properties
    param.setHelp("")
    param.setAddNewLine(True)
    param.setAnimationEnabled(True)
    param.setValue(891, 0)
    lastNode.displacement = param
    del param

    param = lastNode.createDoubleParam("displacement_angle", "Angle")
    param.setMinimum(-2147483648, 0)
    param.setMaximum(2147483647, 0)
    param.setDisplayMinimum(-180, 0)
    param.setDisplayMaximum(180, 0)

    # Add the param to the page
    lastNode.control.addParam(param)

    # Set param properties
    param.setHelp("")
    param.setAddNewLine(False)
    param.setAnimationEnabled(True)
    param.setValue(-180, 0)
    lastNode.displacement_angle = param
    del param

    param = lastNode.createSeparatorParam("sep8", "")

    # Add the param to the page
    lastNode.control.addParam(param)

    # Set param properties
    param.setHelp("")
    param.setAddNewLine(True)
    param.setPersistent(False)
    param.setEvaluateOnChange(False)
    lastNode.sep8 = param
    del param

    param = lastNode.createDoubleParam("scale", "Scale")
    param.setMinimum(0, 0)
    param.setMaximum(2147483647, 0)
    param.setDisplayMinimum(0, 0)
    param.setDisplayMaximum(10, 0)

    # Add the param to the page
    lastNode.control.addParam(param)

    # Set param properties
    param.setHelp("")
    param.setAddNewLine(True)
    param.setAnimationEnabled(True)
    param.setValue(3.9, 0)
    lastNode.scale = param
    del param

    param = lastNode.createDoubleParam("rotate", "Rotate")
    param.setMinimum(-2147483648, 0)
    param.setMaximum(2147483647, 0)
    param.setDisplayMinimum(0, 0)
    param.setDisplayMaximum(360, 0)

    # Add the param to the page
    lastNode.control.addParam(param)

    # Set param properties
    param.setHelp("")
    param.setAddNewLine(False)
    param.setAnimationEnabled(True)
    param.setValue(253, 0)
    lastNode.rotate = param
    del param

    param = lastNode.createDoubleParam("opacity", "Opacity")
    param.setMinimum(0, 0)
    param.setMaximum(1, 0)
    param.setDisplayMinimum(0, 0)
    param.setDisplayMaximum(1, 0)

    # Add the param to the page
    lastNode.control.addParam(param)

    # Set param properties
    param.setHelp("")
    param.setAddNewLine(True)
    param.setAnimationEnabled(True)
    lastNode.opacity = param
    del param

    param = lastNode.createSeparatorParam("sep9", "")

    # Add the param to the page
    lastNode.control.addParam(param)

    # Set param properties
    param.setHelp("")
    param.setAddNewLine(True)
    param.setPersistent(False)
    param.setEvaluateOnChange(False)
    lastNode.sep9 = param
    del param

    param = lastNode.createDoubleParam("blur_x", "Blur X")
    param.setMinimum(0, 0)
    param.setMaximum(2147483647, 0)
    param.setDisplayMinimum(0, 0)
    param.setDisplayMaximum(100, 0)

    # Add the param to the page
    lastNode.control.addParam(param)

    # Set param properties
    param.setHelp("")
    param.setAddNewLine(True)
    param.setAnimationEnabled(True)
    param.setValue(100, 0)
    lastNode.blur_x = param
    del param

    param = lastNode.createDoubleParam("blur_y", "Blur Y")
    param.setMinimum(0, 0)
    param.setMaximum(2147483647, 0)
    param.setDisplayMinimum(0, 0)
    param.setDisplayMaximum(100, 0)

    # Add the param to the page
    lastNode.control.addParam(param)

    # Set param properties
    param.setHelp("")
    param.setAddNewLine(False)
    param.setAnimationEnabled(True)
    param.setValue(100, 0)
    lastNode.blur_y = param
    del param

    param = lastNode.createSeparatorParam("sep10", "")

    # Add the param to the page
    lastNode.control.addParam(param)

    # Set param properties
    param.setHelp("")
    param.setAddNewLine(True)
    param.setPersistent(False)
    param.setEvaluateOnChange(False)
    lastNode.sep10 = param
    del param

    param = lastNode.createChoiceParam("word_gap_word", "Word Gap")
    entries = [ ("Title", ""),
    ("Subtitle", "")]
    param.setOptions(entries)
    del entries

    # Add the param to the page
    lastNode.control.addParam(param)

    # Set param properties
    param.setHelp("Es la palabra que se va a desfasar.")
    param.setAddNewLine(True)
    param.setAnimationEnabled(True)
    param.set("Subtitle")
    lastNode.word_gap_word = param
    del param

    param = lastNode.createChoiceParam("letter_gap_direction", "Letter Gap Direction")
    entries = [ ("Left to Right", ""),
    ("Right to Left", "")]
    param.setOptions(entries)
    del entries

    # Add the param to the page
    lastNode.control.addParam(param)

    # Set param properties
    param.setHelp("")
    param.setAddNewLine(False)
    param.setAnimationEnabled(True)
    param.set("Right to Left")
    lastNode.letter_gap_direction = param
    del param

    param = lastNode.createButtonParam("texts_refresh", "Texts Refresh")

    # Add the param to the page
    lastNode.control.addParam(param)

    # Set param properties
    param.setHelp("")
    param.setAddNewLine(False)
    param.setEvaluateOnChange(False)
    lastNode.texts_refresh = param
    del param

    lastNode.exp = lastNode.createPageParam("exp", "Exp")
    param = lastNode.createInt2DParam("current_format", "Current Format")
    param.setDisplayMinimum(0, 0)
    param.setDisplayMaximum(100, 0)
    param.setDefaultValue(0, 0)
    param.restoreDefaultValue(0)
    param.setDisplayMinimum(0, 1)
    param.setDisplayMaximum(100, 1)
    param.setDefaultValue(0, 1)
    param.restoreDefaultValue(1)

    # Add the param to the page
    lastNode.exp.addParam(param)

    # Set param properties
    param.setHelp("")
    param.setAddNewLine(True)
    param.setAnimationEnabled(True)
    param.setValue(1920, 0)
    param.setValue(1080, 1)
    lastNode.current_format = param
    del param

    param = lastNode.createIntParam("duration", "Current Duration")
    param.setDisplayMinimum(0, 0)
    param.setDisplayMaximum(100, 0)
    param.setDefaultValue(0, 0)
    param.restoreDefaultValue(0)

    # Add the param to the page
    lastNode.exp.addParam(param)

    # Set param properties
    param.setHelp("")
    param.setAddNewLine(True)
    param.setAnimationEnabled(True)
    param.setValue(150, 0)
    lastNode.duration = param
    del param

    param = lastNode.createDoubleParam("rscale", "Rscale")
    param.setMinimum(-2147483648, 0)
    param.setMaximum(2147483647, 0)
    param.setDisplayMinimum(0, 0)
    param.setDisplayMaximum(100, 0)

    # Add the param to the page
    lastNode.exp.addParam(param)

    # Set param properties
    param.setHelp("")
    param.setAddNewLine(True)
    param.setAnimationEnabled(True)
    param.setValue(1, 0)
    lastNode.rscale = param
    del param

    # Refresh the GUI with the newly created parameters
    lastNode.setPagesOrder(['control', 'exp', 'Node', 'Settings'])
    lastNode.refreshUserParamsGUI()
    del lastNode

    # Start of node "Output1"
    lastNode = app.createNode("fr.inria.built-in.Output", 1, group)
    lastNode.setLabel("Output")
    lastNode.setPosition(-312, 599)
    lastNode.setSize(100, 29)
    lastNode.setColor(0.7, 0.7, 0.7)
    groupOutput1 = lastNode

    del lastNode
    # End of node "Output1"

    # Start of node "Input1"
    lastNode = app.createNode("fr.inria.built-in.Input", 1, group)
    lastNode.setScriptName("Input1")
    lastNode.setLabel("Input1")
    lastNode.setPosition(-980, -245)
    lastNode.setSize(100, 29)
    lastNode.setColor(0.3, 0.5, 0.2)
    groupInput1 = lastNode

    del lastNode
    # End of node "Input1"

    # Start of node "Backdrop1"
    lastNode = app.createNode("fr.inria.built-in.BackDrop", 1, group)
    lastNode.setScriptName("Backdrop1")
    lastNode.setLabel("Backdrop1")
    lastNode.setPosition(-702, -430)
    lastNode.setSize(458, 498)
    lastNode.setColor(0.4039, 0.451, 0.2431)
    groupBackdrop1 = lastNode

    param = lastNode.getParam("Label")
    if param is not None:
        param.setValue("<i><font size=\"20\" color=\"#000000\" face=\"Carlito\">Titles</font></i>")
        del param

    del lastNode
    # End of node "Backdrop1"

    # Start of node "title_node"
    lastNode = app.createNode("net.fxarena.openfx.Text", 6, group)
    lastNode.setScriptName("title_node")
    lastNode.setLabel("title_node")
    lastNode.setPosition(-659, -208)
    lastNode.setSize(100, 32)
    lastNode.setColor(0.3, 0.5, 0.2)
    grouptitle_node = lastNode

    param = lastNode.getParam("center")
    if param is not None:
        param.setValue(1041, 0)
        param.setValue(161, 1)
        del param

    param = lastNode.getParam("interactive")
    if param is not None:
        param.setValue(False)
        del param

    param = lastNode.getParam("autoSize")
    if param is not None:
        param.setValue(True)
        del param

    param = lastNode.getParam("centerInteract")
    if param is not None:
        param.setValue(True)
        del param

    param = lastNode.getParam("markup")
    if param is not None:
        param.setValue(True)
        del param

    param = lastNode.getParam("text")
    if param is not None:
        param.setValue("Francisco")
        del param

    param = lastNode.getParam("custom")
    if param is not None:
        param.setValue("/home/pancho/Documents/GitHub/videovina/private/fonts/Kingthings Trypewriter.ttf")
        del param

    param = lastNode.getParam("font")
    if param is not None:
        param.setValue("Kingthings Trypewriter 2")
        del param

    param = lastNode.getParam("size")
    if param is not None:
        param.setValue(274, 0)
        del param

    param = lastNode.getParam("arcRadius")
    if param is not None:
        param.setValue(0, 0)
        del param

    del lastNode
    # End of node "title_node"

    # Start of node "subtitle_node"
    lastNode = app.createNode("net.fxarena.openfx.Text", 6, group)
    lastNode.setScriptName("subtitle_node")
    lastNode.setLabel("subtitle_node")
    lastNode.setPosition(-383, -244)
    lastNode.setSize(100, 32)
    lastNode.setColor(0.3, 0.5, 0.2)
    groupsubtitle_node = lastNode

    param = lastNode.getParam("center")
    if param is not None:
        param.setValue(582, 0)
        param.setValue(187, 1)
        del param

    param = lastNode.getParam("autoSize")
    if param is not None:
        param.setValue(True)
        del param

    param = lastNode.getParam("text")
    if param is not None:
        param.setValue("Jose")
        del param

    param = lastNode.getParam("custom")
    if param is not None:
        param.setValue("/home/pancho/Documents/GitHub/videovina/private/fonts/Kingthings Trypewriter.ttf")
        del param

    param = lastNode.getParam("font")
    if param is not None:
        param.setValue("Kingthings Trypewriter 2")
        del param

    param = lastNode.getParam("size")
    if param is not None:
        param.setValue(362, 0)
        del param

    del lastNode
    # End of node "subtitle_node"

    # Start of node "Merge3"
    lastNode = app.createNode("net.sf.openfx.MergePlugin", 1, group)
    lastNode.setScriptName("Merge3")
    lastNode.setLabel("Merge3")
    lastNode.setPosition(-524, -28)
    lastNode.setSize(100, 55)
    lastNode.setColor(0.3, 0.37, 0.776)
    groupMerge3 = lastNode

    del lastNode
    # End of node "Merge3"

    # Start of node "title_position"
    lastNode = app.createNode("net.sf.openfx.Position", 1, group)
    lastNode.setScriptName("title_position")
    lastNode.setLabel("title_position")
    lastNode.setPosition(-659, -151)
    lastNode.setSize(100, 32)
    lastNode.setColor(0.7, 0.3, 0.1)
    grouptitle_position = lastNode

    param = lastNode.getParam("translate")
    if param is not None:
        param.setValue(-4, 0)
        param.setValue(605.5, 1)
        del param

    del lastNode
    # End of node "title_position"

    # Start of node "subtitle_position"
    lastNode = app.createNode("net.sf.openfx.Position", 1, group)
    lastNode.setScriptName("subtitle_position")
    lastNode.setLabel("subtitle_position")
    lastNode.setPosition(-383, -131)
    lastNode.setSize(100, 55)
    lastNode.setColor(0.7, 0.3, 0.1)
    groupsubtitle_position = lastNode

    param = lastNode.getParam("translate")
    if param is not None:
        param.setValue(393, 0)
        param.setValue(65.5, 1)
        del param

    del lastNode
    # End of node "subtitle_position"

    # Start of node "letter_transform_title"
    lastNode = app.createNode("net.sf.openfx.TransformPlugin", 1, group)
    lastNode.setScriptName("letter_transform_title")
    lastNode.setLabel("letter_transform_title")
    lastNode.setPosition(427, 488)
    lastNode.setSize(100, 55)
    lastNode.setColor(0.7, 0.3, 0.1)
    groupletter_transform_title = lastNode

    param = lastNode.getParam("translate")
    if param is not None:
        param.setValue(478, 0)
        param.setValue(572.75, 1)
        del param

    param = lastNode.getParam("rotate")
    if param is not None:
        param.setValueAtTime(0, 31, 0)
        del param

    param = lastNode.getParam("center")
    if param is not None:
        param.setValue(482, 0)
        param.setValue(-32.75, 1)
        del param

    param = lastNode.getParam("transformCenterChanged")
    if param is not None:
        param.setValue(True)
        del param

    param = lastNode.getParam("interactive")
    if param is not None:
        param.setValue(False)
        del param

    param = lastNode.getParam("filter")
    if param is not None:
        param.set("bilinear")
        del param

    param = lastNode.getParam("shutter")
    if param is not None:
        param.setValue(0, 0)
        del param

    del lastNode
    # End of node "letter_transform_title"

    # Start of node "letter_transform_subtitle"
    lastNode = app.createNode("net.sf.openfx.TransformPlugin", 1, group)
    lastNode.setScriptName("letter_transform_subtitle")
    lastNode.setLabel("letter_transform_subtitle")
    lastNode.setPosition(172, 313)
    lastNode.setSize(100, 55)
    lastNode.setColor(0.7, 0.3, 0.1)
    groupletter_transform_subtitle = lastNode

    param = lastNode.getParam("translate")
    if param is not None:
        param.setValue(676.5, 0)
        param.setValue(302.75, 1)
        del param

    param = lastNode.getParam("rotate")
    if param is not None:
        param.setValue(0, 0)
        del param

    param = lastNode.getParam("center")
    if param is not None:
        param.setValue(283.5, 0)
        param.setValue(237.25, 1)
        del param

    param = lastNode.getParam("transformCenterChanged")
    if param is not None:
        param.setValue(True)
        del param

    param = lastNode.getParam("interactive")
    if param is not None:
        param.setValue(False)
        del param

    param = lastNode.getParam("filter")
    if param is not None:
        param.set("bilinear")
        del param

    param = lastNode.getParam("shutter")
    if param is not None:
        param.setValue(0, 0)
        del param

    del lastNode
    # End of node "letter_transform_subtitle"

    # Start of node "Merge2"
    lastNode = app.createNode("net.sf.openfx.MergePlugin", 1, group)
    lastNode.setScriptName("Merge2")
    lastNode.setLabel("Merge2")
    lastNode.setPosition(172, 493)
    lastNode.setSize(100, 45)
    lastNode.setColor(0.3, 0.37, 0.776)
    groupMerge2 = lastNode

    param = lastNode.getParam("userTextArea")
    if param is not None:
        param.setValue("<Natron>(over)</Natron>")
        del param

    del lastNode
    # End of node "Merge2"

    # Start of node "first_hold"
    lastNode = app.createNode("net.sf.openfx.FrameHold", 1, group)
    lastNode.setScriptName("first_hold")
    lastNode.setLabel("first_hold")
    lastNode.setPosition(-108, 705)
    lastNode.setSize(100, 55)
    lastNode.setColor(0.7, 0.65, 0.35)
    groupfirst_hold = lastNode

    param = lastNode.getParam("firstFrame")
    if param is not None:
        param.setValue(1, 0)
        del param

    del lastNode
    # End of node "first_hold"

    # Start of node "last_hold"
    lastNode = app.createNode("net.sf.openfx.FrameHold", 1, group)
    lastNode.setScriptName("last_hold")
    lastNode.setLabel("last_hold")
    lastNode.setPosition(404, 706)
    lastNode.setSize(100, 45)
    lastNode.setColor(0.7, 0.65, 0.35)
    grouplast_hold = lastNode

    param = lastNode.getParam("firstFrame")
    if param is not None:
        param.setValue(100, 0)
        del param

    param = lastNode.getParam("userTextArea")
    if param is not None:
        param.setValue("<Natron>(frame 100)</Natron>")
        del param

    del lastNode
    # End of node "last_hold"

    # Start of node "Switch2"
    lastNode = app.createNode("net.sf.openfx.switchPlugin", 1, group)
    lastNode.setScriptName("Switch2")
    lastNode.setLabel("Switch2")
    lastNode.setPosition(172, 713)
    lastNode.setSize(100, 29)
    lastNode.setColor(0.3, 0.37, 0.776)
    groupSwitch2 = lastNode

    param = lastNode.getParam("which")
    if param is not None:
        param.setValue(1, 0)
        del param

    del lastNode
    # End of node "Switch2"

    # Start of node "Dot1"
    lastNode = app.createNode("fr.inria.built-in.Dot", 1, group)
    lastNode.setScriptName("Dot1")
    lastNode.setLabel("Dot1")
    lastNode.setPosition(215, 871)
    lastNode.setSize(14, 14)
    lastNode.setColor(0.7, 0.7, 0.7)
    groupDot1 = lastNode

    del lastNode
    # End of node "Dot1"

    # Start of node "General_Transform"
    lastNode = app.createNode("net.sf.openfx.TransformPlugin", 1, group)
    lastNode.setScriptName("General_Transform")
    lastNode.setLabel("General_Transform")
    lastNode.setPosition(-960, 87)
    lastNode.setSize(100, 55)
    lastNode.setColor(0.7, 0.3, 0.1)
    groupGeneral_Transform = lastNode

    param = lastNode.getParam("translate")
    if param is not None:
        param.setValue(0, 0)
        param.setValue(0, 1)
        del param

    param = lastNode.getParam("rotate")
    if param is not None:
        param.setValue(0, 0)
        del param

    param = lastNode.getParam("scale")
    if param is not None:
        param.setValue(0.5, 0)
        param.setValue(0.5, 1)
        del param

    param = lastNode.getParam("center")
    if param is not None:
        param.setValue(960, 0)
        param.setValue(540, 1)
        del param

    param = lastNode.getParam("transformCenterChanged")
    if param is not None:
        param.setValue(True)
        del param

    del lastNode
    # End of node "General_Transform"

    # Now that all nodes are created we can connect them together, restore expressions
    groupOutput1.connectInput(0, groupMerge2)
    groupMerge3.connectInput(0, groupsubtitle_position)
    groupMerge3.connectInput(1, grouptitle_position)
    grouptitle_position.connectInput(0, grouptitle_node)
    groupsubtitle_position.connectInput(0, groupsubtitle_node)
    groupMerge2.connectInput(0, groupletter_transform_subtitle)
    groupMerge2.connectInput(1, groupletter_transform_title)
    groupfirst_hold.connectInput(0, groupMerge2)
    grouplast_hold.connectInput(0, groupMerge2)
    groupSwitch2.connectInput(0, groupfirst_hold)
    groupSwitch2.connectInput(1, groupMerge2)
    groupSwitch2.connectInput(2, grouplast_hold)
    groupDot1.connectInput(0, groupSwitch2)
    groupGeneral_Transform.connectInput(0, groupMerge3)

    param = groupletter_transform_title.getParam("translate")
    param.setExpression("position = thisGroup.title_position.translate.curve( frame, dimension )\nresolution_scale = thisGroup.rscale.get()\n\n# Transform general\nscale, center, translate = 0, 0, 0\ntransform = thisGroup.getInput(0)\nif transform:\n\tscale = transform.getParam(\'scale\').curve( frame, dimension ) * resolution_scale\n\tcenter = transform.getParam(\'center\').curve( frame, dimension )\n\ttranslate = transform.getParam(\'translate\').curve( frame, dimension )\t\n\ttranslate = ( translate * resolution_scale ) + ( center * resolution_scale ) - center\n# ---------------------------\n\nposition_added = position * scale\nnew_position = position_added + translate + ( center - ( center * scale ) )\n\nret = new_position", True, 0)
    param.setExpression("position = thisGroup.title_position.translate.curve( frame, dimension )\nresolution_scale = thisGroup.rscale.get()\n\n# Transform general\nscale, center, translate = 0, 0, 0\ntransform = thisGroup.getInput(0)\nif transform:\n\tscale = transform.getParam(\'scale\').curve( frame, dimension ) * resolution_scale\n\tcenter = transform.getParam(\'center\').curve( frame, dimension )\n\ttranslate = transform.getParam(\'translate\').curve( frame, dimension )\t\n\ttranslate = ( translate * resolution_scale ) + ( center * resolution_scale ) - center\n# ---------------------------\n\nposition_added = position * scale\nnew_position = position_added + translate + ( center - ( center * scale ) )\n\nret = new_position", True, 1)
    del param
    param = groupletter_transform_title.getParam("rotate")
    param.setExpression("rotate = 0\ntransform = thisGroup.getInput(0)\nif transform:\n\trotate = transform.getParam(\'rotate\').curve( frame )\n\nret = rotate", True, 0)
    del param
    param = groupletter_transform_title.getParam("center")
    param.setExpression("position = thisGroup.title_position.translate.curve( frame, dimension )\nresolution_scale = thisGroup.rscale.get()\n\n# Transform general\nscale, center = 0, 0\ntransform = thisGroup.getInput(0)\nif transform:\n\tscale = transform.getParam(\'scale\').curve( frame, dimension ) * resolution_scale\n\tcenter = transform.getParam(\'center\').curve( frame, dimension )\n# ---------------------------\n\nposition_added = position * scale\nnew_center = ( center * scale ) - position_added\n\nret = new_center", True, 0)
    param.setExpression("position = thisGroup.title_position.translate.curve( frame, dimension )\nresolution_scale = thisGroup.rscale.get()\n\n# Transform general\nscale, center = 0, 0\ntransform = thisGroup.getInput(0)\nif transform:\n\tscale = transform.getParam(\'scale\').curve( frame, dimension ) * resolution_scale\n\tcenter = transform.getParam(\'center\').curve( frame, dimension )\n# ---------------------------\n\nposition_added = position * scale\nnew_center = ( center * scale ) - position_added\n\nret = new_center", True, 1)
    del param
    param = groupletter_transform_subtitle.getParam("translate")
    param.setExpression("position = thisGroup.subtitle_position.translate.curve( frame, dimension )\nresolution_scale = thisGroup.rscale.get()\n\n# Transform general\nscale, center, translate = 0, 0, 0\ntransform = thisGroup.getInput(0)\nif transform:\n\tscale = transform.getParam(\'scale\').curve( frame, dimension ) * resolution_scale\n\tcenter = transform.getParam(\'center\').curve( frame, dimension )\n\ttranslate = transform.getParam(\'translate\').curve( frame, dimension )\t\n\ttranslate = ( translate * resolution_scale ) + ( center * resolution_scale ) - center\n# ---------------------------\n\nposition_added = position * scale\nnew_position = position_added + translate + ( center - ( center * scale ) )\n\nret = new_position", True, 0)
    param.setExpression("position = thisGroup.subtitle_position.translate.curve( frame, dimension )\nresolution_scale = thisGroup.rscale.get()\n\n# Transform general\nscale, center, translate = 0, 0, 0\ntransform = thisGroup.getInput(0)\nif transform:\n\tscale = transform.getParam(\'scale\').curve( frame, dimension ) * resolution_scale\n\tcenter = transform.getParam(\'center\').curve( frame, dimension )\n\ttranslate = transform.getParam(\'translate\').curve( frame, dimension )\t\n\ttranslate = ( translate * resolution_scale ) + ( center * resolution_scale ) - center\n# ---------------------------\n\nposition_added = position * scale\nnew_position = position_added + translate + ( center - ( center * scale ) )\n\nret = new_position", True, 1)
    del param
    param = groupletter_transform_subtitle.getParam("rotate")
    param.setExpression("rotate = 0\ntransform = thisGroup.getInput(0)\nif transform:\n\trotate = transform.getParam(\'rotate\').curve( frame )\n\nret = rotate", True, 0)
    del param
    param = groupletter_transform_subtitle.getParam("center")
    param.setExpression("position = thisGroup.subtitle_position.translate.curve( frame, dimension )\nresolution_scale = thisGroup.rscale.get()\n\n# Transform general\nscale, center = 0, 0\ntransform = thisGroup.getInput(0)\nif transform:\n\tscale = transform.getParam(\'scale\').curve( frame, dimension ) * resolution_scale\n\tcenter = transform.getParam(\'center\').curve( frame, dimension )\n# ---------------------------\n\nposition_added = position * scale\nnew_center = ( center * scale ) - position_added\n\nret = new_center", True, 0)
    param.setExpression("position = thisGroup.subtitle_position.translate.curve( frame, dimension )\nresolution_scale = thisGroup.rscale.get()\n\n# Transform general\nscale, center = 0, 0\ntransform = thisGroup.getInput(0)\nif transform:\n\tscale = transform.getParam(\'scale\').curve( frame, dimension ) * resolution_scale\n\tcenter = transform.getParam(\'center\').curve( frame, dimension )\n# ---------------------------\n\nposition_added = position * scale\nnew_center = ( center * scale ) - position_added\n\nret = new_center", True, 1)
    del param
    param = groupfirst_hold.getParam("firstFrame")
    param.setExpression("thisGroup.frame_hold.getValue(0)", False, 0)
    del param
    param = grouplast_hold.getParam("firstFrame")
    param.setExpression("thisGroup.frame_hold.getValue(1)", False, 0)
    del param
    param = groupSwitch2.getParam("which")
    param.setExpression("if frame < thisGroup.frame_hold.getValue(0):\n\tret = 0\nelif frame > thisGroup.frame_hold.getValue(1):\n\tret = 2\nelse:\n\tret = 1\n", True, 0)
    del param
    param = groupGeneral_Transform.getParam("translate")
    param.setExpression("transform = thisGroup.getInput(0)\n\n# para la escale de resolucion\nscale = thisGroup.rscale.get()\n\ntranslate = 0\ncenter = 0\nif transform:\n\ttranslate = transform.getParam(\'translate\').curve(frame, dimension)\n\tcenter = transform.getParam(\'center\').curve(frame, dimension)\n\nret = (translate * scale) + (center * scale) - center", True, 0)
    param.setExpression("transform = thisGroup.getInput(0)\n\n# para la escale de resolucion\nscale = thisGroup.rscale.get()\n\ntranslate = 0\ncenter = 0\nif transform:\n\ttranslate = transform.getParam(\'translate\').curve(frame, dimension)\n\tcenter = transform.getParam(\'center\').curve(frame, dimension)\n\nret = (translate * scale) + (center * scale) - center", True, 1)
    del param
    param = groupGeneral_Transform.getParam("rotate")
    param.setExpression("transform = thisGroup.getInput(0)\n\nif transform:\n\tret = transform.getParam(\'rotate\').curve(frame)\nelse:\n\tret = 0", True, 0)
    del param
    param = groupGeneral_Transform.getParam("scale")
    param.setExpression("# si esta conectada la entrada Transform, obtiene la curva\ntransform = thisGroup.getInput(0)\n\n# para la escale de resolucion\nscale = thisGroup.rscale.get()\n\nif transform:\n\tret = transform.getParam(\'scale\').curve(frame, dimension) * scale\nelse:\n\tret = 1", True, 0)
    param.setExpression("# si esta conectada la entrada Transform, obtiene la curva\ntransform = thisGroup.getInput(0)\n\n# para la escale de resolucion\nscale = thisGroup.rscale.get()\n\nif transform:\n\tret = transform.getParam(\'scale\').curve(frame, dimension) * scale\nelse:\n\tret = 1", True, 1)
    del param
    param = groupGeneral_Transform.getParam("center")
    param.setExpression("transform = thisGroup.getInput(0)\n\ncenter = 0\nif transform:\n\tcenter = transform.getParam(\'center\').curve(frame, dimension)\n\nret = center", True, 0)
    param.setExpression("transform = thisGroup.getInput(0)\n\ncenter = 0\nif transform:\n\tcenter = transform.getParam(\'center\').curve(frame, dimension)\n\nret = center", True, 1)
    del param

    param = group.getParam("current_format")
    param.setExpression("index = thisNode.format.get()\nret = general.formats[index][dimension]", True, 0)
    param.setExpression("index = thisNode.format.get()\nret = general.formats[index][dimension]", True, 1)
    del param
    param = group.getParam("duration")
    param.setExpression("index = thisNode.speed.get()\nret = thisNode.durations.get()[index]", True, 0)
    del param
    param = group.getParam("rscale")
    param.setExpression("index = thisNode.format.get()\nret = general.rscale[index]", True, 0)
    del param
    try:
        extModule = sys.modules["LetterAnimationExt"]
    except KeyError:
        extModule = None
    if extModule is not None and hasattr(extModule ,"createInstanceExt") and hasattr(extModule.createInstanceExt,"__call__"):
        extModule.createInstanceExt(app,group)
