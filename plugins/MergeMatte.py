# -*- coding: utf-8 -*-
# DO NOT EDIT THIS FILE
# Natron PyPlug
# This file was automatically generated by Natron PyPlug exporter version 10.

# Hand-written code should be added in a separate file named MergeMatteExt.py
# See http://natron.readthedocs.org/en/master/devel/groups.html#adding-hand-written-code-callbacks-etc
# Note that Viewers are never exported

import NatronEngine
import sys

# Try to import the extensions file where callbacks and hand-written code should be located.
try:
    from MergeMatteExt import *
except ImportError:
    pass

def getPluginID():
    return "vv.merge_matte"

def getLabel():
    return "MergeMatte"

def getVersion():
    return 1

def getIconPath():
    return "MergeMatte.png"

def getGrouping():
    return "videovina/Misc"

def createInstance(app,group):
    # Create all nodes in the group

    # Create the parameters of the group node the same way we did for all internal nodes
    lastNode = group
    lastNode.setColor(0.7, 0.7, 0.7)
    param = lastNode.getParam("onParamChanged")
    if param is not None:
        param.setValue("merge_matte.main")
        del param


    # Create the user parameters
    lastNode.control = lastNode.createPageParam("control", "Control")
    param = lastNode.createChoiceParam("operation", "Color Operation")
    entries = [ ("Over", ""),
    ("Screen", ""),
    ("Stencil", ""),
    ("Mask", "")]
    param.setOptions(entries)
    del entries

    # Add the param to the page
    lastNode.control.addParam(param)

    # Set param properties
    param.setHelp("")
    param.setAddNewLine(True)
    param.setAnimationEnabled(True)
    lastNode.operation = param
    del param

    param = lastNode.createChoiceParam("MergeMatteMainchannels", "Matte Layer")

    # Add the param to the page
    lastNode.control.addParam(param)

    # Set param properties
    param.setHelp("")
    param.setAddNewLine(True)
    param.setAnimationEnabled(False)
    lastNode.MergeMatteMainchannels = param
    del param

    param = lastNode.createBooleanParam("show_matte", "Show Matte")

    # Add the param to the page
    lastNode.control.addParam(param)

    # Set param properties
    param.setHelp("")
    param.setAddNewLine(True)
    param.setAnimationEnabled(True)
    lastNode.show_matte = param
    del param

    # Refresh the GUI with the newly created parameters
    lastNode.setPagesOrder(['control', 'Node', 'Settings'])
    lastNode.refreshUserParamsGUI()
    del lastNode

    # Start of node "Output1"
    lastNode = app.createNode("fr.inria.built-in.Output", 1, group)
    lastNode.setLabel("Output")
    lastNode.setPosition(810, 1196)
    lastNode.setSize(100, 29)
    lastNode.setColor(0.7, 0.7, 0.7)
    groupOutput1 = lastNode

    del lastNode
    # End of node "Output1"

    # Start of node "B"
    lastNode = app.createNode("fr.inria.built-in.Input", 1, group)
    lastNode.setScriptName("B")
    lastNode.setLabel("B")
    lastNode.setPosition(804, -189)
    lastNode.setSize(100, 29)
    lastNode.setColor(0.3, 0.5, 0.2)
    groupB = lastNode

    del lastNode
    # End of node "B"

    # Start of node "A"
    lastNode = app.createNode("fr.inria.built-in.Input", 1, group)
    lastNode.setScriptName("A")
    lastNode.setLabel("A")
    lastNode.setPosition(430, -268)
    lastNode.setSize(100, 29)
    lastNode.setColor(0.3, 0.5, 0.2)
    groupA = lastNode

    del lastNode
    # End of node "A"

    # Start of node "stencil"
    lastNode = app.createNode("net.sf.openfx.MergePlugin", 1, group)
    lastNode.setScriptName("stencil")
    lastNode.setLabel("stencil")
    lastNode.setPosition(804, 196)
    lastNode.setSize(100, 55)
    lastNode.setColor(0.3, 0.37, 0.776)
    groupstencil = lastNode

    param = lastNode.getParam("operation")
    if param is not None:
        param.set("stencil")
        del param

    param = lastNode.getParam("userTextArea")
    if param is not None:
        param.setValue("<Natron>(over)</Natron>")
        del param

    del lastNode
    # End of node "stencil"

    # Start of node "stencil_matte"
    lastNode = app.createNode("net.sf.openfx.MergePlugin", 1, group)
    lastNode.setScriptName("stencil_matte")
    lastNode.setLabel("stencil_matte")
    lastNode.setPosition(804, 73)
    lastNode.setSize(100, 45)
    lastNode.setColor(0.3, 0.37, 0.776)
    groupstencil_matte = lastNode

    param = lastNode.getParam("aChannelsChanged")
    if param is not None:
        param.setValue(True)
        del param

    param = lastNode.getParam("bChannelsChanged")
    if param is not None:
        param.setValue(True)
        del param

    param = lastNode.getParam("userTextArea")
    if param is not None:
        param.setValue("<Natron>(over)</Natron>")
        del param

    del lastNode
    # End of node "stencil_matte"

    # Start of node "Dot1"
    lastNode = app.createNode("fr.inria.built-in.Dot", 1, group)
    lastNode.setScriptName("Dot1")
    lastNode.setLabel("Dot1")
    lastNode.setPosition(473, 216)
    lastNode.setSize(14, 14)
    lastNode.setColor(0.7, 0.7, 0.7)
    groupDot1 = lastNode

    del lastNode
    # End of node "Dot1"

    # Start of node "Switch1"
    lastNode = app.createNode("net.sf.openfx.switchPlugin", 1, group)
    lastNode.setScriptName("Switch1")
    lastNode.setLabel("Switch1")
    lastNode.setPosition(810, 881)
    lastNode.setSize(100, 45)
    lastNode.setColor(0.3, 0.37, 0.776)
    groupSwitch1 = lastNode

    param = lastNode.getParam("which")
    if param is not None:
        param.setValue(0, 0)
        del param

    param = lastNode.getParam("processAllPlanes")
    if param is not None:
        param.setValue(True)
        del param

    del lastNode
    # End of node "Switch1"

    # Start of node "mask"
    lastNode = app.createNode("net.sf.openfx.MergePlugin", 1, group)
    lastNode.setScriptName("mask")
    lastNode.setLabel("mask")
    lastNode.setPosition(-9, 200)
    lastNode.setSize(100, 55)
    lastNode.setColor(0.3, 0.37, 0.776)
    groupmask = lastNode

    param = lastNode.getParam("operation")
    if param is not None:
        param.set("mask")
        del param

    param = lastNode.getParam("userTextArea")
    if param is not None:
        param.setValue("<Natron>(over)</Natron>")
        del param

    del lastNode
    # End of node "mask"

    # Start of node "MergeMatteMain"
    lastNode = app.createNode("net.sf.openfx.MergePlugin", 1, group)
    lastNode.setScriptName("MergeMatteMain")
    lastNode.setLabel("MergeMatteMain")
    lastNode.setPosition(-9, -10)
    lastNode.setSize(100, 55)
    lastNode.setColor(0.3, 0.37, 0.776)
    groupMergeMatteMain = lastNode

    param = lastNode.getParam("aChannelsChanged")
    if param is not None:
        param.setValue(True)
        del param

    param = lastNode.getParam("bChannelsChanged")
    if param is not None:
        param.setValue(True)
        del param

    param = lastNode.getParam("channels")
    if param is not None:
        param.set("uk.co.thefoundry.OfxImagePlaneColour")
        del param

    del lastNode
    # End of node "MergeMatteMain"

    # Start of node "Dot3"
    lastNode = app.createNode("fr.inria.built-in.Dot", 1, group)
    lastNode.setScriptName("Dot3")
    lastNode.setLabel("Dot3")
    lastNode.setPosition(847, -95)
    lastNode.setSize(14, 14)
    lastNode.setColor(0.7, 0.7, 0.7)
    groupDot3 = lastNode

    del lastNode
    # End of node "Dot3"

    # Start of node "Dot4"
    lastNode = app.createNode("fr.inria.built-in.Dot", 1, group)
    lastNode.setScriptName("Dot4")
    lastNode.setLabel("Dot4")
    lastNode.setPosition(34, -93)
    lastNode.setSize(14, 14)
    lastNode.setColor(0.7, 0.7, 0.7)
    groupDot4 = lastNode

    del lastNode
    # End of node "Dot4"

    # Start of node "Invert3"
    lastNode = app.createNode("net.sf.openfx.Invert", 2, group)
    lastNode.setScriptName("Invert3")
    lastNode.setLabel("Invert3")
    lastNode.setPosition(167, 13)
    lastNode.setSize(100, 32)
    lastNode.setColor(0.48, 0.66, 1)
    groupInvert3 = lastNode

    del lastNode
    # End of node "Invert3"

    # Start of node "over"
    lastNode = app.createNode("net.sf.openfx.MergePlugin", 1, group)
    lastNode.setScriptName("over")
    lastNode.setLabel("over")
    lastNode.setPosition(1218, 395)
    lastNode.setSize(100, 45)
    lastNode.setColor(0.3, 0.37, 0.776)
    groupover = lastNode

    param = lastNode.getParam("userTextArea")
    if param is not None:
        param.setValue("<Natron>(over)</Natron>")
        del param

    del lastNode
    # End of node "over"

    # Start of node "Dot5"
    lastNode = app.createNode("fr.inria.built-in.Dot", 1, group)
    lastNode.setScriptName("Dot5")
    lastNode.setLabel("Dot5")
    lastNode.setPosition(1261, -92)
    lastNode.setSize(14, 14)
    lastNode.setColor(0.7, 0.7, 0.7)
    groupDot5 = lastNode

    del lastNode
    # End of node "Dot5"

    # Start of node "over_alpha"
    lastNode = app.createNode("net.sf.openfx.ShufflePlugin", 3, group)
    lastNode.setScriptName("over_alpha")
    lastNode.setLabel("over_alpha")
    lastNode.setPosition(286, -171)
    lastNode.setSize(100, 32)
    lastNode.setColor(0.6, 0.24, 0.39)
    groupover_alpha = lastNode

    param = lastNode.getParam("outputR")
    if param is not None:
        param.set("B.uk.co.thefoundry.OfxImagePlaneColour.A")
        del param

    param = lastNode.getParam("outputG")
    if param is not None:
        param.set("B.uk.co.thefoundry.OfxImagePlaneColour.A")
        del param

    param = lastNode.getParam("outputB")
    if param is not None:
        param.set("B.uk.co.thefoundry.OfxImagePlaneColour.A")
        del param

    del lastNode
    # End of node "over_alpha"

    # Start of node "Dot7"
    lastNode = app.createNode("fr.inria.built-in.Dot", 1, group)
    lastNode.setScriptName("Dot7")
    lastNode.setLabel("Dot7")
    lastNode.setPosition(473, -162)
    lastNode.setSize(14, 14)
    lastNode.setColor(0.7, 0.7, 0.7)
    groupDot7 = lastNode

    del lastNode
    # End of node "Dot7"

    # Start of node "Dot8"
    lastNode = app.createNode("fr.inria.built-in.Dot", 1, group)
    lastNode.setScriptName("Dot8")
    lastNode.setLabel("Dot8")
    lastNode.setPosition(329, 22)
    lastNode.setSize(14, 14)
    lastNode.setColor(0.7, 0.7, 0.7)
    groupDot8 = lastNode

    del lastNode
    # End of node "Dot8"

    # Start of node "over_matte"
    lastNode = app.createNode("net.sf.openfx.MergePlugin", 1, group)
    lastNode.setScriptName("over_matte")
    lastNode.setLabel("over_matte")
    lastNode.setPosition(1218, -2)
    lastNode.setSize(100, 45)
    lastNode.setColor(0.3, 0.37, 0.776)
    groupover_matte = lastNode

    param = lastNode.getParam("aChannelsChanged")
    if param is not None:
        param.setValue(True)
        del param

    param = lastNode.getParam("bChannelsChanged")
    if param is not None:
        param.setValue(True)
        del param

    param = lastNode.getParam("userTextArea")
    if param is not None:
        param.setValue("<Natron>(over)</Natron>")
        del param

    del lastNode
    # End of node "over_matte"

    # Start of node "Dot9"
    lastNode = app.createNode("fr.inria.built-in.Dot", 1, group)
    lastNode.setScriptName("Dot9")
    lastNode.setLabel("Dot9")
    lastNode.setPosition(717, 22)
    lastNode.setSize(14, 14)
    lastNode.setColor(0.7, 0.7, 0.7)
    groupDot9 = lastNode

    del lastNode
    # End of node "Dot9"

    # Start of node "Dot2"
    lastNode = app.createNode("fr.inria.built-in.Dot", 1, group)
    lastNode.setScriptName("Dot2")
    lastNode.setLabel("Dot2")
    lastNode.setPosition(473, 307)
    lastNode.setSize(14, 14)
    lastNode.setColor(0.7, 0.7, 0.7)
    groupDot2 = lastNode

    del lastNode
    # End of node "Dot2"

    # Start of node "Dot10"
    lastNode = app.createNode("fr.inria.built-in.Dot", 1, group)
    lastNode.setScriptName("Dot10")
    lastNode.setLabel("Dot10")
    lastNode.setPosition(718, 108)
    lastNode.setSize(14, 14)
    lastNode.setColor(0.7, 0.7, 0.7)
    groupDot10 = lastNode

    del lastNode
    # End of node "Dot10"

    # Start of node "screen"
    lastNode = app.createNode("net.sf.openfx.MergePlugin", 1, group)
    lastNode.setScriptName("screen")
    lastNode.setLabel("screen")
    lastNode.setPosition(1492, 287)
    lastNode.setSize(100, 45)
    lastNode.setColor(0.3, 0.37, 0.776)
    groupscreen = lastNode

    param = lastNode.getParam("operation")
    if param is not None:
        param.set("screen")
        del param

    param = lastNode.getParam("userTextArea")
    if param is not None:
        param.setValue("<Natron>(over)</Natron>")
        del param

    del lastNode
    # End of node "screen"

    # Start of node "Dot11"
    lastNode = app.createNode("fr.inria.built-in.Dot", 1, group)
    lastNode.setScriptName("Dot11")
    lastNode.setLabel("Dot11")
    lastNode.setPosition(1535, 32)
    lastNode.setSize(14, 14)
    lastNode.setColor(0.7, 0.7, 0.7)
    groupDot11 = lastNode

    del lastNode
    # End of node "Dot11"

    # Start of node "Dot6"
    lastNode = app.createNode("fr.inria.built-in.Dot", 1, group)
    lastNode.setScriptName("Dot6")
    lastNode.setLabel("Dot6")
    lastNode.setPosition(1099, 307)
    lastNode.setSize(14, 14)
    lastNode.setColor(0.7, 0.7, 0.7)
    groupDot6 = lastNode

    del lastNode
    # End of node "Dot6"

    # Start of node "Dot12"
    lastNode = app.createNode("fr.inria.built-in.Dot", 1, group)
    lastNode.setScriptName("Dot12")
    lastNode.setLabel("Dot12")
    lastNode.setPosition(1099, 415)
    lastNode.setSize(14, 14)
    lastNode.setColor(0.7, 0.7, 0.7)
    groupDot12 = lastNode

    del lastNode
    # End of node "Dot12"

    # Start of node "Switch2"
    lastNode = app.createNode("net.sf.openfx.switchPlugin", 1, group)
    lastNode.setScriptName("Switch2")
    lastNode.setLabel("Switch2")
    lastNode.setPosition(810, 1081)
    lastNode.setSize(100, 32)
    lastNode.setColor(0.3, 0.37, 0.776)
    groupSwitch2 = lastNode

    param = lastNode.getParam("which")
    if param is not None:
        param.setValue(0, 0)
        del param

    del lastNode
    # End of node "Switch2"

    # Start of node "shuffle_matte"
    lastNode = app.createNode("net.sf.openfx.ShufflePlugin", 3, group)
    lastNode.setScriptName("shuffle_matte")
    lastNode.setLabel("shuffle_matte")
    lastNode.setPosition(528, 887)
    lastNode.setSize(100, 32)
    lastNode.setColor(0.6, 0.24, 0.39)
    groupshuffle_matte = lastNode

    param = lastNode.getParam("outputA")
    if param is not None:
        param.set("B.uk.co.thefoundry.OfxImagePlaneColour.R")
        del param

    del lastNode
    # End of node "shuffle_matte"

    # Now that all nodes are created we can connect them together, restore expressions
    groupOutput1.connectInput(0, groupSwitch2)
    groupstencil.connectInput(0, groupstencil_matte)
    groupstencil.connectInput(1, groupDot1)
    groupstencil_matte.connectInput(0, groupDot3)
    groupstencil_matte.connectInput(1, groupDot10)
    groupDot1.connectInput(0, groupDot7)
    groupSwitch1.connectInput(0, groupover)
    groupSwitch1.connectInput(1, groupscreen)
    groupSwitch1.connectInput(2, groupstencil)
    groupSwitch1.connectInput(3, groupmask)
    groupmask.connectInput(0, groupMergeMatteMain)
    groupmask.connectInput(1, groupDot1)
    groupMergeMatteMain.connectInput(0, groupDot4)
    groupMergeMatteMain.connectInput(1, groupInvert3)
    groupDot3.connectInput(0, groupB)
    groupDot4.connectInput(0, groupDot3)
    groupInvert3.connectInput(0, groupDot8)
    groupover.connectInput(0, groupover_matte)
    groupover.connectInput(1, groupDot12)
    groupDot5.connectInput(0, groupDot3)
    groupover_alpha.connectInput(0, groupDot7)
    groupDot7.connectInput(0, groupA)
    groupDot8.connectInput(0, groupover_alpha)
    groupover_matte.connectInput(0, groupDot5)
    groupover_matte.connectInput(1, groupDot9)
    groupDot9.connectInput(0, groupDot8)
    groupDot2.connectInput(0, groupDot1)
    groupDot10.connectInput(0, groupDot9)
    groupscreen.connectInput(0, groupDot11)
    groupscreen.connectInput(1, groupDot6)
    groupDot11.connectInput(0, groupover_matte)
    groupDot6.connectInput(0, groupDot2)
    groupDot12.connectInput(0, groupDot6)
    groupSwitch2.connectInput(0, groupSwitch1)
    groupSwitch2.connectInput(1, groupshuffle_matte)
    groupshuffle_matte.connectInput(0, groupSwitch1)

    param = groupSwitch1.getParam("which")
    param.setExpression("thisGroup.operation.get()", False, 0)
    del param
    param = groupMergeMatteMain.getParam("channels")
    group.getParam("MergeMatteMainchannels").setAsAlias(param)
    del param
    param = groupSwitch2.getParam("which")
    param.setExpression("thisGroup.show_matte.get()", False, 0)
    del param

    try:
        extModule = sys.modules["MergeMatteExt"]
    except KeyError:
        extModule = None
    if extModule is not None and hasattr(extModule ,"createInstanceExt") and hasattr(extModule.createInstanceExt,"__call__"):
        extModule.createInstanceExt(app,group)
