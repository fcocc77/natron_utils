# -*- coding: utf-8 -*-
# DO NOT EDIT THIS FILE
# Natron PyPlug
# This file was automatically generated by Natron PyPlug exporter version 10.

# Hand-written code should be added in a separate file named CameraShakeExt.py
# See http://natron.readthedocs.org/en/master/devel/groups.html#adding-hand-written-code-callbacks-etc
# Note that Viewers are never exported

import NatronEngine
import sys

# Try to import the extensions file where callbacks and hand-written code should be located.
try:
    from CameraShakeExt import *
except ImportError:
    pass

def getPluginID():
    return "vv.camera_shake"

def getLabel():
    return "CameraShake"

def getVersion():
    return 1

def getGrouping():
    return "videovina/Transform"

def createInstance(app,group):
    # Create all nodes in the group

    # Create the parameters of the group node the same way we did for all internal nodes
    lastNode = group
    lastNode.setColor(0.7, 0.7, 0.7)

    # Create the user parameters
    lastNode.control = lastNode.createPageParam("control", "Control")
    param = lastNode.createDoubleParam("translate", "Translate")
    param.setMinimum(0, 0)
    param.setMaximum(1000, 0)
    param.setDisplayMinimum(0, 0)
    param.setDisplayMaximum(1000, 0)

    # Add the param to the page
    lastNode.control.addParam(param)

    # Set param properties
    param.setHelp("")
    param.setAddNewLine(True)
    param.setAnimationEnabled(True)
    param.setValue(50, 0)
    lastNode.translate = param
    del param

    param = lastNode.createDoubleParam("rotate", "Rotate")
    param.setMinimum(0, 0)
    param.setMaximum(180, 0)
    param.setDisplayMinimum(0, 0)
    param.setDisplayMaximum(180, 0)

    # Add the param to the page
    lastNode.control.addParam(param)

    # Set param properties
    param.setHelp("")
    param.setAddNewLine(True)
    param.setAnimationEnabled(True)
    param.setValue(2, 0)
    lastNode.rotate = param
    del param

    param = lastNode.createDoubleParam("scale", "Scale")
    param.setMinimum(0, 0)
    param.setMaximum(5, 0)
    param.setDisplayMinimum(0, 0)
    param.setDisplayMaximum(5, 0)

    # Add the param to the page
    lastNode.control.addParam(param)

    # Set param properties
    param.setHelp("")
    param.setAddNewLine(True)
    param.setAnimationEnabled(True)
    lastNode.scale = param
    del param

    param = lastNode.createSeparatorParam("sep", "")

    # Add the param to the page
    lastNode.control.addParam(param)

    # Set param properties
    param.setHelp("")
    param.setAddNewLine(True)
    param.setPersistent(False)
    param.setEvaluateOnChange(False)
    lastNode.sep = param
    del param

    param = lastNode.createDoubleParam("frequency", "Frequency")
    param.setMinimum(0, 0)
    param.setMaximum(100, 0)
    param.setDisplayMinimum(0, 0)
    param.setDisplayMaximum(100, 0)

    # Add the param to the page
    lastNode.control.addParam(param)

    # Set param properties
    param.setHelp("")
    param.setAddNewLine(True)
    param.setAnimationEnabled(True)
    param.setValue(50, 0)
    lastNode.frequency = param
    del param

    # Refresh the GUI with the newly created parameters
    lastNode.setPagesOrder(['control', 'Node', 'Settings'])
    lastNode.refreshUserParamsGUI()
    del lastNode

    # Start of node "Output1"
    lastNode = app.createNode("fr.inria.built-in.Output", 1, group)
    lastNode.setLabel("Output")
    lastNode.setPosition(764, 275)
    lastNode.setSize(104, 30)
    lastNode.setColor(0.7, 0.7, 0.7)
    groupOutput1 = lastNode

    del lastNode
    # End of node "Output1"

    # Start of node "Input1"
    lastNode = app.createNode("fr.inria.built-in.Input", 1, group)
    lastNode.setScriptName("Input1")
    lastNode.setLabel("Input1")
    lastNode.setPosition(764, 125)
    lastNode.setSize(104, 30)
    lastNode.setColor(0.3, 0.5, 0.2)
    groupInput1 = lastNode

    del lastNode
    # End of node "Input1"

    # Start of node "Transform1"
    lastNode = app.createNode("net.sf.openfx.TransformPlugin", 1, group)
    lastNode.setScriptName("Transform1")
    lastNode.setLabel("Transform1")
    lastNode.setPosition(764, 197)
    lastNode.setSize(104, 33)
    lastNode.setColor(0.7, 0.3, 0.1)
    groupTransform1 = lastNode

    param = lastNode.getParam("translate")
    if param is not None:
        param.setValue(-12.07362445475765, 0)
        param.setValue(10.60207745954635, 1)
        del param

    param = lastNode.getParam("rotate")
    if param is not None:
        param.setValue(-0.482944978190306, 0)
        del param

    param = lastNode.getParam("scale")
    if param is not None:
        param.setValue(1, 0)
        param.setValue(1, 1)
        del param

    del lastNode
    # End of node "Transform1"

    # Now that all nodes are created we can connect them together, restore expressions
    groupOutput1.connectInput(0, groupTransform1)
    groupTransform1.connectInput(0, groupInput1)

    param = groupTransform1.getParam("translate")
    param.setExpression("frequency = thisGroup.frequency.get()\namplitude = thisGroup.translate.curve(frame)\ncomplexity = 10\nseed = 10+ dimension * 10\nfps = 24\n\nimport random\nvalue = 0\n\n# Wiggle Expression\nfor x in range(1,complexity):\n\trandom.seed(seed)\n\toffset = random.randint(1,1000)\n\tt = (offset+float(frame))/fps\n\tfactor = 0.8**x\n\tvalue += sin(t*factor*frequency)*amplitude/complexity\nret = value", True, 0)
    param.setExpression("frequency = thisGroup.frequency.get()\namplitude = thisGroup.translate.curve(frame)\ncomplexity = 10\nseed = 10+ dimension * 10\nfps = 24\n\nimport random\nvalue = 0\n\n# Wiggle Expression\nfor x in range(1,complexity):\n\trandom.seed(seed)\n\toffset = random.randint(1,1000)\n\tt = (offset+float(frame))/fps\n\tfactor = 0.8**x\n\tvalue += sin(t*factor*frequency)*amplitude/complexity\nret = value", True, 1)
    del param
    param = groupTransform1.getParam("rotate")
    param.setExpression("frequency = thisGroup.frequency.get()\namplitude = thisGroup.rotate.curve(frame)\ncomplexity = 10\nseed = 10+ dimension * 10\nfps = 24\n\nimport random\nvalue = 0\n\n# Wiggle Expression\nfor x in range(1,complexity):\n\trandom.seed(seed)\n\toffset = random.randint(1,1000)\n\tt = (offset+float(frame))/fps\n\tfactor = 0.8**x\n\tvalue += sin(t*factor*frequency)*amplitude/complexity\nret = value", True, 0)
    del param
    param = groupTransform1.getParam("scale")
    param.setExpression("frequency = thisGroup.frequency.get()\namplitude = thisGroup.scale.curve(frame)\ncomplexity = 10\nseed = 10\nfps = 24\n\nimport random\nvalue = 0\n\n# Wiggle Expression\nfor x in range(1,complexity):\n\trandom.seed(seed)\n\toffset = random.randint(1,1000)\n\tt = (offset+float(frame))/fps\n\tfactor = 0.8**x\n\tvalue += sin(t*factor*frequency)*amplitude/complexity\nret = 1 + value", True, 0)
    param.setExpression("frequency = thisGroup.frequency.get()\namplitude = thisGroup.scale.curve(frame)\ncomplexity = 10\nseed = 10\nfps = 24\n\nimport random\nvalue = 0\n\n# Wiggle Expression\nfor x in range(1,complexity):\n\trandom.seed(seed)\n\toffset = random.randint(1,1000)\n\tt = (offset+float(frame))/fps\n\tfactor = 0.8**x\n\tvalue += sin(t*factor*frequency)*amplitude/complexity\nret = 1 + value", True, 1)
    del param

    try:
        extModule = sys.modules["CameraShakeExt"]
    except KeyError:
        extModule = None
    if extModule is not None and hasattr(extModule ,"createInstanceExt") and hasattr(extModule.createInstanceExt,"__call__"):
        extModule.createInstanceExt(app,group)
