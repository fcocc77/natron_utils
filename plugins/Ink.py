# -*- coding: utf-8 -*-
# DO NOT EDIT THIS FILE
# Natron PyPlug
# This file was automatically generated by Natron PyPlug exporter version 10.

# Hand-written code should be added in a separate file named InkExt.py
# See http://natron.readthedocs.org/en/master/devel/groups.html#adding-hand-written-code-callbacks-etc
# Note that Viewers are never exported

import NatronEngine
import sys

# Try to import the extensions file where callbacks and hand-written code should be located.
try:
    from InkExt import *
except ImportError:
    pass

def getPluginID():
    return "vv.ink"

def getLabel():
    return "Ink"

def getVersion():
    return 1

def getIconPath():
    return "Ink.png"

def getGrouping():
    return "videovina"

def createInstance(app,group):
    # Create all nodes in the group

    # Create the parameters of the group node the same way we did for all internal nodes
    lastNode = group
    lastNode.setColor(0.7, 0.7, 0.7)
    param = lastNode.getParam("onParamChanged")
    if param is not None:
        param.setValue("ink.main")
        del param


    # Create the user parameters
    lastNode.control = lastNode.createPageParam("control", "Control")
    param = lastNode.createChoiceParam("operation", "Operation")
    entries = [ ("Over", ""),
    ("Screen", "")]
    param.setOptions(entries)
    del entries
    param.setDefaultValue("Screen")
    param.restoreDefaultValue()

    # Add the param to the page
    lastNode.control.addParam(param)

    # Set param properties
    param.setHelp("")
    param.setAddNewLine(True)
    param.setAnimationEnabled(True)
    lastNode.operation = param
    del param

    param = lastNode.createIntParam("TimeOffset1timeOffset", "Time Start")
    param.setDefaultValue(0, 0)
    param.restoreDefaultValue(0)

    # Add the param to the page
    lastNode.control.addParam(param)

    # Set param properties
    param.setHelp("")
    param.setAddNewLine(True)
    param.setAnimationEnabled(False)
    param.setValue(1, 0)
    lastNode.TimeOffset1timeOffset = param
    del param

    param = lastNode.createIntParam("blot_amount", "Blot Amount")
    param.setMinimum(1, 0)
    param.setMaximum(10, 0)
    param.setDisplayMinimum(1, 0)
    param.setDisplayMaximum(10, 0)
    param.setDefaultValue(0, 0)
    param.restoreDefaultValue(0)

    # Add the param to the page
    lastNode.control.addParam(param)

    # Set param properties
    param.setHelp("")
    param.setAddNewLine(True)
    param.setAnimationEnabled(True)
    param.setValue(5, 0)
    lastNode.blot_amount = param
    del param

    param = lastNode.createStringParam("random_seed_label", "")
    param.setType(NatronEngine.StringParam.TypeEnum.eStringTypeLabel)
    param.setDefaultValue("Random Seed:")
    param.restoreDefaultValue()

    # Add the param to the page
    lastNode.control.addParam(param)

    # Set param properties
    param.setHelp("")
    param.setAddNewLine(True)
    param.setEvaluateOnChange(False)
    param.setAnimationEnabled(False)
    lastNode.random_seed_label = param
    del param

    param = lastNode.createDoubleParam("opacity_random", "Opacity Random")
    param.setMinimum(0, 0)
    param.setMaximum(1, 0)
    param.setDisplayMinimum(0, 0)
    param.setDisplayMaximum(1, 0)

    # Add the param to the page
    lastNode.control.addParam(param)

    # Set param properties
    param.setHelp("")
    param.setAddNewLine(True)
    param.setAnimationEnabled(True)
    param.setValue(0.1, 0)
    lastNode.opacity_random = param
    del param

    param = lastNode.createDoubleParam("scale_random", "Scale Random")
    param.setMinimum(0, 0)
    param.setMaximum(1, 0)
    param.setDisplayMinimum(0, 0)
    param.setDisplayMaximum(1, 0)

    # Add the param to the page
    lastNode.control.addParam(param)

    # Set param properties
    param.setHelp("")
    param.setAddNewLine(True)
    param.setAnimationEnabled(True)
    param.setValue(1, 0)
    lastNode.scale_random = param
    del param

    param = lastNode.createIntParam("time_random", "Time Random")
    param.setMinimum(0, 0)
    param.setMaximum(100, 0)
    param.setDisplayMinimum(0, 0)
    param.setDisplayMaximum(100, 0)
    param.setDefaultValue(0, 0)
    param.restoreDefaultValue(0)

    # Add the param to the page
    lastNode.control.addParam(param)

    # Set param properties
    param.setHelp("")
    param.setAddNewLine(True)
    param.setAnimationEnabled(True)
    param.setValue(5, 0)
    lastNode.time_random = param
    del param

    param = lastNode.createIntParam("random_seed", "Seed")
    param.setMinimum(0, 0)
    param.setMaximum(100, 0)
    param.setDisplayMinimum(0, 0)
    param.setDisplayMaximum(100, 0)
    param.setDefaultValue(0, 0)
    param.restoreDefaultValue(0)

    # Add the param to the page
    lastNode.control.addParam(param)

    # Set param properties
    param.setHelp("")
    param.setAddNewLine(True)
    param.setAnimationEnabled(True)
    lastNode.random_seed = param
    del param

    param = lastNode.createStringParam("transform", "")
    param.setType(NatronEngine.StringParam.TypeEnum.eStringTypeLabel)
    param.setDefaultValue("Transform")
    param.restoreDefaultValue()

    # Add the param to the page
    lastNode.control.addParam(param)

    # Set param properties
    param.setHelp("")
    param.setAddNewLine(True)
    param.setEvaluateOnChange(False)
    param.setAnimationEnabled(False)
    lastNode.transform = param
    del param

    param = lastNode.createDoubleParam("scale", "Scale")
    param.setMinimum(0, 0)
    param.setMaximum(5, 0)
    param.setDisplayMinimum(0, 0)
    param.setDisplayMaximum(5, 0)

    # Add the param to the page
    lastNode.control.addParam(param)

    # Set param properties
    param.setHelp("")
    param.setAddNewLine(True)
    param.setAnimationEnabled(True)
    param.setValue(1, 0)
    lastNode.scale = param
    del param

    # Refresh the GUI with the newly created parameters
    lastNode.setPagesOrder(['control', 'Node', 'Settings'])
    lastNode.refreshUserParamsGUI()
    del lastNode

    # Start of node "Output1"
    lastNode = app.createNode("fr.inria.built-in.Output", 1, group)
    lastNode.setLabel("Output")
    lastNode.setPosition(3328, 411)
    lastNode.setSize(104, 30)
    lastNode.setColor(0.7, 0.7, 0.7)
    groupOutput1 = lastNode

    del lastNode
    # End of node "Output1"

    # Start of node "Merge1"
    lastNode = app.createNode("net.sf.openfx.MergePlugin", 1, group)
    lastNode.setScriptName("Merge1")
    lastNode.setLabel("Merge1")
    lastNode.setPosition(1536, 32)
    lastNode.setSize(104, 55)
    lastNode.setColor(0.3, 0.37, 0.776)
    groupMerge1 = lastNode

    param = lastNode.getParam("operation")
    if param is not None:
        param.set("screen")
        del param

    param = lastNode.getParam("aChannelsChanged")
    if param is not None:
        param.setValue(True)
        del param

    param = lastNode.getParam("bChannelsChanged")
    if param is not None:
        param.setValue(True)
        del param

    param = lastNode.getParam("mix")
    if param is not None:
        param.setValue(0.9155578148474952, 0)
        del param

    del lastNode
    # End of node "Merge1"

    # Start of node "Dot1"
    lastNode = app.createNode("fr.inria.built-in.Dot", 1, group)
    lastNode.setScriptName("Dot1")
    lastNode.setLabel("Dot1")
    lastNode.setPosition(1346, -174)
    lastNode.setSize(14, 14)
    lastNode.setColor(0.7, 0.7, 0.7)
    groupDot1 = lastNode

    del lastNode
    # End of node "Dot1"

    # Start of node "Position1"
    lastNode = app.createNode("net.sf.openfx.Position", 1, group)
    lastNode.setScriptName("Position1")
    lastNode.setLabel("Position1")
    lastNode.setPosition(1301, -259)
    lastNode.setSize(104, 33)
    lastNode.setColor(0.7, 0.3, 0.1)
    groupPosition1 = lastNode

    param = lastNode.getParam("translate")
    if param is not None:
        param.setValue(-87, 0)
        param.setValue(-80, 1)
        del param

    del lastNode
    # End of node "Position1"

    # Start of node "tblop_0"
    lastNode = app.createNode("net.sf.openfx.TransformPlugin", 1, group)
    lastNode.setScriptName("tblop_0")
    lastNode.setLabel("tblop_0")
    lastNode.setPosition(1301, -33)
    lastNode.setSize(104, 33)
    lastNode.setColor(0.7, 0.3, 0.1)
    grouptblop_0 = lastNode

    param = lastNode.getParam("translate")
    if param is not None:
        param.setValue(137, 0)
        param.setValue(-77, 1)
        del param

    param = lastNode.getParam("rotate")
    if param is not None:
        param.setValue(208, 0)
        del param

    param = lastNode.getParam("scale")
    if param is not None:
        param.setValue(1.277356642700564, 0)
        param.setValue(1.277356642700564, 1)
        del param

    param = lastNode.getParam("transformCenterChanged")
    if param is not None:
        param.setValue(True)
        del param

    del lastNode
    # End of node "tblop_0"

    # Start of node "tblop_1"
    lastNode = app.createNode("net.sf.openfx.TransformPlugin", 1, group)
    lastNode.setScriptName("tblop_1")
    lastNode.setLabel("tblop_1")
    lastNode.setPosition(1536, -44)
    lastNode.setSize(104, 33)
    lastNode.setColor(0.7, 0.3, 0.1)
    grouptblop_1 = lastNode

    param = lastNode.getParam("translate")
    if param is not None:
        param.setValue(779, 0)
        param.setValue(201, 1)
        del param

    param = lastNode.getParam("rotate")
    if param is not None:
        param.setValue(276, 0)
        del param

    param = lastNode.getParam("scale")
    if param is not None:
        param.setValue(1.277356642700564, 0)
        param.setValue(1.277356642700564, 1)
        del param

    param = lastNode.getParam("transformCenterChanged")
    if param is not None:
        param.setValue(True)
        del param

    del lastNode
    # End of node "tblop_1"

    # Start of node "Dot2"
    lastNode = app.createNode("fr.inria.built-in.Dot", 1, group)
    lastNode.setScriptName("Dot2")
    lastNode.setLabel("Dot2")
    lastNode.setPosition(1581, -173)
    lastNode.setSize(14, 14)
    lastNode.setColor(0.7, 0.7, 0.7)
    groupDot2 = lastNode

    del lastNode
    # End of node "Dot2"

    # Start of node "tblop_2"
    lastNode = app.createNode("net.sf.openfx.TransformPlugin", 1, group)
    lastNode.setScriptName("tblop_2")
    lastNode.setLabel("tblop_2")
    lastNode.setPosition(1709, -48)
    lastNode.setSize(104, 33)
    lastNode.setColor(0.7, 0.3, 0.1)
    grouptblop_2 = lastNode

    param = lastNode.getParam("translate")
    if param is not None:
        param.setValue(75, 0)
        param.setValue(-228, 1)
        del param

    param = lastNode.getParam("rotate")
    if param is not None:
        param.setValue(10, 0)
        del param

    param = lastNode.getParam("scale")
    if param is not None:
        param.setValue(1.277356642700564, 0)
        param.setValue(1.277356642700564, 1)
        del param

    param = lastNode.getParam("transformCenterChanged")
    if param is not None:
        param.setValue(True)
        del param

    del lastNode
    # End of node "tblop_2"

    # Start of node "Dot2_2"
    lastNode = app.createNode("fr.inria.built-in.Dot", 1, group)
    lastNode.setScriptName("Dot2_2")
    lastNode.setLabel("Dot2_2")
    lastNode.setPosition(1754, -173)
    lastNode.setSize(14, 14)
    lastNode.setColor(0.7, 0.7, 0.7)
    groupDot2_2 = lastNode

    del lastNode
    # End of node "Dot2_2"

    # Start of node "Merge2"
    lastNode = app.createNode("net.sf.openfx.MergePlugin", 1, group)
    lastNode.setScriptName("Merge2")
    lastNode.setLabel("Merge2")
    lastNode.setPosition(1709, 33)
    lastNode.setSize(104, 45)
    lastNode.setColor(0.3, 0.37, 0.776)
    groupMerge2 = lastNode

    param = lastNode.getParam("operation")
    if param is not None:
        param.set("screen")
        del param

    param = lastNode.getParam("aChannelsChanged")
    if param is not None:
        param.setValue(True)
        del param

    param = lastNode.getParam("mix")
    if param is not None:
        param.setValue(0.9155578148474952, 0)
        del param

    param = lastNode.getParam("userTextArea")
    if param is not None:
        param.setValue("<Natron>(screen)</Natron>")
        del param

    del lastNode
    # End of node "Merge2"

    # Start of node "tblop_3"
    lastNode = app.createNode("net.sf.openfx.TransformPlugin", 1, group)
    lastNode.setScriptName("tblop_3")
    lastNode.setLabel("tblop_3")
    lastNode.setPosition(1904, -38)
    lastNode.setSize(104, 33)
    lastNode.setColor(0.7, 0.3, 0.1)
    grouptblop_3 = lastNode

    param = lastNode.getParam("translate")
    if param is not None:
        param.setValue(-80, 0)
        param.setValue(408, 1)
        del param

    param = lastNode.getParam("rotate")
    if param is not None:
        param.setValue(11, 0)
        del param

    param = lastNode.getParam("scale")
    if param is not None:
        param.setValue(1.277356642700564, 0)
        param.setValue(1.277356642700564, 1)
        del param

    param = lastNode.getParam("transformCenterChanged")
    if param is not None:
        param.setValue(True)
        del param

    del lastNode
    # End of node "tblop_3"

    # Start of node "tblop_4"
    lastNode = app.createNode("net.sf.openfx.TransformPlugin", 1, group)
    lastNode.setScriptName("tblop_4")
    lastNode.setLabel("tblop_4")
    lastNode.setPosition(2129, -41)
    lastNode.setSize(104, 33)
    lastNode.setColor(0.7, 0.3, 0.1)
    grouptblop_4 = lastNode

    param = lastNode.getParam("translate")
    if param is not None:
        param.setValue(-5, 0)
        param.setValue(-253, 1)
        del param

    param = lastNode.getParam("rotate")
    if param is not None:
        param.setValue(230, 0)
        del param

    param = lastNode.getParam("scale")
    if param is not None:
        param.setValue(1.277356642700564, 0)
        param.setValue(1.277356642700564, 1)
        del param

    param = lastNode.getParam("transformCenterChanged")
    if param is not None:
        param.setValue(True)
        del param

    del lastNode
    # End of node "tblop_4"

    # Start of node "tblop_5"
    lastNode = app.createNode("net.sf.openfx.TransformPlugin", 1, group)
    lastNode.setScriptName("tblop_5")
    lastNode.setLabel("tblop_5")
    lastNode.setPosition(2365, -38)
    lastNode.setSize(104, 33)
    lastNode.setColor(0.7, 0.3, 0.1)
    grouptblop_5 = lastNode

    param = lastNode.getParam("translate")
    if param is not None:
        param.setValue(-369, 0)
        param.setValue(84, 1)
        del param

    param = lastNode.getParam("rotate")
    if param is not None:
        param.setValue(95, 0)
        del param

    param = lastNode.getParam("scale")
    if param is not None:
        param.setValue(1.277356642700564, 0)
        param.setValue(1.277356642700564, 1)
        del param

    param = lastNode.getParam("transformCenterChanged")
    if param is not None:
        param.setValue(True)
        del param

    del lastNode
    # End of node "tblop_5"

    # Start of node "tblop_6"
    lastNode = app.createNode("net.sf.openfx.TransformPlugin", 1, group)
    lastNode.setScriptName("tblop_6")
    lastNode.setLabel("tblop_6")
    lastNode.setPosition(2620, -42)
    lastNode.setSize(104, 33)
    lastNode.setColor(0.7, 0.3, 0.1)
    grouptblop_6 = lastNode

    param = lastNode.getParam("translate")
    if param is not None:
        param.setValue(787, 0)
        param.setValue(-223, 1)
        del param

    param = lastNode.getParam("rotate")
    if param is not None:
        param.setValue(165, 0)
        del param

    param = lastNode.getParam("scale")
    if param is not None:
        param.setValue(1.277356642700564, 0)
        param.setValue(1.277356642700564, 1)
        del param

    param = lastNode.getParam("transformCenterChanged")
    if param is not None:
        param.setValue(True)
        del param

    del lastNode
    # End of node "tblop_6"

    # Start of node "tblop_7"
    lastNode = app.createNode("net.sf.openfx.TransformPlugin", 1, group)
    lastNode.setScriptName("tblop_7")
    lastNode.setLabel("tblop_7")
    lastNode.setPosition(2864, -36)
    lastNode.setSize(104, 33)
    lastNode.setColor(0.7, 0.3, 0.1)
    grouptblop_7 = lastNode

    param = lastNode.getParam("translate")
    if param is not None:
        param.setValue(-439, 0)
        param.setValue(45, 1)
        del param

    param = lastNode.getParam("rotate")
    if param is not None:
        param.setValue(255, 0)
        del param

    param = lastNode.getParam("scale")
    if param is not None:
        param.setValue(1.277356642700564, 0)
        param.setValue(1.277356642700564, 1)
        del param

    param = lastNode.getParam("transformCenterChanged")
    if param is not None:
        param.setValue(True)
        del param

    del lastNode
    # End of node "tblop_7"

    # Start of node "tblop_8"
    lastNode = app.createNode("net.sf.openfx.TransformPlugin", 1, group)
    lastNode.setScriptName("tblop_8")
    lastNode.setLabel("tblop_8")
    lastNode.setPosition(3065, -38)
    lastNode.setSize(104, 33)
    lastNode.setColor(0.7, 0.3, 0.1)
    grouptblop_8 = lastNode

    param = lastNode.getParam("translate")
    if param is not None:
        param.setValue(-569, 0)
        param.setValue(-440, 1)
        del param

    param = lastNode.getParam("rotate")
    if param is not None:
        param.setValue(238, 0)
        del param

    param = lastNode.getParam("scale")
    if param is not None:
        param.setValue(1.277356642700564, 0)
        param.setValue(1.277356642700564, 1)
        del param

    param = lastNode.getParam("transformCenterChanged")
    if param is not None:
        param.setValue(True)
        del param

    del lastNode
    # End of node "tblop_8"

    # Start of node "tblop_9"
    lastNode = app.createNode("net.sf.openfx.TransformPlugin", 1, group)
    lastNode.setScriptName("tblop_9")
    lastNode.setLabel("tblop_9")
    lastNode.setPosition(3328, -38)
    lastNode.setSize(104, 33)
    lastNode.setColor(0.7, 0.3, 0.1)
    grouptblop_9 = lastNode

    param = lastNode.getParam("translate")
    if param is not None:
        param.setValue(-681, 0)
        param.setValue(-49, 1)
        del param

    param = lastNode.getParam("rotate")
    if param is not None:
        param.setValue(278, 0)
        del param

    param = lastNode.getParam("scale")
    if param is not None:
        param.setValue(1.277356642700564, 0)
        param.setValue(1.277356642700564, 1)
        del param

    param = lastNode.getParam("transformCenterChanged")
    if param is not None:
        param.setValue(True)
        del param

    del lastNode
    # End of node "tblop_9"

    # Start of node "Dot3"
    lastNode = app.createNode("fr.inria.built-in.Dot", 1, group)
    lastNode.setScriptName("Dot3")
    lastNode.setLabel("Dot3")
    lastNode.setPosition(1949, -173)
    lastNode.setSize(14, 14)
    lastNode.setColor(0.7, 0.7, 0.7)
    groupDot3 = lastNode

    del lastNode
    # End of node "Dot3"

    # Start of node "Dot4"
    lastNode = app.createNode("fr.inria.built-in.Dot", 1, group)
    lastNode.setScriptName("Dot4")
    lastNode.setLabel("Dot4")
    lastNode.setPosition(2174, -173)
    lastNode.setSize(14, 14)
    lastNode.setColor(0.7, 0.7, 0.7)
    groupDot4 = lastNode

    del lastNode
    # End of node "Dot4"

    # Start of node "Dot5"
    lastNode = app.createNode("fr.inria.built-in.Dot", 1, group)
    lastNode.setScriptName("Dot5")
    lastNode.setLabel("Dot5")
    lastNode.setPosition(2410, -173)
    lastNode.setSize(14, 14)
    lastNode.setColor(0.7, 0.7, 0.7)
    groupDot5 = lastNode

    del lastNode
    # End of node "Dot5"

    # Start of node "Dot6"
    lastNode = app.createNode("fr.inria.built-in.Dot", 1, group)
    lastNode.setScriptName("Dot6")
    lastNode.setLabel("Dot6")
    lastNode.setPosition(2665, -173)
    lastNode.setSize(14, 14)
    lastNode.setColor(0.7, 0.7, 0.7)
    groupDot6 = lastNode

    del lastNode
    # End of node "Dot6"

    # Start of node "Dot7"
    lastNode = app.createNode("fr.inria.built-in.Dot", 1, group)
    lastNode.setScriptName("Dot7")
    lastNode.setLabel("Dot7")
    lastNode.setPosition(2903, -173)
    lastNode.setSize(14, 14)
    lastNode.setColor(0.7, 0.7, 0.7)
    groupDot7 = lastNode

    del lastNode
    # End of node "Dot7"

    # Start of node "Dot8"
    lastNode = app.createNode("fr.inria.built-in.Dot", 1, group)
    lastNode.setScriptName("Dot8")
    lastNode.setLabel("Dot8")
    lastNode.setPosition(3110, -173)
    lastNode.setSize(14, 14)
    lastNode.setColor(0.7, 0.7, 0.7)
    groupDot8 = lastNode

    del lastNode
    # End of node "Dot8"

    # Start of node "Dot9"
    lastNode = app.createNode("fr.inria.built-in.Dot", 1, group)
    lastNode.setScriptName("Dot9")
    lastNode.setLabel("Dot9")
    lastNode.setPosition(3373, -173)
    lastNode.setSize(14, 14)
    lastNode.setColor(0.7, 0.7, 0.7)
    groupDot9 = lastNode

    del lastNode
    # End of node "Dot9"

    # Start of node "Merge3"
    lastNode = app.createNode("net.sf.openfx.MergePlugin", 1, group)
    lastNode.setScriptName("Merge3")
    lastNode.setLabel("Merge3")
    lastNode.setPosition(1904, 33)
    lastNode.setSize(104, 45)
    lastNode.setColor(0.3, 0.37, 0.776)
    groupMerge3 = lastNode

    param = lastNode.getParam("operation")
    if param is not None:
        param.set("screen")
        del param

    param = lastNode.getParam("aChannelsChanged")
    if param is not None:
        param.setValue(True)
        del param

    param = lastNode.getParam("mix")
    if param is not None:
        param.setValue(0.9155578148474952, 0)
        del param

    param = lastNode.getParam("userTextArea")
    if param is not None:
        param.setValue("<Natron>(screen)</Natron>")
        del param

    del lastNode
    # End of node "Merge3"

    # Start of node "Merge4"
    lastNode = app.createNode("net.sf.openfx.MergePlugin", 1, group)
    lastNode.setScriptName("Merge4")
    lastNode.setLabel("Merge4")
    lastNode.setPosition(2129, 33)
    lastNode.setSize(104, 45)
    lastNode.setColor(0.3, 0.37, 0.776)
    groupMerge4 = lastNode

    param = lastNode.getParam("operation")
    if param is not None:
        param.set("screen")
        del param

    param = lastNode.getParam("aChannelsChanged")
    if param is not None:
        param.setValue(True)
        del param

    param = lastNode.getParam("mix")
    if param is not None:
        param.setValue(0.9155578148474952, 0)
        del param

    param = lastNode.getParam("userTextArea")
    if param is not None:
        param.setValue("<Natron>(screen)</Natron>")
        del param

    del lastNode
    # End of node "Merge4"

    # Start of node "Merge5"
    lastNode = app.createNode("net.sf.openfx.MergePlugin", 1, group)
    lastNode.setScriptName("Merge5")
    lastNode.setLabel("Merge5")
    lastNode.setPosition(2365, 33)
    lastNode.setSize(104, 45)
    lastNode.setColor(0.3, 0.37, 0.776)
    groupMerge5 = lastNode

    param = lastNode.getParam("operation")
    if param is not None:
        param.set("screen")
        del param

    param = lastNode.getParam("aChannelsChanged")
    if param is not None:
        param.setValue(True)
        del param

    param = lastNode.getParam("mix")
    if param is not None:
        param.setValue(0, 0)
        del param

    param = lastNode.getParam("userTextArea")
    if param is not None:
        param.setValue("<Natron>(screen)</Natron>")
        del param

    del lastNode
    # End of node "Merge5"

    # Start of node "Merge6"
    lastNode = app.createNode("net.sf.openfx.MergePlugin", 1, group)
    lastNode.setScriptName("Merge6")
    lastNode.setLabel("Merge6")
    lastNode.setPosition(2620, 33)
    lastNode.setSize(104, 45)
    lastNode.setColor(0.3, 0.37, 0.776)
    groupMerge6 = lastNode

    param = lastNode.getParam("operation")
    if param is not None:
        param.set("screen")
        del param

    param = lastNode.getParam("aChannelsChanged")
    if param is not None:
        param.setValue(True)
        del param

    param = lastNode.getParam("mix")
    if param is not None:
        param.setValue(0, 0)
        del param

    param = lastNode.getParam("userTextArea")
    if param is not None:
        param.setValue("<Natron>(screen)</Natron>")
        del param

    del lastNode
    # End of node "Merge6"

    # Start of node "Merge7"
    lastNode = app.createNode("net.sf.openfx.MergePlugin", 1, group)
    lastNode.setScriptName("Merge7")
    lastNode.setLabel("Merge7")
    lastNode.setPosition(2858, 33)
    lastNode.setSize(104, 45)
    lastNode.setColor(0.3, 0.37, 0.776)
    groupMerge7 = lastNode

    param = lastNode.getParam("operation")
    if param is not None:
        param.set("screen")
        del param

    param = lastNode.getParam("aChannelsChanged")
    if param is not None:
        param.setValue(True)
        del param

    param = lastNode.getParam("mix")
    if param is not None:
        param.setValue(0, 0)
        del param

    param = lastNode.getParam("userTextArea")
    if param is not None:
        param.setValue("<Natron>(screen)</Natron>")
        del param

    del lastNode
    # End of node "Merge7"

    # Start of node "Merge8"
    lastNode = app.createNode("net.sf.openfx.MergePlugin", 1, group)
    lastNode.setScriptName("Merge8")
    lastNode.setLabel("Merge8")
    lastNode.setPosition(3065, 33)
    lastNode.setSize(104, 45)
    lastNode.setColor(0.3, 0.37, 0.776)
    groupMerge8 = lastNode

    param = lastNode.getParam("operation")
    if param is not None:
        param.set("screen")
        del param

    param = lastNode.getParam("aChannelsChanged")
    if param is not None:
        param.setValue(True)
        del param

    param = lastNode.getParam("mix")
    if param is not None:
        param.setValue(0, 0)
        del param

    param = lastNode.getParam("userTextArea")
    if param is not None:
        param.setValue("<Natron>(screen)</Natron>")
        del param

    del lastNode
    # End of node "Merge8"

    # Start of node "Merge9"
    lastNode = app.createNode("net.sf.openfx.MergePlugin", 1, group)
    lastNode.setScriptName("Merge9")
    lastNode.setLabel("Merge9")
    lastNode.setPosition(3328, 33)
    lastNode.setSize(104, 45)
    lastNode.setColor(0.3, 0.37, 0.776)
    groupMerge9 = lastNode

    param = lastNode.getParam("operation")
    if param is not None:
        param.set("screen")
        del param

    param = lastNode.getParam("aChannelsChanged")
    if param is not None:
        param.setValue(True)
        del param

    param = lastNode.getParam("mix")
    if param is not None:
        param.setValue(0, 0)
        del param

    param = lastNode.getParam("userTextArea")
    if param is not None:
        param.setValue("<Natron>(screen)</Natron>")
        del param

    del lastNode
    # End of node "Merge9"

    # Start of node "TimeOffset1"
    lastNode = app.createNode("net.sf.openfx.timeOffset", 1, group)
    lastNode.setScriptName("TimeOffset1")
    lastNode.setLabel("TimeOffset1")
    lastNode.setPosition(3328, 191)
    lastNode.setSize(104, 33)
    lastNode.setColor(0.7, 0.65, 0.35)
    groupTimeOffset1 = lastNode

    param = lastNode.getParam("timeOffset")
    if param is not None:
        param.setValue(1, 0)
        del param

    del lastNode
    # End of node "TimeOffset1"

    # Start of node "Timer"
    lastNode = app.createNode("net.sf.openfx.timeOffset", 1, group)
    lastNode.setScriptName("Timer")
    lastNode.setLabel("Timer")
    lastNode.setPosition(1536, -123)
    lastNode.setSize(104, 33)
    lastNode.setColor(0.7, 0.65, 0.35)
    groupTimer = lastNode

    param = lastNode.getParam("timeOffset")
    if param is not None:
        param.setValue(5, 0)
        del param

    del lastNode
    # End of node "Timer"

    # Start of node "Timer_2"
    lastNode = app.createNode("net.sf.openfx.timeOffset", 1, group)
    lastNode.setScriptName("Timer_2")
    lastNode.setLabel("Timer_2")
    lastNode.setPosition(1709, -115)
    lastNode.setSize(104, 33)
    lastNode.setColor(0.7, 0.65, 0.35)
    groupTimer_2 = lastNode

    param = lastNode.getParam("timeOffset")
    if param is not None:
        param.setValue(5, 0)
        del param

    del lastNode
    # End of node "Timer_2"

    # Start of node "Timer_3"
    lastNode = app.createNode("net.sf.openfx.timeOffset", 1, group)
    lastNode.setScriptName("Timer_3")
    lastNode.setLabel("Timer_3")
    lastNode.setPosition(1904, -104)
    lastNode.setSize(104, 33)
    lastNode.setColor(0.7, 0.65, 0.35)
    groupTimer_3 = lastNode

    param = lastNode.getParam("timeOffset")
    if param is not None:
        param.setValue(5, 0)
        del param

    del lastNode
    # End of node "Timer_3"

    # Start of node "Timer_4"
    lastNode = app.createNode("net.sf.openfx.timeOffset", 1, group)
    lastNode.setScriptName("Timer_4")
    lastNode.setLabel("Timer_4")
    lastNode.setPosition(2129, -108)
    lastNode.setSize(104, 33)
    lastNode.setColor(0.7, 0.65, 0.35)
    groupTimer_4 = lastNode

    param = lastNode.getParam("timeOffset")
    if param is not None:
        param.setValue(5, 0)
        del param

    del lastNode
    # End of node "Timer_4"

    # Start of node "Timer_5"
    lastNode = app.createNode("net.sf.openfx.timeOffset", 1, group)
    lastNode.setScriptName("Timer_5")
    lastNode.setLabel("Timer_5")
    lastNode.setPosition(2365, -100)
    lastNode.setSize(104, 33)
    lastNode.setColor(0.7, 0.65, 0.35)
    groupTimer_5 = lastNode

    param = lastNode.getParam("timeOffset")
    if param is not None:
        param.setValue(5, 0)
        del param

    del lastNode
    # End of node "Timer_5"

    # Start of node "Timer_6"
    lastNode = app.createNode("net.sf.openfx.timeOffset", 1, group)
    lastNode.setScriptName("Timer_6")
    lastNode.setLabel("Timer_6")
    lastNode.setPosition(2620, -103)
    lastNode.setSize(104, 33)
    lastNode.setColor(0.7, 0.65, 0.35)
    groupTimer_6 = lastNode

    param = lastNode.getParam("timeOffset")
    if param is not None:
        param.setValue(5, 0)
        del param

    del lastNode
    # End of node "Timer_6"

    # Start of node "Timer_7"
    lastNode = app.createNode("net.sf.openfx.timeOffset", 1, group)
    lastNode.setScriptName("Timer_7")
    lastNode.setLabel("Timer_7")
    lastNode.setPosition(2858, -106)
    lastNode.setSize(104, 33)
    lastNode.setColor(0.7, 0.65, 0.35)
    groupTimer_7 = lastNode

    param = lastNode.getParam("timeOffset")
    if param is not None:
        param.setValue(5, 0)
        del param

    del lastNode
    # End of node "Timer_7"

    # Start of node "Timer_8"
    lastNode = app.createNode("net.sf.openfx.timeOffset", 1, group)
    lastNode.setScriptName("Timer_8")
    lastNode.setLabel("Timer_8")
    lastNode.setPosition(3065, -109)
    lastNode.setSize(104, 33)
    lastNode.setColor(0.7, 0.65, 0.35)
    groupTimer_8 = lastNode

    param = lastNode.getParam("timeOffset")
    if param is not None:
        param.setValue(5, 0)
        del param

    del lastNode
    # End of node "Timer_8"

    # Start of node "Timer_9"
    lastNode = app.createNode("net.sf.openfx.timeOffset", 1, group)
    lastNode.setScriptName("Timer_9")
    lastNode.setLabel("Timer_9")
    lastNode.setPosition(3328, -102)
    lastNode.setSize(104, 33)
    lastNode.setColor(0.7, 0.65, 0.35)
    groupTimer_9 = lastNode

    param = lastNode.getParam("timeOffset")
    if param is not None:
        param.setValue(5, 0)
        del param

    del lastNode
    # End of node "Timer_9"

    # Start of node "Timer_10"
    lastNode = app.createNode("net.sf.openfx.timeOffset", 1, group)
    lastNode.setScriptName("Timer_10")
    lastNode.setLabel("Timer_10")
    lastNode.setPosition(1301, -112)
    lastNode.setSize(104, 33)
    lastNode.setColor(0.7, 0.65, 0.35)
    groupTimer_10 = lastNode

    param = lastNode.getParam("timeOffset")
    if param is not None:
        param.setValue(5, 0)
        del param

    del lastNode
    # End of node "Timer_10"

    # Start of node "Dot10"
    lastNode = app.createNode("fr.inria.built-in.Dot", 1, group)
    lastNode.setScriptName("Dot10")
    lastNode.setLabel("Dot10")
    lastNode.setPosition(1346, 53)
    lastNode.setSize(14, 14)
    lastNode.setColor(0.7, 0.7, 0.7)
    groupDot10 = lastNode

    del lastNode
    # End of node "Dot10"

    # Start of node "Crop1"
    lastNode = app.createNode("net.sf.openfx.CropPlugin", 1, group)
    lastNode.setScriptName("Crop1")
    lastNode.setLabel("Crop1")
    lastNode.setPosition(3328, 253)
    lastNode.setSize(104, 33)
    lastNode.setColor(0.7, 0.3, 0.1)
    groupCrop1 = lastNode

    param = lastNode.getParam("NatronParamFormatChoice")
    if param is not None:
        param.set("PC_Video")
        del param

    del lastNode
    # End of node "Crop1"

    # Start of node "Input1"
    lastNode = app.createNode("fr.inria.built-in.Input", 1, group)
    lastNode.setScriptName("Input1")
    lastNode.setLabel("Input1")
    lastNode.setPosition(1301, -459)
    lastNode.setSize(104, 33)
    lastNode.setColor(0.3, 0.5, 0.2)
    groupInput1 = lastNode

    del lastNode
    # End of node "Input1"

    # Now that all nodes are created we can connect them together, restore expressions
    groupOutput1.connectInput(0, groupCrop1)
    groupMerge1.connectInput(0, groupDot10)
    groupMerge1.connectInput(1, grouptblop_1)
    groupDot1.connectInput(0, groupPosition1)
    groupPosition1.connectInput(0, groupInput1)
    grouptblop_0.connectInput(0, groupTimer_10)
    grouptblop_1.connectInput(0, groupTimer)
    groupDot2.connectInput(0, groupDot1)
    grouptblop_2.connectInput(0, groupTimer_2)
    groupDot2_2.connectInput(0, groupDot2)
    groupMerge2.connectInput(0, groupMerge1)
    groupMerge2.connectInput(1, grouptblop_2)
    grouptblop_3.connectInput(0, groupTimer_3)
    grouptblop_4.connectInput(0, groupTimer_4)
    grouptblop_5.connectInput(0, groupTimer_5)
    grouptblop_6.connectInput(0, groupTimer_6)
    grouptblop_7.connectInput(0, groupTimer_7)
    grouptblop_8.connectInput(0, groupTimer_8)
    grouptblop_9.connectInput(0, groupTimer_9)
    groupDot3.connectInput(0, groupDot2_2)
    groupDot4.connectInput(0, groupDot3)
    groupDot5.connectInput(0, groupDot4)
    groupDot6.connectInput(0, groupDot5)
    groupDot7.connectInput(0, groupDot6)
    groupDot8.connectInput(0, groupDot7)
    groupDot9.connectInput(0, groupDot8)
    groupMerge3.connectInput(0, groupMerge2)
    groupMerge3.connectInput(1, grouptblop_3)
    groupMerge4.connectInput(0, groupMerge3)
    groupMerge4.connectInput(1, grouptblop_4)
    groupMerge5.connectInput(0, groupMerge4)
    groupMerge5.connectInput(1, grouptblop_5)
    groupMerge6.connectInput(0, groupMerge5)
    groupMerge6.connectInput(1, grouptblop_6)
    groupMerge7.connectInput(0, groupMerge6)
    groupMerge7.connectInput(1, grouptblop_7)
    groupMerge8.connectInput(0, groupMerge7)
    groupMerge8.connectInput(1, grouptblop_8)
    groupMerge9.connectInput(0, groupMerge8)
    groupMerge9.connectInput(1, grouptblop_9)
    groupTimeOffset1.connectInput(0, groupMerge9)
    groupTimer.connectInput(0, groupDot2)
    groupTimer_2.connectInput(0, groupDot2_2)
    groupTimer_3.connectInput(0, groupDot3)
    groupTimer_4.connectInput(0, groupDot4)
    groupTimer_5.connectInput(0, groupDot5)
    groupTimer_6.connectInput(0, groupDot6)
    groupTimer_7.connectInput(0, groupDot7)
    groupTimer_8.connectInput(0, groupDot8)
    groupTimer_9.connectInput(0, groupDot9)
    groupTimer_10.connectInput(0, groupDot1)
    groupDot10.connectInput(0, grouptblop_0)
    groupCrop1.connectInput(0, groupTimeOffset1)

    param = groupMerge1.getParam("mix")
    param.setExpression("import random\nindex = 1\nopacity_random = thisGroup.opacity_random.getValue()\nrandom_seed = thisGroup.random_seed.get()\nrandom.seed( index * random_seed )\n\nif thisGroup.blot_amount.getValue() > index:\n\tret = 1 - ( random.random() * opacity_random)\nelse:\n\tret = 0", True, 0)
    del param
    param = grouptblop_0.getParam("scale")
    param.setExpression("import random\nindex = 10\nscale_random = thisGroup.scale_random.getValue()\nscale = thisGroup.scale.getValue()\nrandom_seed = thisGroup.random_seed.get()\nrandom.seed( index * random_seed + 1000 )\n\nret =  scale - ( scale_random / 2 ) + ( random.random() * scale_random ) ", True, 0)
    param.setExpression("import random\nindex = 10\nscale_random = thisGroup.scale_random.getValue()\nscale = thisGroup.scale.getValue()\nrandom_seed = thisGroup.random_seed.get()\nrandom.seed( index * random_seed + 1000 )\n\nret =  scale - ( scale_random / 2 ) + ( random.random() * scale_random ) ", True, 1)
    del param
    param = grouptblop_1.getParam("scale")
    param.setExpression("import random\nindex = 1\nscale_random = thisGroup.scale_random.getValue()\nscale = thisGroup.scale.getValue()\nrandom_seed = thisGroup.random_seed.get()\nrandom.seed( index * random_seed + 1000 )\n\nret =  scale - ( scale_random / 2 ) + ( random.random() * scale_random ) ", True, 0)
    param.setExpression("import random\nindex = 1\nscale_random = thisGroup.scale_random.getValue()\nscale = thisGroup.scale.getValue()\nrandom_seed = thisGroup.random_seed.get()\nrandom.seed( index * random_seed + 1000 )\n\nret =  scale - ( scale_random / 2 ) + ( random.random() * scale_random ) ", True, 1)
    del param
    param = grouptblop_2.getParam("scale")
    param.setExpression("import random\nindex = 2\nscale_random = thisGroup.scale_random.getValue()\nscale = thisGroup.scale.getValue()\nrandom_seed = thisGroup.random_seed.get()\nrandom.seed( index * random_seed + 1000 )\n\nret =  scale - ( scale_random / 2 ) + ( random.random() * scale_random ) ", True, 0)
    param.setExpression("import random\nindex = 2\nscale_random = thisGroup.scale_random.getValue()\nscale = thisGroup.scale.getValue()\nrandom_seed = thisGroup.random_seed.get()\nrandom.seed( index * random_seed + 1000 )\n\nret =  scale - ( scale_random / 2 ) + ( random.random() * scale_random ) ", True, 1)
    del param
    param = groupMerge2.getParam("mix")
    param.setExpression("import random\nindex = 2\nopacity_random = thisGroup.opacity_random.getValue()\nrandom_seed = thisGroup.random_seed.get()\nrandom.seed( index * random_seed )\n\nif thisGroup.blot_amount.getValue() > index:\n\tret = 1 - ( random.random() * opacity_random)\nelse:\n\tret = 0", True, 0)
    del param
    param = grouptblop_3.getParam("scale")
    param.setExpression("import random\nindex = 3\nscale_random = thisGroup.scale_random.getValue()\nscale = thisGroup.scale.getValue()\nrandom_seed = thisGroup.random_seed.get()\nrandom.seed( index * random_seed + 1000 )\n\nret =  scale - ( scale_random / 2 ) + ( random.random() * scale_random ) ", True, 0)
    param.setExpression("import random\nindex = 3\nscale_random = thisGroup.scale_random.getValue()\nscale = thisGroup.scale.getValue()\nrandom_seed = thisGroup.random_seed.get()\nrandom.seed( index * random_seed + 1000 )\n\nret =  scale - ( scale_random / 2 ) + ( random.random() * scale_random ) ", True, 1)
    del param
    param = grouptblop_4.getParam("scale")
    param.setExpression("import random\nindex = 4\nscale_random = thisGroup.scale_random.getValue()\nscale = thisGroup.scale.getValue()\nrandom_seed = thisGroup.random_seed.get()\nrandom.seed( index * random_seed + 1000 )\n\nret =  scale - ( scale_random / 2 ) + ( random.random() * scale_random ) ", True, 0)
    param.setExpression("import random\nindex = 4\nscale_random = thisGroup.scale_random.getValue()\nscale = thisGroup.scale.getValue()\nrandom_seed = thisGroup.random_seed.get()\nrandom.seed( index * random_seed + 1000 )\n\nret =  scale - ( scale_random / 2 ) + ( random.random() * scale_random ) ", True, 1)
    del param
    param = grouptblop_5.getParam("scale")
    param.setExpression("import random\nindex = 5\nscale_random = thisGroup.scale_random.getValue()\nscale = thisGroup.scale.getValue()\nrandom_seed = thisGroup.random_seed.get()\nrandom.seed( index * random_seed + 1000 )\n\nret =  scale - ( scale_random / 2 ) + ( random.random() * scale_random ) ", True, 0)
    param.setExpression("import random\nindex = 5\nscale_random = thisGroup.scale_random.getValue()\nscale = thisGroup.scale.getValue()\nrandom_seed = thisGroup.random_seed.get()\nrandom.seed( index * random_seed + 1000 )\n\nret =  scale - ( scale_random / 2 ) + ( random.random() * scale_random ) ", True, 1)
    del param
    param = grouptblop_6.getParam("scale")
    param.setExpression("import random\nindex = 6\nscale_random = thisGroup.scale_random.getValue()\nscale = thisGroup.scale.getValue()\nrandom_seed = thisGroup.random_seed.get()\nrandom.seed( index * random_seed + 1000 )\n\nret =  scale - ( scale_random / 2 ) + ( random.random() * scale_random ) ", True, 0)
    param.setExpression("import random\nindex = 6\nscale_random = thisGroup.scale_random.getValue()\nscale = thisGroup.scale.getValue()\nrandom_seed = thisGroup.random_seed.get()\nrandom.seed( index * random_seed + 1000 )\n\nret =  scale - ( scale_random / 2 ) + ( random.random() * scale_random ) ", True, 1)
    del param
    param = grouptblop_7.getParam("scale")
    param.setExpression("import random\nindex = 7\nscale_random = thisGroup.scale_random.getValue()\nscale = thisGroup.scale.getValue()\nrandom_seed = thisGroup.random_seed.get()\nrandom.seed( index * random_seed + 1000 )\n\nret =  scale - ( scale_random / 2 ) + ( random.random() * scale_random ) ", True, 0)
    param.setExpression("import random\nindex = 7\nscale_random = thisGroup.scale_random.getValue()\nscale = thisGroup.scale.getValue()\nrandom_seed = thisGroup.random_seed.get()\nrandom.seed( index * random_seed + 1000 )\n\nret =  scale - ( scale_random / 2 ) + ( random.random() * scale_random ) ", True, 1)
    del param
    param = grouptblop_8.getParam("scale")
    param.setExpression("import random\nindex = 8\nscale_random = thisGroup.scale_random.getValue()\nscale = thisGroup.scale.getValue()\nrandom_seed = thisGroup.random_seed.get()\nrandom.seed( index * random_seed + 1000 )\n\nret =  scale - ( scale_random / 2 ) + ( random.random() * scale_random ) ", True, 0)
    param.setExpression("import random\nindex = 8\nscale_random = thisGroup.scale_random.getValue()\nscale = thisGroup.scale.getValue()\nrandom_seed = thisGroup.random_seed.get()\nrandom.seed( index * random_seed + 1000 )\n\nret =  scale - ( scale_random / 2 ) + ( random.random() * scale_random ) ", True, 1)
    del param
    param = grouptblop_9.getParam("scale")
    param.setExpression("import random\nindex = 9\nscale_random = thisGroup.scale_random.getValue()\nscale = thisGroup.scale.getValue()\nrandom_seed = thisGroup.random_seed.get()\nrandom.seed( index * random_seed + 1000 )\n\nret =  scale - ( scale_random / 2 ) + ( random.random() * scale_random ) ", True, 0)
    param.setExpression("import random\nindex = 9\nscale_random = thisGroup.scale_random.getValue()\nscale = thisGroup.scale.getValue()\nrandom_seed = thisGroup.random_seed.get()\nrandom.seed( index * random_seed + 1000 )\n\nret =  scale - ( scale_random / 2 ) + ( random.random() * scale_random ) ", True, 1)
    del param
    param = groupMerge3.getParam("mix")
    param.setExpression("import random\nindex = 3\nopacity_random = thisGroup.opacity_random.getValue()\nrandom_seed = thisGroup.random_seed.get()\nrandom.seed( index * random_seed )\n\nif thisGroup.blot_amount.getValue() > index:\n\tret = 1 - ( random.random() * opacity_random)\nelse:\n\tret = 0", True, 0)
    del param
    param = groupMerge4.getParam("mix")
    param.setExpression("import random\nindex = 4\nopacity_random = thisGroup.opacity_random.getValue()\nrandom_seed = thisGroup.random_seed.get()\nrandom.seed( index * random_seed )\n\nif thisGroup.blot_amount.getValue() > index:\n\tret = 1 - ( random.random() * opacity_random)\nelse:\n\tret = 0", True, 0)
    del param
    param = groupMerge5.getParam("mix")
    param.setExpression("import random\nindex = 5\nopacity_random = thisGroup.opacity_random.getValue()\nrandom_seed = thisGroup.random_seed.get()\nrandom.seed( index * random_seed )\n\nif thisGroup.blot_amount.getValue() > index:\n\tret = 1 - ( random.random() * opacity_random)\nelse:\n\tret = 0", True, 0)
    del param
    param = groupMerge6.getParam("mix")
    param.setExpression("import random\nindex = 6\nopacity_random = thisGroup.opacity_random.getValue()\nrandom_seed = thisGroup.random_seed.get()\nrandom.seed( index * random_seed )\n\nif thisGroup.blot_amount.getValue() > index:\n\tret = 1 - ( random.random() * opacity_random)\nelse:\n\tret = 0", True, 0)
    del param
    param = groupMerge7.getParam("mix")
    param.setExpression("import random\nindex = 7\nopacity_random = thisGroup.opacity_random.getValue()\nrandom_seed = thisGroup.random_seed.get()\nrandom.seed( index * random_seed )\n\nif thisGroup.blot_amount.getValue() > index:\n\tret = 1 - ( random.random() * opacity_random)\nelse:\n\tret = 0", True, 0)
    del param
    param = groupMerge8.getParam("mix")
    param.setExpression("import random\nindex = 8\nopacity_random = thisGroup.opacity_random.getValue()\nrandom_seed = thisGroup.random_seed.get()\nrandom.seed( index * random_seed )\n\nif thisGroup.blot_amount.getValue() > index:\n\tret = 1 - ( random.random() * opacity_random)\nelse:\n\tret = 0", True, 0)
    del param
    param = groupMerge9.getParam("mix")
    param.setExpression("import random\nindex = 9\nopacity_random = thisGroup.opacity_random.getValue()\nrandom_seed = thisGroup.random_seed.get()\nrandom.seed( index * random_seed )\n\nif thisGroup.blot_amount.getValue() > index:\n\tret = 1 - ( random.random() * opacity_random)\nelse:\n\tret = 0", True, 0)
    del param
    param = groupTimeOffset1.getParam("timeOffset")
    group.getParam("TimeOffset1timeOffset").setAsAlias(param)
    del param
    param = groupTimer.getParam("timeOffset")
    param.setExpression("import random\n\nindex = 1\n\ntime_random = thisGroup.time_random.getValue()\nrandom_seed = thisGroup.random_seed.getValue()\nrandom.seed( index * random_seed ) \nret = random.randint(0, time_random)", True, 0)
    del param
    param = groupTimer_2.getParam("timeOffset")
    param.setExpression("import random\n\nindex = 2\n\ntime_random = thisGroup.time_random.getValue()\nrandom_seed = thisGroup.random_seed.getValue()\nrandom.seed( index * random_seed ) \nret = random.randint(0, time_random)", True, 0)
    del param
    param = groupTimer_3.getParam("timeOffset")
    param.setExpression("import random\n\nindex = 3\n\ntime_random = thisGroup.time_random.getValue()\nrandom_seed = thisGroup.random_seed.getValue()\nrandom.seed( index * random_seed ) \nret = random.randint(0, time_random)", True, 0)
    del param
    param = groupTimer_4.getParam("timeOffset")
    param.setExpression("import random\n\nindex = 4\n\ntime_random = thisGroup.time_random.getValue()\nrandom_seed = thisGroup.random_seed.getValue()\nrandom.seed( index * random_seed ) \nret = random.randint(0, time_random)", True, 0)
    del param
    param = groupTimer_5.getParam("timeOffset")
    param.setExpression("import random\n\nindex = 5\n\ntime_random = thisGroup.time_random.getValue()\nrandom_seed = thisGroup.random_seed.getValue()\nrandom.seed( index * random_seed ) \nret = random.randint(0, time_random)", True, 0)
    del param
    param = groupTimer_6.getParam("timeOffset")
    param.setExpression("import random\n\nindex = 6\n\ntime_random = thisGroup.time_random.getValue()\nrandom_seed = thisGroup.random_seed.getValue()\nrandom.seed( index * random_seed ) \nret = random.randint(0, time_random)", True, 0)
    del param
    param = groupTimer_7.getParam("timeOffset")
    param.setExpression("import random\n\nindex = 7\n\ntime_random = thisGroup.time_random.getValue()\nrandom_seed = thisGroup.random_seed.getValue()\nrandom.seed( index * random_seed ) \nret = random.randint(0, time_random)", True, 0)
    del param
    param = groupTimer_8.getParam("timeOffset")
    param.setExpression("import random\n\nindex = 8\n\ntime_random = thisGroup.time_random.getValue()\nrandom_seed = thisGroup.random_seed.getValue()\nrandom.seed( index * random_seed ) \nret = random.randint(0, time_random)", True, 0)
    del param
    param = groupTimer_9.getParam("timeOffset")
    param.setExpression("import random\n\nindex = 9\n\ntime_random = thisGroup.time_random.getValue()\nrandom_seed = thisGroup.random_seed.getValue()\nrandom.seed( index * random_seed ) \nret = random.randint(0, time_random)", True, 0)
    del param
    param = groupTimer_10.getParam("timeOffset")
    param.setExpression("import random\n\nindex = 10\n\ntime_random = thisGroup.time_random.getValue()\nrandom_seed = thisGroup.random_seed.getValue()\nrandom.seed( index * random_seed ) \nret = random.randint(0, time_random)", True, 0)
    del param

    try:
        extModule = sys.modules["InkExt"]
    except KeyError:
        extModule = None
    if extModule is not None and hasattr(extModule ,"createInstanceExt") and hasattr(extModule.createInstanceExt,"__call__"):
        extModule.createInstanceExt(app,group)
