# -*- coding: utf-8 -*-
# DO NOT EDIT THIS FILE
# Natron PyPlug
# This file was automatically generated by Natron PyPlug exporter version 10.

# Hand-written code should be added in a separate file named ShapeExt.py
# See http://natron.readthedocs.org/en/master/devel/groups.html#adding-hand-written-code-callbacks-etc
# Note that Viewers are never exported

import NatronEngine
import sys

# Try to import the extensions file where callbacks and hand-written code should be located.
try:
    from ShapeExt import *
except ImportError:
    pass

def getPluginID():
    return "vv.shape"

def getLabel():
    return "Shape"

def getIconPath():
    return "Shape.png"

def getVersion():
    return 1

def getGrouping():
    return "videovina"

def createInstance(app,group):
    # Create all nodes in the group

    # Create the parameters of the group node the same way we did for all internal nodes
    lastNode = group
    lastNode.setColor(0.7, 0.7, 0.7)

    # Create the user parameters
    lastNode.controls = lastNode.createPageParam("controls", "Controls")
    param = lastNode.createStringParam("shapes_label", "Shape")
    param.setType(NatronEngine.StringParam.TypeEnum.eStringTypeLabel)
    param.setDefaultValue("Shape:")
    param.restoreDefaultValue()

    # Add the param to the page
    lastNode.controls.addParam(param)

    # Set param properties
    param.setHelp("")
    param.setAddNewLine(True)
    param.setEvaluateOnChange(False)
    param.setAnimationEnabled(False)
    lastNode.shapes_label = param
    del param

    param = lastNode.createIntParam("faces", "Faces")
    param.setMinimum(3, 0)
    param.setMaximum(10, 0)
    param.setDisplayMinimum(3, 0)
    param.setDisplayMaximum(10, 0)
    param.setDefaultValue(0, 0)
    param.restoreDefaultValue(0)

    # Add the param to the page
    lastNode.controls.addParam(param)

    # Set param properties
    param.setHelp("")
    param.setAddNewLine(True)
    param.setAnimationEnabled(True)
    param.setValue(6, 0)
    lastNode.faces = param
    del param

    param = lastNode.createDoubleParam("size", "Size")
    param.setMinimum(0, 0)
    param.setMaximum(100, 0)
    param.setDisplayMinimum(0, 0)
    param.setDisplayMaximum(100, 0)

    # Add the param to the page
    lastNode.controls.addParam(param)

    # Set param properties
    param.setHelp("")
    param.setAddNewLine(True)
    param.setAnimationEnabled(True)
    param.setValue(35, 0)
    lastNode.size = param
    del param

    param = lastNode.createDoubleParam("opacity", "Opacity")
    param.setMinimum(0, 0)
    param.setMaximum(1, 0)
    param.setDisplayMinimum(0, 0)
    param.setDisplayMaximum(1, 0)

    # Add the param to the page
    lastNode.controls.addParam(param)

    # Set param properties
    param.setHelp("")
    param.setAddNewLine(True)
    param.setAnimationEnabled(True)
    param.setValue(0.5, 0)
    lastNode.opacity = param
    del param

    param = lastNode.createColorParam("color", "Color", False)
    param.setMinimum(-2147483648, 0)
    param.setMaximum(2147483647, 0)
    param.setDisplayMinimum(0, 0)
    param.setDisplayMaximum(1, 0)
    param.setMinimum(-2147483648, 1)
    param.setMaximum(2147483647, 1)
    param.setDisplayMinimum(0, 1)
    param.setDisplayMaximum(1, 1)
    param.setMinimum(-2147483648, 2)
    param.setMaximum(2147483647, 2)
    param.setDisplayMinimum(0, 2)
    param.setDisplayMaximum(1, 2)

    # Add the param to the page
    lastNode.controls.addParam(param)

    # Set param properties
    param.setHelp("")
    param.setAddNewLine(True)
    param.setAnimationEnabled(True)
    param.setValue(1, 0)
    param.setValue(1, 1)
    param.setValue(1, 2)
    lastNode.color = param
    del param

    param = lastNode.createIntParam("edge", "Edge")
    param.setMinimum(0, 0)
    param.setMaximum(100, 0)
    param.setDisplayMinimum(0, 0)
    param.setDisplayMaximum(100, 0)
    param.setDefaultValue(0, 0)
    param.restoreDefaultValue(0)

    # Add the param to the page
    lastNode.controls.addParam(param)

    # Set param properties
    param.setHelp("")
    param.setAddNewLine(True)
    param.setAnimationEnabled(True)
    param.setValue(100, 0)
    lastNode.edge = param
    del param

    param = lastNode.createColorParam("edge_color", "Edge Color", False)
    param.setMinimum(-2147483648, 0)
    param.setMaximum(2147483647, 0)
    param.setDisplayMinimum(0, 0)
    param.setDisplayMaximum(1, 0)
    param.setMinimum(-2147483648, 1)
    param.setMaximum(2147483647, 1)
    param.setDisplayMinimum(0, 1)
    param.setDisplayMaximum(1, 1)
    param.setMinimum(-2147483648, 2)
    param.setMaximum(2147483647, 2)
    param.setDisplayMinimum(0, 2)
    param.setDisplayMaximum(1, 2)

    # Add the param to the page
    lastNode.controls.addParam(param)

    # Set param properties
    param.setHelp("")
    param.setAddNewLine(True)
    param.setAnimationEnabled(True)
    param.setValue(1, 0)
    param.setValue(1, 1)
    param.setValue(1, 2)
    lastNode.edge_color = param
    del param

    param = lastNode.createSeparatorParam("sep", "")

    # Add the param to the page
    lastNode.controls.addParam(param)

    # Set param properties
    param.setHelp("")
    param.setAddNewLine(True)
    param.setPersistent(False)
    param.setEvaluateOnChange(False)
    lastNode.sep = param
    del param

    param = lastNode.createStringParam("animation", "A")
    param.setType(NatronEngine.StringParam.TypeEnum.eStringTypeLabel)
    param.setDefaultValue("Animation:")
    param.restoreDefaultValue()

    # Add the param to the page
    lastNode.controls.addParam(param)

    # Set param properties
    param.setHelp("")
    param.setAddNewLine(True)
    param.setEvaluateOnChange(False)
    param.setAnimationEnabled(False)
    lastNode.animation = param
    del param

    param = lastNode.createInt2DParam("FrameRange2frameRange", "Frame Range")
    param.setDefaultValue(1, 0)
    param.restoreDefaultValue(0)
    param.setDefaultValue(1, 1)
    param.restoreDefaultValue(1)

    # Add the param to the page
    lastNode.controls.addParam(param)

    # Set param properties
    param.setHelp("")
    param.setAddNewLine(True)
    param.setAnimationEnabled(False)
    param.setValue(100, 1)
    lastNode.FrameRange2frameRange = param
    del param

    param = lastNode.createIntParam("transition", "Transition")
    param.setMinimum(1, 0)
    param.setMaximum(100, 0)
    param.setDisplayMinimum(1, 0)
    param.setDisplayMaximum(100, 0)
    param.setDefaultValue(0, 0)
    param.restoreDefaultValue(0)

    # Add the param to the page
    lastNode.controls.addParam(param)

    # Set param properties
    param.setHelp("")
    param.setAddNewLine(True)
    param.setAnimationEnabled(True)
    param.setValue(20, 0)
    lastNode.transition = param
    del param

    param = lastNode.createDoubleParam("max_rotate", "Max Rotate")
    param.setMinimum(1, 0)
    param.setMaximum(360, 0)
    param.setDisplayMinimum(0, 0)
    param.setDisplayMaximum(360, 0)

    # Add the param to the page
    lastNode.controls.addParam(param)

    # Set param properties
    param.setHelp("")
    param.setAddNewLine(True)
    param.setAnimationEnabled(True)
    param.setValue(100, 0)
    lastNode.max_rotate = param
    del param

    param = lastNode.createChoiceParam("rotate_direction", "Rotate Direction")
    entries = [ ("Right", ""),
    ("Left", ""),
    ("", "")]
    param.setOptions(entries)
    del entries

    # Add the param to the page
    lastNode.controls.addParam(param)

    # Set param properties
    param.setHelp("")
    param.setAddNewLine(True)
    param.setAnimationEnabled(True)
    lastNode.rotate_direction = param
    del param

    param = lastNode.createSeparatorParam("sep2", "")

    # Add the param to the page
    lastNode.controls.addParam(param)

    # Set param properties
    param.setHelp("")
    param.setAddNewLine(True)
    param.setPersistent(False)
    param.setEvaluateOnChange(False)
    lastNode.sep2 = param
    del param

    param = lastNode.createStringParam("infinite", "Infinite")
    param.setType(NatronEngine.StringParam.TypeEnum.eStringTypeLabel)
    param.setDefaultValue("Infinite:")
    param.restoreDefaultValue()

    # Add the param to the page
    lastNode.controls.addParam(param)

    # Set param properties
    param.setHelp("")
    param.setAddNewLine(True)
    param.setEvaluateOnChange(False)
    param.setAnimationEnabled(False)
    lastNode.infinite = param
    del param

    param = lastNode.createIntParam("rotate_time", "Rotate Time")
    param.setMinimum(0, 0)
    param.setMaximum(100, 0)
    param.setDisplayMinimum(0, 0)
    param.setDisplayMaximum(100, 0)
    param.setDefaultValue(0, 0)
    param.restoreDefaultValue(0)

    # Add the param to the page
    lastNode.controls.addParam(param)

    # Set param properties
    param.setHelp("")
    param.setAddNewLine(True)
    param.setAnimationEnabled(True)
    param.setValue(10, 0)
    lastNode.rotate_time = param
    del param

    # Refresh the GUI with the newly created parameters
    lastNode.setPagesOrder(['controls', 'Node', 'Settings'])
    lastNode.refreshUserParamsGUI()
    del lastNode

    # Start of node "Output1"
    lastNode = app.createNode("fr.inria.built-in.Output", 1, group)
    lastNode.setLabel("Output")
    lastNode.setPosition(3708, 1020)
    lastNode.setSize(104, 30)
    lastNode.setColor(0.7, 0.7, 0.7)
    groupOutput1 = lastNode

    del lastNode
    # End of node "Output1"

    # Start of node "Constant1"
    lastNode = app.createNode("net.sf.openfx.ConstantPlugin", 1, group)
    lastNode.setScriptName("Constant1")
    lastNode.setLabel("Constant1")
    lastNode.setPosition(2046, -429)
    lastNode.setSize(104, 33)
    lastNode.setColor(0.3, 0.5, 0.2)
    groupConstant1 = lastNode

    param = lastNode.getParam("extent")
    if param is not None:
        param.set("size")
        del param

    param = lastNode.getParam("NatronParamFormatChoice")
    if param is not None:
        param.set("PC_Video")
        del param

    param = lastNode.getParam("size")
    if param is not None:
        param.setValue(1000, 0)
        param.setValue(1000, 1)
        del param

    param = lastNode.getParam("color")
    if param is not None:
        param.setValue(1, 0)
        param.setValue(1, 1)
        param.setValue(1, 2)
        param.setValue(1, 3)
        del param

    del lastNode
    # End of node "Constant1"

    # Start of node "Transform3"
    lastNode = app.createNode("net.sf.openfx.TransformPlugin", 1, group)
    lastNode.setScriptName("Transform3")
    lastNode.setLabel("Transform3")
    lastNode.setPosition(2042, -266)
    lastNode.setSize(104, 33)
    lastNode.setColor(0.7, 0.3, 0.1)
    groupTransform3 = lastNode

    param = lastNode.getParam("translate")
    if param is not None:
        param.setValue(0, 0)
        param.setValue(350, 1)
        del param

    param = lastNode.getParam("center")
    if param is not None:
        param.setValue(0, 1)
        del param

    param = lastNode.getParam("transformCenterChanged")
    if param is not None:
        param.setValue(True)
        del param

    del lastNode
    # End of node "Transform3"

    # Start of node "Transform4"
    lastNode = app.createNode("net.sf.openfx.TransformPlugin", 1, group)
    lastNode.setScriptName("Transform4")
    lastNode.setLabel("Transform4")
    lastNode.setPosition(481, 126)
    lastNode.setSize(104, 33)
    lastNode.setColor(0.7, 0.3, 0.1)
    groupTransform4 = lastNode

    param = lastNode.getParam("rotate")
    if param is not None:
        param.setValue(60, 0)
        del param

    param = lastNode.getParam("center")
    if param is not None:
        param.setValue(500, 0)
        param.setValue(0, 1)
        del param

    param = lastNode.getParam("transformCenterChanged")
    if param is not None:
        param.setValue(True)
        del param

    del lastNode
    # End of node "Transform4"

    # Start of node "Transform4_2"
    lastNode = app.createNode("net.sf.openfx.TransformPlugin", 1, group)
    lastNode.setScriptName("Transform4_2")
    lastNode.setLabel("Transform4_2")
    lastNode.setPosition(959, 132)
    lastNode.setSize(104, 33)
    lastNode.setColor(0.7, 0.3, 0.1)
    groupTransform4_2 = lastNode

    param = lastNode.getParam("rotate")
    if param is not None:
        param.setValue(180, 0)
        del param

    param = lastNode.getParam("center")
    if param is not None:
        param.setValue(500, 0)
        param.setValue(0, 1)
        del param

    param = lastNode.getParam("transformCenterChanged")
    if param is not None:
        param.setValue(True)
        del param

    del lastNode
    # End of node "Transform4_2"

    # Start of node "Merge1"
    lastNode = app.createNode("net.sf.openfx.MergePlugin", 1, group)
    lastNode.setScriptName("Merge1")
    lastNode.setLabel("Merge1")
    lastNode.setPosition(725, 259)
    lastNode.setSize(104, 57)
    lastNode.setColor(0.3, 0.37, 0.776)
    groupMerge1 = lastNode

    param = lastNode.getParam("userTextArea")
    if param is not None:
        param.setValue("<Natron>(over)</Natron>")
        del param

    del lastNode
    # End of node "Merge1"

    # Start of node "Transform4_3"
    lastNode = app.createNode("net.sf.openfx.TransformPlugin", 1, group)
    lastNode.setScriptName("Transform4_3")
    lastNode.setLabel("Transform4_3")
    lastNode.setPosition(725, 138)
    lastNode.setSize(104, 33)
    lastNode.setColor(0.7, 0.3, 0.1)
    groupTransform4_3 = lastNode

    param = lastNode.getParam("rotate")
    if param is not None:
        param.setValue(120, 0)
        del param

    param = lastNode.getParam("center")
    if param is not None:
        param.setValue(500, 0)
        param.setValue(0, 1)
        del param

    param = lastNode.getParam("transformCenterChanged")
    if param is not None:
        param.setValue(True)
        del param

    del lastNode
    # End of node "Transform4_3"

    # Start of node "Transform4_2_2"
    lastNode = app.createNode("net.sf.openfx.TransformPlugin", 1, group)
    lastNode.setScriptName("Transform4_2_2")
    lastNode.setLabel("Transform4_2_2")
    lastNode.setPosition(1272, 117)
    lastNode.setSize(104, 57)
    lastNode.setColor(0.7, 0.3, 0.1)
    groupTransform4_2_2 = lastNode

    param = lastNode.getParam("rotate")
    if param is not None:
        param.setValue(240, 0)
        del param

    param = lastNode.getParam("center")
    if param is not None:
        param.setValue(500, 0)
        param.setValue(0, 1)
        del param

    param = lastNode.getParam("transformCenterChanged")
    if param is not None:
        param.setValue(True)
        del param

    del lastNode
    # End of node "Transform4_2_2"

    # Start of node "Merge1_2"
    lastNode = app.createNode("net.sf.openfx.MergePlugin", 1, group)
    lastNode.setScriptName("Merge1_2")
    lastNode.setLabel("Merge1_2")
    lastNode.setPosition(959, 259)
    lastNode.setSize(104, 57)
    lastNode.setColor(0.3, 0.37, 0.776)
    groupMerge1_2 = lastNode

    param = lastNode.getParam("userTextArea")
    if param is not None:
        param.setValue("<Natron>(over)</Natron>")
        del param

    del lastNode
    # End of node "Merge1_2"

    # Start of node "Merge1_2_2"
    lastNode = app.createNode("net.sf.openfx.MergePlugin", 1, group)
    lastNode.setScriptName("Merge1_2_2")
    lastNode.setLabel("Merge1_2_2")
    lastNode.setPosition(1272, 259)
    lastNode.setSize(104, 57)
    lastNode.setColor(0.3, 0.37, 0.776)
    groupMerge1_2_2 = lastNode

    param = lastNode.getParam("mix")
    if param is not None:
        param.setValue(1, 0)
        del param

    param = lastNode.getParam("userTextArea")
    if param is not None:
        param.setValue("<Natron>(over)</Natron>")
        del param

    del lastNode
    # End of node "Merge1_2_2"

    # Start of node "Transform4_2_2_2"
    lastNode = app.createNode("net.sf.openfx.TransformPlugin", 1, group)
    lastNode.setScriptName("Transform4_2_2_2")
    lastNode.setLabel("Transform4_2_2_2")
    lastNode.setPosition(1555, 116)
    lastNode.setSize(104, 57)
    lastNode.setColor(0.7, 0.3, 0.1)
    groupTransform4_2_2_2 = lastNode

    param = lastNode.getParam("rotate")
    if param is not None:
        param.setValue(300, 0)
        del param

    param = lastNode.getParam("center")
    if param is not None:
        param.setValue(500, 0)
        param.setValue(0, 1)
        del param

    param = lastNode.getParam("transformCenterChanged")
    if param is not None:
        param.setValue(True)
        del param

    del lastNode
    # End of node "Transform4_2_2_2"

    # Start of node "Merge1_2_2_2"
    lastNode = app.createNode("net.sf.openfx.MergePlugin", 1, group)
    lastNode.setScriptName("Merge1_2_2_2")
    lastNode.setLabel("Merge1_2_2_2")
    lastNode.setPosition(1555, 259)
    lastNode.setSize(104, 57)
    lastNode.setColor(0.3, 0.37, 0.776)
    groupMerge1_2_2_2 = lastNode

    param = lastNode.getParam("mix")
    if param is not None:
        param.setValue(1, 0)
        del param

    param = lastNode.getParam("userTextArea")
    if param is not None:
        param.setValue("<Natron>(over)</Natron>")
        del param

    del lastNode
    # End of node "Merge1_2_2_2"

    # Start of node "Transform4_2_2_2_2"
    lastNode = app.createNode("net.sf.openfx.TransformPlugin", 1, group)
    lastNode.setScriptName("Transform4_2_2_2_2")
    lastNode.setLabel("Transform4_2_2_2_2")
    lastNode.setPosition(1882, 114)
    lastNode.setSize(104, 57)
    lastNode.setColor(0.7, 0.3, 0.1)
    groupTransform4_2_2_2_2 = lastNode

    param = lastNode.getParam("rotate")
    if param is not None:
        param.setValue(360, 0)
        del param

    param = lastNode.getParam("center")
    if param is not None:
        param.setValue(500, 0)
        param.setValue(0, 1)
        del param

    param = lastNode.getParam("transformCenterChanged")
    if param is not None:
        param.setValue(True)
        del param

    del lastNode
    # End of node "Transform4_2_2_2_2"

    # Start of node "Merge1_2_2_2_2"
    lastNode = app.createNode("net.sf.openfx.MergePlugin", 1, group)
    lastNode.setScriptName("Merge1_2_2_2_2")
    lastNode.setLabel("Merge1_2_2_2_2")
    lastNode.setPosition(1882, 259)
    lastNode.setSize(104, 57)
    lastNode.setColor(0.3, 0.37, 0.776)
    groupMerge1_2_2_2_2 = lastNode

    param = lastNode.getParam("mix")
    if param is not None:
        param.setValue(1, 0)
        del param

    del lastNode
    # End of node "Merge1_2_2_2_2"

    # Start of node "Transform4_2_2_2_3"
    lastNode = app.createNode("net.sf.openfx.TransformPlugin", 1, group)
    lastNode.setScriptName("Transform4_2_2_2_3")
    lastNode.setLabel("Transform4_2_2_2_3")
    lastNode.setPosition(2274, 122)
    lastNode.setSize(104, 57)
    lastNode.setColor(0.7, 0.3, 0.1)
    groupTransform4_2_2_2_3 = lastNode

    param = lastNode.getParam("rotate")
    if param is not None:
        param.setValue(420, 0)
        del param

    param = lastNode.getParam("center")
    if param is not None:
        param.setValue(500, 0)
        param.setValue(0, 1)
        del param

    param = lastNode.getParam("transformCenterChanged")
    if param is not None:
        param.setValue(True)
        del param

    del lastNode
    # End of node "Transform4_2_2_2_3"

    # Start of node "Merge1_2_2_2_3"
    lastNode = app.createNode("net.sf.openfx.MergePlugin", 1, group)
    lastNode.setScriptName("Merge1_2_2_2_3")
    lastNode.setLabel("Merge1_2_2_2_3")
    lastNode.setPosition(2274, 264)
    lastNode.setSize(104, 57)
    lastNode.setColor(0.3, 0.37, 0.776)
    groupMerge1_2_2_2_3 = lastNode

    param = lastNode.getParam("mix")
    if param is not None:
        param.setValue(0, 0)
        del param

    del lastNode
    # End of node "Merge1_2_2_2_3"

    # Start of node "Transform4_2_2_2_3_2"
    lastNode = app.createNode("net.sf.openfx.TransformPlugin", 1, group)
    lastNode.setScriptName("Transform4_2_2_2_3_2")
    lastNode.setLabel("Transform4_2_2_2_3_2")
    lastNode.setPosition(2580, 113)
    lastNode.setSize(104, 57)
    lastNode.setColor(0.7, 0.3, 0.1)
    groupTransform4_2_2_2_3_2 = lastNode

    param = lastNode.getParam("rotate")
    if param is not None:
        param.setValue(480, 0)
        del param

    param = lastNode.getParam("center")
    if param is not None:
        param.setValue(500, 0)
        param.setValue(0, 1)
        del param

    param = lastNode.getParam("transformCenterChanged")
    if param is not None:
        param.setValue(True)
        del param

    del lastNode
    # End of node "Transform4_2_2_2_3_2"

    # Start of node "Merge1_2_2_2_3_2"
    lastNode = app.createNode("net.sf.openfx.MergePlugin", 1, group)
    lastNode.setScriptName("Merge1_2_2_2_3_2")
    lastNode.setLabel("Merge1_2_2_2_3_2")
    lastNode.setPosition(2580, 259)
    lastNode.setSize(104, 81)
    lastNode.setColor(0.3, 0.37, 0.776)
    groupMerge1_2_2_2_3_2 = lastNode

    param = lastNode.getParam("mix")
    if param is not None:
        param.setValue(0, 0)
        del param

    del lastNode
    # End of node "Merge1_2_2_2_3_2"

    # Start of node "Transform4_2_2_2_3_3"
    lastNode = app.createNode("net.sf.openfx.TransformPlugin", 1, group)
    lastNode.setScriptName("Transform4_2_2_2_3_3")
    lastNode.setLabel("Transform4_2_2_2_3_3")
    lastNode.setPosition(2951, 95)
    lastNode.setSize(104, 57)
    lastNode.setColor(0.7, 0.3, 0.1)
    groupTransform4_2_2_2_3_3 = lastNode

    param = lastNode.getParam("rotate")
    if param is not None:
        param.setValue(540, 0)
        del param

    param = lastNode.getParam("center")
    if param is not None:
        param.setValue(500, 0)
        param.setValue(0, 1)
        del param

    param = lastNode.getParam("transformCenterChanged")
    if param is not None:
        param.setValue(True)
        del param

    del lastNode
    # End of node "Transform4_2_2_2_3_3"

    # Start of node "Merge1_2_2_2_3_3"
    lastNode = app.createNode("net.sf.openfx.MergePlugin", 1, group)
    lastNode.setScriptName("Merge1_2_2_2_3_3")
    lastNode.setLabel("Merge1_2_2_2_3_3")
    lastNode.setPosition(2951, 259)
    lastNode.setSize(104, 81)
    lastNode.setColor(0.3, 0.37, 0.776)
    groupMerge1_2_2_2_3_3 = lastNode

    param = lastNode.getParam("mix")
    if param is not None:
        param.setValue(0, 0)
        del param

    del lastNode
    # End of node "Merge1_2_2_2_3_3"

    # Start of node "Transform4_2_2_2_3_4"
    lastNode = app.createNode("net.sf.openfx.TransformPlugin", 1, group)
    lastNode.setScriptName("Transform4_2_2_2_3_4")
    lastNode.setLabel("Transform4_2_2_2_3_4")
    lastNode.setPosition(3321, 85)
    lastNode.setSize(104, 57)
    lastNode.setColor(0.7, 0.3, 0.1)
    groupTransform4_2_2_2_3_4 = lastNode

    param = lastNode.getParam("rotate")
    if param is not None:
        param.setValue(600, 0)
        del param

    param = lastNode.getParam("center")
    if param is not None:
        param.setValue(500, 0)
        param.setValue(0, 1)
        del param

    param = lastNode.getParam("transformCenterChanged")
    if param is not None:
        param.setValue(True)
        del param

    param = lastNode.getParam("clamp")
    if param is not None:
        param.setValue(True)
        del param

    del lastNode
    # End of node "Transform4_2_2_2_3_4"

    # Start of node "Merge1_2_2_2_3_4"
    lastNode = app.createNode("net.sf.openfx.MergePlugin", 1, group)
    lastNode.setScriptName("Merge1_2_2_2_3_4")
    lastNode.setLabel("Merge1_2_2_2_3_4")
    lastNode.setPosition(3321, 264)
    lastNode.setSize(104, 81)
    lastNode.setColor(0.3, 0.37, 0.776)
    groupMerge1_2_2_2_3_4 = lastNode

    param = lastNode.getParam("mix")
    if param is not None:
        param.setValue(0, 0)
        del param

    param = lastNode.getParam("userTextArea")
    if param is not None:
        param.setValue("<Natron>(over)</Natron>")
        del param

    del lastNode
    # End of node "Merge1_2_2_2_3_4"

    # Start of node "FrameHold1"
    lastNode = app.createNode("net.sf.openfx.FrameHold", 1, group)
    lastNode.setScriptName("FrameHold1")
    lastNode.setLabel("FrameHold1")
    lastNode.setPosition(3702, 791)
    lastNode.setSize(104, 57)
    lastNode.setColor(0.7, 0.65, 0.35)
    groupFrameHold1 = lastNode

    param = lastNode.getParam("userTextArea")
    if param is not None:
        param.setValue("<Natron>(frame 0)</Natron>")
        del param

    del lastNode
    # End of node "FrameHold1"

    # Start of node "Reformat2"
    lastNode = app.createNode("net.sf.openfx.Reformat", 1, group)
    lastNode.setScriptName("Reformat2")
    lastNode.setLabel("Reformat2")
    lastNode.setPosition(2046, -367)
    lastNode.setSize(104, 33)
    lastNode.setColor(0.7, 0.3, 0.1)
    groupReformat2 = lastNode

    param = lastNode.getParam("useRoD")
    if param is not None:
        param.setValue(True)
        del param

    param = lastNode.getParam("reformatType")
    if param is not None:
        param.set("scale")
        del param

    param = lastNode.getParam("NatronParamFormatChoice")
    if param is not None:
        param.set("PC_Video")
        del param

    param = lastNode.getParam("boxSize")
    if param is not None:
        param.setValue(1000, 0)
        param.setValue(1000, 1)
        del param

    param = lastNode.getParam("boxFixed")
    if param is not None:
        param.setValue(True)
        del param

    del lastNode
    # End of node "Reformat2"

    # Start of node "Position1"
    lastNode = app.createNode("net.sf.openfx.Position", 1, group)
    lastNode.setScriptName("Position1")
    lastNode.setLabel("Position1")
    lastNode.setPosition(3321, 349)
    lastNode.setSize(104, 33)
    lastNode.setColor(0.7, 0.3, 0.1)
    groupPosition1 = lastNode

    param = lastNode.getParam("translate")
    if param is not None:
        param.setValue(500, 1)
        del param

    del lastNode
    # End of node "Position1"

    # Start of node "Invert1"
    lastNode = app.createNode("net.sf.openfx.Invert", 2, group)
    lastNode.setScriptName("Invert1")
    lastNode.setLabel("Invert1")
    lastNode.setPosition(3321, 464)
    lastNode.setSize(104, 33)
    lastNode.setColor(0.48, 0.66, 1)
    groupInvert1 = lastNode

    param = lastNode.getParam("premultChanged")
    if param is not None:
        param.setValue(True)
        del param

    del lastNode
    # End of node "Invert1"

    # Start of node "Crop3"
    lastNode = app.createNode("net.sf.openfx.CropPlugin", 1, group)
    lastNode.setScriptName("Crop3")
    lastNode.setLabel("Crop3")
    lastNode.setPosition(3321, 411)
    lastNode.setSize(104, 33)
    lastNode.setColor(0.7, 0.3, 0.1)
    groupCrop3 = lastNode

    param = lastNode.getParam("NatronParamFormatChoice")
    if param is not None:
        param.set("PC_Video")
        del param

    param = lastNode.getParam("size")
    if param is not None:
        param.setValue(1000, 0)
        param.setValue(1000, 1)
        del param

    del lastNode
    # End of node "Crop3"

    # Start of node "Constant2"
    lastNode = app.createNode("net.sf.openfx.ConstantPlugin", 1, group)
    lastNode.setScriptName("Constant2")
    lastNode.setLabel("Constant2")
    lastNode.setPosition(3692, 347)
    lastNode.setSize(104, 33)
    lastNode.setColor(0.3, 0.5, 0.2)
    groupConstant2 = lastNode

    param = lastNode.getParam("extent")
    if param is not None:
        param.set("size")
        del param

    param = lastNode.getParam("NatronParamFormatChoice")
    if param is not None:
        param.set("PC_Video")
        del param

    param = lastNode.getParam("size")
    if param is not None:
        param.setValue(1000, 0)
        param.setValue(1000, 1)
        del param

    param = lastNode.getParam("color")
    if param is not None:
        param.setValue(1, 0)
        param.setValue(1, 1)
        param.setValue(1, 2)
        param.setValue(0, 3)
        del param

    del lastNode
    # End of node "Constant2"

    # Start of node "Shuffle1"
    lastNode = app.createNode("net.sf.openfx.ShufflePlugin", 3, group)
    lastNode.setScriptName("Shuffle1")
    lastNode.setLabel("Shuffle1")
    lastNode.setPosition(3692, 470)
    lastNode.setSize(104, 33)
    lastNode.setColor(0.6, 0.24, 0.39)
    groupShuffle1 = lastNode

    param = lastNode.getParam("outputA")
    if param is not None:
        param.set("A.uk.co.thefoundry.OfxImagePlaneColour.R")
        del param

    del lastNode
    # End of node "Shuffle1"

    # Start of node "Reformat1"
    lastNode = app.createNode("net.sf.openfx.Reformat", 1, group)
    lastNode.setScriptName("Reformat1")
    lastNode.setLabel("Reformat1")
    lastNode.setPosition(3692, 413)
    lastNode.setSize(104, 33)
    lastNode.setColor(0.7, 0.3, 0.1)
    groupReformat1 = lastNode

    param = lastNode.getParam("useRoD")
    if param is not None:
        param.setValue(True)
        del param

    param = lastNode.getParam("reformatType")
    if param is not None:
        param.set("scale")
        del param

    param = lastNode.getParam("NatronParamFormatChoice")
    if param is not None:
        param.set("PC_Video")
        del param

    param = lastNode.getParam("boxSize")
    if param is not None:
        param.setValue(1000, 0)
        param.setValue(1000, 1)
        del param

    param = lastNode.getParam("boxFixed")
    if param is not None:
        param.setValue(True)
        del param

    del lastNode
    # End of node "Reformat1"

    # Start of node "Premult1"
    lastNode = app.createNode("net.sf.openfx.Premult", 2, group)
    lastNode.setScriptName("Premult1")
    lastNode.setLabel("Premult1")
    lastNode.setPosition(3692, 528)
    lastNode.setSize(104, 33)
    lastNode.setColor(0.3, 0.37, 0.776)
    groupPremult1 = lastNode

    del lastNode
    # End of node "Premult1"

    # Start of node "Transform1"
    lastNode = app.createNode("net.sf.openfx.TransformPlugin", 1, group)
    lastNode.setScriptName("Transform1")
    lastNode.setLabel("Transform1")
    lastNode.setPosition(3708, 881)
    lastNode.setSize(104, 33)
    lastNode.setColor(0.7, 0.3, 0.1)
    groupTransform1 = lastNode

    param = lastNode.getParam("rotate")
    if param is not None:
        param.setValue(-100, 0)
        del param

    param = lastNode.getParam("scale")
    if param is not None:
        param.setValue(1, 0)
        param.setValue(1, 1)
        del param

    param = lastNode.getParam("center")
    if param is not None:
        param.setValue(500, 0)
        param.setValue(500, 1)
        del param

    param = lastNode.getParam("transformCenterChanged")
    if param is not None:
        param.setValue(True)
        del param

    del lastNode
    # End of node "Transform1"

    # Start of node "AnimationRange"
    lastNode = app.createNode("net.sf.openfx.FrameRange", 1, group)
    lastNode.setScriptName("AnimationRange")
    lastNode.setLabel("AnimationRange")
    lastNode.setPosition(3919, 831)
    lastNode.setSize(104, 57)
    lastNode.setColor(0.7, 0.65, 0.35)
    groupAnimationRange = lastNode

    param = lastNode.getParam("frameRange")
    if param is not None:
        param.setValue(100, 1)
        del param

    param = lastNode.getParam("userTextArea")
    if param is not None:
        param.setValue("<Natron>(1 - 1)</Natron>")
        del param

    del lastNode
    # End of node "AnimationRange"

    # Start of node "Transform2"
    lastNode = app.createNode("net.sf.openfx.TransformPlugin", 1, group)
    lastNode.setScriptName("Transform2")
    lastNode.setLabel("Transform2")
    lastNode.setPosition(3708, 944)
    lastNode.setSize(104, 33)
    lastNode.setColor(0.7, 0.3, 0.1)
    groupTransform2 = lastNode

    param = lastNode.getParam("rotate")
    if param is not None:
        param.setValue(-23, 0)
        del param

    param = lastNode.getParam("center")
    if param is not None:
        param.setValue(500.0000000000001, 0)
        param.setValue(500.0000000000001, 1)
        del param

    param = lastNode.getParam("transformCenterChanged")
    if param is not None:
        param.setValue(True)
        del param

    del lastNode
    # End of node "Transform2"

    # Start of node "Transform6"
    lastNode = app.createNode("net.sf.openfx.TransformPlugin", 1, group)
    lastNode.setScriptName("Transform6")
    lastNode.setLabel("Transform6")
    lastNode.setPosition(3065, 546)
    lastNode.setSize(104, 33)
    lastNode.setColor(0.7, 0.3, 0.1)
    groupTransform6 = lastNode

    param = lastNode.getParam("scale")
    if param is not None:
        param.setValue(0.9, 0)
        param.setValue(0.9, 1)
        del param

    param = lastNode.getParam("center")
    if param is not None:
        param.setValue(500, 0)
        param.setValue(500, 1)
        del param

    param = lastNode.getParam("transformCenterChanged")
    if param is not None:
        param.setValue(True)
        del param

    del lastNode
    # End of node "Transform6"

    # Start of node "Merge2"
    lastNode = app.createNode("net.sf.openfx.MergePlugin", 1, group)
    lastNode.setScriptName("Merge2")
    lastNode.setLabel("Merge2")
    lastNode.setPosition(3321, 534)
    lastNode.setSize(104, 57)
    lastNode.setColor(0.3, 0.37, 0.776)
    groupMerge2 = lastNode

    param = lastNode.getParam("operation")
    if param is not None:
        param.set("difference")
        del param

    param = lastNode.getParam("userTextArea")
    if param is not None:
        param.setValue("<Natron>(over)</Natron>")
        del param

    del lastNode
    # End of node "Merge2"

    # Start of node "Merge3"
    lastNode = app.createNode("net.sf.openfx.MergePlugin", 1, group)
    lastNode.setScriptName("Merge3")
    lastNode.setLabel("Merge3")
    lastNode.setPosition(3698, 708)
    lastNode.setSize(104, 57)
    lastNode.setColor(0.3, 0.37, 0.776)
    groupMerge3 = lastNode

    param = lastNode.getParam("mix")
    if param is not None:
        param.setValue(1, 0)
        del param

    param = lastNode.getParam("userTextArea")
    if param is not None:
        param.setValue("<Natron>(over)</Natron>")
        del param

    del lastNode
    # End of node "Merge3"

    # Start of node "Transform5"
    lastNode = app.createNode("net.sf.openfx.TransformPlugin", 1, group)
    lastNode.setScriptName("Transform5")
    lastNode.setLabel("Transform5")
    lastNode.setPosition(3321, 720)
    lastNode.setSize(104, 33)
    lastNode.setColor(0.7, 0.3, 0.1)
    groupTransform5 = lastNode

    param = lastNode.getParam("scale")
    if param is not None:
        param.setValue(1.002, 0)
        param.setValue(1.002, 1)
        del param

    param = lastNode.getParam("center")
    if param is not None:
        param.setValue(500, 0)
        param.setValue(500, 1)
        del param

    param = lastNode.getParam("transformCenterChanged")
    if param is not None:
        param.setValue(True)
        del param

    del lastNode
    # End of node "Transform5"

    # Start of node "Grade1"
    lastNode = app.createNode("net.sf.openfx.GradePlugin", 2, group)
    lastNode.setScriptName("Grade1")
    lastNode.setLabel("Grade1")
    lastNode.setPosition(3692, 590)
    lastNode.setSize(104, 33)
    lastNode.setColor(0.48, 0.66, 1)
    groupGrade1 = lastNode

    param = lastNode.getParam("NatronOfxParamProcessA")
    if param is not None:
        param.setValue(True)
        del param

    param = lastNode.getParam("white")
    if param is not None:
        param.setValue(0, 0)
        param.setValue(0, 1)
        param.setValue(0, 2)
        param.setValue(0, 3)
        del param

    param = lastNode.getParam("premult")
    if param is not None:
        param.setValue(True)
        del param

    param = lastNode.getParam("mix")
    if param is not None:
        param.setValue(0.5, 0)
        del param

    del lastNode
    # End of node "Grade1"

    # Start of node "edge_grade"
    lastNode = app.createNode("net.sf.openfx.GradePlugin", 2, group)
    lastNode.setScriptName("edge_grade")
    lastNode.setLabel("edge_grade")
    lastNode.setPosition(3321, 628)
    lastNode.setSize(104, 33)
    lastNode.setColor(0.48, 0.66, 1)
    groupedge_grade = lastNode

    param = lastNode.getParam("white")
    if param is not None:
        param.setValue(1, 0)
        param.setValue(1, 1)
        param.setValue(1, 2)
        param.setValue(0, 3)
        del param

    param = lastNode.getParam("clampWhite")
    if param is not None:
        param.setValue(True)
        del param

    param = lastNode.getParam("premult")
    if param is not None:
        param.setValue(True)
        del param

    del lastNode
    # End of node "edge_grade"

    # Now that all nodes are created we can connect them together, restore expressions
    groupOutput1.connectInput(0, groupTransform2)
    groupTransform3.connectInput(0, groupReformat2)
    groupTransform4.connectInput(0, groupTransform3)
    groupTransform4_2.connectInput(0, groupTransform3)
    groupMerge1.connectInput(0, groupTransform4)
    groupMerge1.connectInput(1, groupTransform4_3)
    groupTransform4_3.connectInput(0, groupTransform3)
    groupTransform4_2_2.connectInput(0, groupTransform3)
    groupMerge1_2.connectInput(0, groupMerge1)
    groupMerge1_2.connectInput(1, groupTransform4_2)
    groupMerge1_2_2.connectInput(0, groupMerge1_2)
    groupMerge1_2_2.connectInput(1, groupTransform4_2_2)
    groupTransform4_2_2_2.connectInput(0, groupTransform3)
    groupMerge1_2_2_2.connectInput(0, groupMerge1_2_2)
    groupMerge1_2_2_2.connectInput(1, groupTransform4_2_2_2)
    groupTransform4_2_2_2_2.connectInput(0, groupTransform3)
    groupMerge1_2_2_2_2.connectInput(0, groupMerge1_2_2_2)
    groupMerge1_2_2_2_2.connectInput(1, groupTransform4_2_2_2_2)
    groupTransform4_2_2_2_3.connectInput(0, groupTransform3)
    groupMerge1_2_2_2_3.connectInput(0, groupMerge1_2_2_2_2)
    groupMerge1_2_2_2_3.connectInput(1, groupTransform4_2_2_2_3)
    groupTransform4_2_2_2_3_2.connectInput(0, groupTransform3)
    groupMerge1_2_2_2_3_2.connectInput(0, groupMerge1_2_2_2_3)
    groupMerge1_2_2_2_3_2.connectInput(1, groupTransform4_2_2_2_3_2)
    groupTransform4_2_2_2_3_3.connectInput(0, groupTransform3)
    groupMerge1_2_2_2_3_3.connectInput(0, groupMerge1_2_2_2_3_2)
    groupMerge1_2_2_2_3_3.connectInput(1, groupTransform4_2_2_2_3_3)
    groupTransform4_2_2_2_3_4.connectInput(0, groupTransform3)
    groupMerge1_2_2_2_3_4.connectInput(0, groupMerge1_2_2_2_3_3)
    groupMerge1_2_2_2_3_4.connectInput(1, groupTransform4_2_2_2_3_4)
    groupFrameHold1.connectInput(0, groupMerge3)
    groupReformat2.connectInput(0, groupConstant1)
    groupPosition1.connectInput(0, groupMerge1_2_2_2_3_4)
    groupInvert1.connectInput(0, groupCrop3)
    groupCrop3.connectInput(0, groupPosition1)
    groupShuffle1.connectInput(0, groupReformat1)
    groupShuffle1.connectInput(1, groupInvert1)
    groupReformat1.connectInput(0, groupConstant2)
    groupPremult1.connectInput(0, groupShuffle1)
    groupTransform1.connectInput(0, groupFrameHold1)
    groupTransform2.connectInput(0, groupTransform1)
    groupTransform6.connectInput(0, groupInvert1)
    groupMerge2.connectInput(0, groupInvert1)
    groupMerge2.connectInput(1, groupTransform6)
    groupMerge3.connectInput(0, groupGrade1)
    groupMerge3.connectInput(1, groupTransform5)
    groupTransform5.connectInput(0, groupedge_grade)
    groupGrade1.connectInput(0, groupPremult1)
    groupedge_grade.connectInput(0, groupMerge2)

    param = groupTransform3.getParam("translate")
    param.setExpression("if dimension == 0:\n\tret = 0\nelse:\n\tret = thisGroup.size.get() * 10", True, 0)
    param.setExpression("if dimension == 0:\n\tret = 0\nelse:\n\tret = thisGroup.size.get() * 10", True, 1)
    del param
    param = groupTransform4.getParam("rotate")
    param.setExpression("rotation = 360 / thisGroup.faces.get()\n\nret = rotation * 1", True, 0)
    del param
    param = groupTransform4_2.getParam("rotate")
    param.setExpression("rotation = 360 / thisGroup.faces.get()\n\nret = rotation * 3", True, 0)
    del param
    param = groupTransform4_3.getParam("rotate")
    param.setExpression("rotation = 360 / thisGroup.faces.get()\n\nret = rotation * 2", True, 0)
    del param
    param = groupTransform4_2_2.getParam("rotate")
    param.setExpression("rotation = 360 / thisGroup.faces.get()\n\nret = rotation * 4", True, 0)
    del param
    param = groupMerge1_2_2.getParam("mix")
    param.setExpression("if thisGroup.faces.get() < 4:\n\tret = 0\nelse:\n\tret = 1", True, 0)
    del param
    param = groupTransform4_2_2_2.getParam("rotate")
    param.setExpression("rotation = 360 / thisGroup.faces.get()\n\nret = rotation * 5", True, 0)
    del param
    param = groupMerge1_2_2_2.getParam("mix")
    param.setExpression("if thisGroup.faces.get() < 5:\n\tret = 0\nelse:\n\tret = 1", True, 0)
    del param
    param = groupTransform4_2_2_2_2.getParam("rotate")
    param.setExpression("rotation = 360 / thisGroup.faces.get()\n\nret = rotation * 6", True, 0)
    del param
    param = groupMerge1_2_2_2_2.getParam("mix")
    param.setExpression("if thisGroup.faces.get() < 6:\n\tret = 0\nelse:\n\tret = 1", True, 0)
    del param
    param = groupTransform4_2_2_2_3.getParam("rotate")
    param.setExpression("rotation = 360 / thisGroup.faces.get()\n\nret = rotation * 7", True, 0)
    del param
    param = groupMerge1_2_2_2_3.getParam("mix")
    param.setExpression("if thisGroup.faces.get() < 7:\n\tret = 0\nelse:\n\tret = 1", True, 0)
    del param
    param = groupTransform4_2_2_2_3_2.getParam("rotate")
    param.setExpression("rotation = 360 / thisGroup.faces.get()\n\nret = rotation * 8", True, 0)
    del param
    param = groupMerge1_2_2_2_3_2.getParam("mix")
    param.setExpression("if thisGroup.faces.get() < 8:\n\tret = 0\nelse:\n\tret = 1", True, 0)
    del param
    param = groupTransform4_2_2_2_3_3.getParam("rotate")
    param.setExpression("rotation = 360 / thisGroup.faces.get()\n\nret = rotation * 9", True, 0)
    del param
    param = groupMerge1_2_2_2_3_3.getParam("mix")
    param.setExpression("if thisGroup.faces.get() < 9:\n\tret = 0\nelse:\n\tret = 1", True, 0)
    del param
    param = groupTransform4_2_2_2_3_4.getParam("rotate")
    param.setExpression("rotation = 360 / thisGroup.faces.get()\n\nret = rotation * 10", True, 0)
    del param
    param = groupMerge1_2_2_2_3_4.getParam("mix")
    param.setExpression("if thisGroup.faces.get() < 10:\n\tret = 0\nelse:\n\tret = 1", True, 0)
    del param
    param = groupConstant2.getParam("color")
    param.setExpression("thisGroup.color.getValue(dimension)", False, 0)
    param.setExpression("thisGroup.color.getValue(dimension)", False, 1)
    param.setExpression("thisGroup.color.getValue(dimension)", False, 2)
    param.setExpression("thisGroup.color.getValue(dimension)", False, 3)
    del param
    param = groupTransform1.getParam("rotate")
    param.setExpression("from math import sin\n\nframeRange = thisGroup.AnimationRange.frameRange\n\nif thisGroup.rotate_direction.get():\n\tmultiply = thisGroup.max_rotate.get()\nelse:\n\tmultiply = - thisGroup.max_rotate.get()\n\t\n_first = frameRange.getValue(0)\n_last = frameRange.getValue(1)\n\ntransition = thisGroup.transition.get()\n\ndef fade(first_frame, _in = True):\n\tif _in:\n\t\tfadeStart = first_frame\n\t\tfadeEnd = first_frame + transition\n\telse:\n\t\tfadeStart = first_frame - transition\n\t\tfadeEnd = first_frame\n\t\n\t_sin = ( ( frame - fadeStart ) * pi ) / ( fadeEnd - fadeStart )  - pi / 2\n\tvalue = ( ( sin( _sin ) + 1 ) / 2 ) * multiply\n\n\tif _in:\n\t\tif frame < fadeStart:\n\t\t\treturn 0\n\t\telif frame > fadeEnd:\n\t\t\treturn multiply\n\t\telse:\n\t\t\treturn value\n\telse:\n\t\tif frame < fadeStart:\n\t\t\treturn multiply\n\t\telif frame > fadeEnd:\n\t\t\treturn 0\n\t\telse:\n\t\t\treturn multiply - value\n\n\nif frame < ( _first + transition ):\n\tret = fade(_first)\nelse:\n\tret = fade(_last, False)\n", True, 0)
    del param
    param = groupTransform1.getParam("scale")
    param.setExpression("from math import sin\n\nframeRange = thisGroup.AnimationRange.frameRange\n\n_first = frameRange.getValue(0)\n_last = frameRange.getValue(1)\n\nmultiply = 1\ntransition = thisGroup.transition.get()\n\ndef fade(first_frame, _in = True):\n\tif _in:\n\t\tfadeStart = first_frame\n\t\tfadeEnd = first_frame + transition\n\telse:\n\t\tfadeStart = first_frame - transition\n\t\tfadeEnd = first_frame\n\t\n\t_sin = ( ( frame - fadeStart ) * pi ) / ( fadeEnd - fadeStart )  - pi / 2\n\tvalue = ( ( sin( _sin ) + 1 ) / 2 ) * multiply\n\n\tif _in:\n\t\tif frame < fadeStart:\n\t\t\treturn 0\n\t\telif frame > fadeEnd:\n\t\t\treturn multiply\n\t\telse:\n\t\t\treturn value\n\telse:\n\t\tif frame < fadeStart:\n\t\t\treturn multiply\n\t\telif frame > fadeEnd:\n\t\t\treturn 0\n\t\telse:\n\t\t\treturn multiply - value\n\n\nif frame < ( _first + transition ):\n\tret = fade(_first)\nelse:\n\tret = fade(_last, False)\n", True, 0)
    param.setExpression("from math import sin\n\nframeRange = thisGroup.AnimationRange.frameRange\n\n_first = frameRange.getValue(0)\n_last = frameRange.getValue(1)\n\nmultiply = 1\ntransition = thisGroup.transition.get()\n\ndef fade(first_frame, _in = True):\n\tif _in:\n\t\tfadeStart = first_frame\n\t\tfadeEnd = first_frame + transition\n\telse:\n\t\tfadeStart = first_frame - transition\n\t\tfadeEnd = first_frame\n\t\n\t_sin = ( ( frame - fadeStart ) * pi ) / ( fadeEnd - fadeStart )  - pi / 2\n\tvalue = ( ( sin( _sin ) + 1 ) / 2 ) * multiply\n\n\tif _in:\n\t\tif frame < fadeStart:\n\t\t\treturn 0\n\t\telif frame > fadeEnd:\n\t\t\treturn multiply\n\t\telse:\n\t\t\treturn value\n\telse:\n\t\tif frame < fadeStart:\n\t\t\treturn multiply\n\t\telif frame > fadeEnd:\n\t\t\treturn 0\n\t\telse:\n\t\t\treturn multiply - value\n\n\nif frame < ( _first + transition ):\n\tret = fade(_first)\nelse:\n\tret = fade(_last, False)\n", True, 1)
    del param
    param = groupAnimationRange.getParam("frameRange")
    group.getParam("FrameRange2frameRange").setAsAlias(param)
    del param
    param = groupTransform2.getParam("rotate")
    param.setExpression("value = frame * ( float( thisGroup.rotate_time.get()  )  / 10 )\nif thisGroup.rotate_direction.getValue():\n\tret = value\nelse:\n\tret = - value\n", True, 0)
    del param
    param = groupTransform6.getParam("scale")
    param.setExpression("edge = float( thisGroup.edge.get() )\n\nret = 1 - ( edge / 1000 )", True, 0)
    param.setExpression("edge = float( thisGroup.edge.get() )\n\nret = 1 - ( edge / 1000 )", True, 1)
    del param
    param = groupMerge3.getParam("mix")
    param.setExpression("if thisGroup.edge.get() > 0:\n\tret = 1\nelse:\n\tret = 0", True, 0)
    del param
    param = groupGrade1.getParam("mix")
    param.setExpression("1 - thisGroup.opacity.get()", False, 0)
    del param
    param = groupedge_grade.getParam("white")
    param.setExpression("thisGroup.edge_color.getValue(dimension)", False, 0)
    param.setExpression("thisGroup.edge_color.getValue(dimension)", False, 1)
    param.setExpression("thisGroup.edge_color.getValue(dimension)", False, 2)
    param.setExpression("thisGroup.edge_color.getValue(dimension)", False, 3)
    del param

    try:
        extModule = sys.modules["ShapeExt"]
    except KeyError:
        extModule = None
    if extModule is not None and hasattr(extModule ,"createInstanceExt") and hasattr(extModule.createInstanceExt,"__call__"):
        extModule.createInstanceExt(app,group)
