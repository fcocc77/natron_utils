# -*- coding: utf-8 -*-
# DO NOT EDIT THIS FILE
# Natron PyPlug
# This file was automatically generated by Natron PyPlug exporter version 10.

# Hand-written code should be added in a separate file named VVTextExt.py
# See http://natron.readthedocs.org/en/master/devel/groups.html#adding-hand-written-code-callbacks-etc
# Note that Viewers are never exported

import NatronEngine
import sys

# Try to import the extensions file where callbacks and hand-written code should be located.
try:
    from VVTextExt import *
except ImportError:
    pass

def getPluginID():
    return "vv.text"

def getLabel():
    return "VVText"

def getVersion():
    return 1

def getGrouping():
    return "videovina"

def createInstance(app,group):
    # Create all nodes in the group

    # Create the parameters of the group node the same way we did for all internal nodes
    lastNode = group
    lastNode.setColor(0.1176, 0.3725, 0.702)
    param = lastNode.getParam("onParamChanged")
    if param is not None:
        param.setValue("vvtext.main")
        del param


    # Create the user parameters
    lastNode.controls = lastNode.createPageParam("controls", "Controls")
    param = lastNode.createChoiceParam("display_param", "Display")
    entries = [ ("Text Box", ""),
    ("Translate Point", ""),
    ("Animated Texts", "")]
    param.setOptions(entries)
    del entries

    # Add the param to the page
    lastNode.controls.addParam(param)

    # Set param properties
    param.setHelp("")
    param.setAddNewLine(True)
    param.setAnimationEnabled(True)
    param.set("Animated Texts")
    lastNode.display_param = param
    del param

    param = lastNode.createDoubleParam("resolution_scale", "Resolution Scale")
    param.setMinimum(0, 0)
    param.setMaximum(4, 0)
    param.setDisplayMinimum(0, 0)
    param.setDisplayMaximum(4, 0)

    # Add the param to the page
    lastNode.controls.addParam(param)

    # Set param properties
    param.setHelp("La escala de resoluci√≥n, como base es 1920x1080 que es igual a la escala 1.")
    param.setAddNewLine(True)
    param.setAnimationEnabled(True)
    param.setValue(0.2, 0)
    lastNode.resolution_scale = param
    del param

    param = lastNode.createButtonParam("fit_to_box", "Fit to Box")

    # Add the param to the page
    lastNode.controls.addParam(param)

    # Set param properties
    param.setHelp("")
    param.setAddNewLine(True)
    param.setEvaluateOnChange(False)
    lastNode.fit_to_box = param
    del param

    param = lastNode.createButtonParam("text_generator", "Text Generator")

    # Add the param to the page
    lastNode.controls.addParam(param)

    # Set param properties
    param.setHelp("")
    param.setAddNewLine(False)
    lastNode.text_generator = param
    del param

    param = lastNode.createButtonParam("refresh_param", "Refresh")

    # Add the param to the page
    lastNode.controls.addParam(param)

    # Set param properties
    param.setHelp("")
    param.setAddNewLine(False)
    param.setEvaluateOnChange(False)
    lastNode.refresh_param = param
    del param

    param = lastNode.createSeparatorParam("sep1", "")

    # Add the param to the page
    lastNode.controls.addParam(param)

    # Set param properties
    param.setHelp("")
    param.setAddNewLine(True)
    param.setPersistent(False)
    param.setEvaluateOnChange(False)
    lastNode.sep1 = param
    del param

    param = lastNode.createSeparatorParam("title_param", "Title:")

    # Add the param to the page
    lastNode.controls.addParam(param)

    # Set param properties
    param.setHelp("")
    param.setAddNewLine(True)
    param.setPersistent(False)
    lastNode.title_param = param
    del param

    param = lastNode.createStringParam("text_param", "Text")
    param.setType(NatronEngine.StringParam.TypeEnum.eStringTypeDefault)

    # Add the param to the page
    lastNode.controls.addParam(param)

    # Set param properties
    param.setHelp("")
    param.setAddNewLine(True)
    param.setAnimationEnabled(True)
    param.setValue("Francico")
    lastNode.text_param = param
    del param

    param = lastNode.createStringParam("subtitle_param", "Subtitle")
    param.setType(NatronEngine.StringParam.TypeEnum.eStringTypeDefault)

    # Add the param to the page
    lastNode.controls.addParam(param)

    # Set param properties
    param.setHelp("")
    param.setAddNewLine(True)
    param.setAnimationEnabled(True)
    param.setValue("Cuevas")
    lastNode.subtitle_param = param
    del param

    param = lastNode.createStringParam("custom_font", "Font")
    param.setType(NatronEngine.StringParam.TypeEnum.eStringTypeDefault)

    # Add the param to the page
    lastNode.controls.addParam(param)

    # Set param properties
    param.setHelp("")
    param.setAddNewLine(True)
    param.setAnimationEnabled(True)
    param.setValue("/home/pancho/Documents/GitHub/videovina/static/fonts/great-vibes/Great Vibes.otf")
    lastNode.custom_font = param
    del param

    param = lastNode.createIntParam("font_size_param", "Font Size")
    param.setMinimum(1, 0)
    param.setMaximum(500, 0)
    param.setDisplayMinimum(1, 0)
    param.setDisplayMaximum(500, 0)
    param.setDefaultValue(0, 0)
    param.restoreDefaultValue(0)

    # Add the param to the page
    lastNode.controls.addParam(param)

    # Set param properties
    param.setHelp("")
    param.setAddNewLine(True)
    param.setAnimationEnabled(True)
    param.setValue(148, 0)
    lastNode.font_size_param = param
    del param

    param = lastNode.createSeparatorParam("sep_dNeti", "")

    # Add the param to the page
    lastNode.controls.addParam(param)

    # Set param properties
    param.setHelp("")
    param.setAddNewLine(True)
    param.setPersistent(False)
    lastNode.sep_dNeti = param
    del param

    param = lastNode.createChoiceParam("direction_param", "Direction")
    entries = [ ("Left to Right", "Left to Right"),
    ("Right to Left", "Right to Left")]
    param.setOptions(entries)
    del entries

    # Add the param to the page
    lastNode.controls.addParam(param)

    # Set param properties
    param.setHelp("")
    param.setAddNewLine(True)
    param.setAnimationEnabled(True)
    param.set("Right to Left")
    lastNode.direction_param = param
    del param

    param = lastNode.createSeparatorParam("sep_HTcpl", "")

    # Add the param to the page
    lastNode.controls.addParam(param)

    # Set param properties
    param.setHelp("")
    param.setAddNewLine(True)
    param.setPersistent(False)
    lastNode.sep_HTcpl = param
    del param

    param = lastNode.createDoubleParam("delay_param", "Delay")
    param.setMinimum(0, 0)
    param.setMaximum(100, 0)
    param.setDisplayMinimum(0, 0)
    param.setDisplayMaximum(100, 0)

    # Add the param to the page
    lastNode.controls.addParam(param)

    # Set param properties
    param.setHelp("")
    param.setAddNewLine(True)
    param.setAnimationEnabled(True)
    param.setValue(20, 0)
    lastNode.delay_param = param
    del param

    param = lastNode.createSeparatorParam("sep_bSX35", "")

    # Add the param to the page
    lastNode.controls.addParam(param)

    # Set param properties
    param.setHelp("")
    param.setAddNewLine(True)
    param.setPersistent(False)
    lastNode.sep_bSX35 = param
    del param

    param = lastNode.createDoubleParam("translate_param", "Translate")
    param.setMinimum(0, 0)
    param.setMaximum(2000, 0)
    param.setDisplayMinimum(0, 0)
    param.setDisplayMaximum(2000, 0)

    # Add the param to the page
    lastNode.controls.addParam(param)

    # Set param properties
    param.setHelp("")
    param.setAddNewLine(True)
    param.setAnimationEnabled(True)
    lastNode.translate_param = param
    del param

    param = lastNode.createDoubleParam("angle_param", "Angle")
    param.setMinimum(0, 0)
    param.setMaximum(360, 0)
    param.setDisplayMinimum(0, 0)
    param.setDisplayMaximum(360, 0)

    # Add the param to the page
    lastNode.controls.addParam(param)

    # Set param properties
    param.setHelp("")
    param.setAddNewLine(True)
    param.setAnimationEnabled(True)
    lastNode.angle_param = param
    del param

    param = lastNode.createSeparatorParam("sep2", "")

    # Add the param to the page
    lastNode.controls.addParam(param)

    # Set param properties
    param.setHelp("")
    param.setAddNewLine(True)
    param.setPersistent(False)
    param.setEvaluateOnChange(False)
    lastNode.sep2 = param
    del param

    param = lastNode.createDoubleParam("scale_param", "Scale")
    param.setMinimum(1, 0)
    param.setMaximum(100, 0)
    param.setDisplayMinimum(1, 0)
    param.setDisplayMaximum(100, 0)

    # Add the param to the page
    lastNode.controls.addParam(param)

    # Set param properties
    param.setHelp("")
    param.setAddNewLine(True)
    param.setAnimationEnabled(True)
    param.setValue(1, 0)
    lastNode.scale_param = param
    del param

    param = lastNode.createDoubleParam("rotate_param", "Rotate")
    param.setMinimum(0, 0)
    param.setMaximum(360, 0)
    param.setDisplayMinimum(0, 0)
    param.setDisplayMaximum(360, 0)

    # Add the param to the page
    lastNode.controls.addParam(param)

    # Set param properties
    param.setHelp("")
    param.setAddNewLine(True)
    param.setAnimationEnabled(True)
    lastNode.rotate_param = param
    del param

    param = lastNode.createDoubleParam("opacity_param", "Opacity")
    param.setMinimum(0, 0)
    param.setMaximum(1, 0)
    param.setDisplayMinimum(0, 0)
    param.setDisplayMaximum(1, 0)

    # Add the param to the page
    lastNode.controls.addParam(param)

    # Set param properties
    param.setHelp("")
    param.setAddNewLine(True)
    param.setAnimationEnabled(True)
    param.setValue(1, 0)
    lastNode.opacity_param = param
    del param

    param = lastNode.createSeparatorParam("sep_kZTaw", "")

    # Add the param to the page
    lastNode.controls.addParam(param)

    # Set param properties
    param.setHelp("")
    param.setAddNewLine(True)
    param.setPersistent(False)
    lastNode.sep_kZTaw = param
    del param

    param = lastNode.createDoubleParam("blur_x_param", "Blur X")
    param.setMinimum(0, 0)
    param.setMaximum(100, 0)
    param.setDisplayMinimum(0, 0)
    param.setDisplayMaximum(100, 0)

    # Add the param to the page
    lastNode.controls.addParam(param)

    # Set param properties
    param.setHelp("")
    param.setAddNewLine(True)
    param.setAnimationEnabled(True)
    lastNode.blur_x_param = param
    del param

    param = lastNode.createDoubleParam("blur_y_param", "Blur Y")
    param.setMinimum(0, 0)
    param.setMaximum(100, 0)
    param.setDisplayMinimum(0, 0)
    param.setDisplayMaximum(100, 0)

    # Add the param to the page
    lastNode.controls.addParam(param)

    # Set param properties
    param.setHelp("")
    param.setAddNewLine(True)
    param.setAnimationEnabled(True)
    lastNode.blur_y_param = param
    del param

    param = lastNode.createSeparatorParam("sep_8deVl", "")

    # Add the param to the page
    lastNode.controls.addParam(param)

    # Set param properties
    param.setHelp("")
    param.setAddNewLine(True)
    param.setPersistent(False)
    lastNode.sep_8deVl = param
    del param

    # Refresh the GUI with the newly created parameters
    lastNode.setPagesOrder(['controls', 'Node', 'Settings'])
    lastNode.refreshUserParamsGUI()
    del lastNode

    # Start of node "Output1"
    lastNode = app.createNode("fr.inria.built-in.Output", 1, group)
    lastNode.setLabel("Output1")
    lastNode.setPosition(-29, 713)
    lastNode.setSize(100, 29)
    lastNode.setColor(0.7, 0.7, 0.7)
    groupOutput1 = lastNode

    del lastNode
    # End of node "Output1"

    # Start of node "Constant1"
    lastNode = app.createNode("net.sf.openfx.ConstantPlugin", 1, group)
    lastNode.setScriptName("Constant1")
    lastNode.setLabel("Constant1")
    lastNode.setPosition(-29, -399)
    lastNode.setSize(100, 29)
    lastNode.setColor(0.3, 0.5, 0.2)
    groupConstant1 = lastNode

    param = lastNode.getParam("NatronParamFormatChoice")
    if param is not None:
        param.set("PC_Video")
        del param

    param = lastNode.getParam("color")
    if param is not None:
        param.setValue(0.3324515819549561, 0)
        param.setValue(0.3613067865371704, 1)
        param.setValue(0.01680737361311913, 2)
        param.setValue(1, 3)
        del param

    del lastNode
    # End of node "Constant1"

    # Start of node "Transform"
    lastNode = app.createNode("fr.inria.built-in.Input", 1, group)
    lastNode.setScriptName("Transform")
    lastNode.setLabel("Transform")
    lastNode.setPosition(703, -577)
    lastNode.setSize(100, 29)
    lastNode.setColor(0.3, 0.5, 0.2)
    groupTransform = lastNode

    del lastNode
    # End of node "Transform"

    # Start of node "General_Transform"
    lastNode = app.createNode("net.sf.openfx.TransformPlugin", 1, group)
    lastNode.setScriptName("General_Transform")
    lastNode.setLabel("General_Transform")
    lastNode.setPosition(-29, -156)
    lastNode.setSize(100, 55)
    lastNode.setColor(0.7, 0.3, 0.1)
    groupGeneral_Transform = lastNode

    param = lastNode.getParam("translate")
    if param is not None:
        param.setValue(-718.5446808510638, 0)
        param.setValue(-445.9276595744681, 1)
        del param

    param = lastNode.getParam("rotate")
    if param is not None:
        param.setValue(-14.54763335977678, 0)
        del param

    param = lastNode.getParam("scale")
    if param is not None:
        param.setValue(0.122, 0)
        param.setValue(0.122, 1)
        del param

    param = lastNode.getParam("center")
    if param is not None:
        param.setValue(960, 0)
        param.setValue(540, 1)
        del param

    param = lastNode.getParam("transformCenterChanged")
    if param is not None:
        param.setValue(True)
        del param

    del lastNode
    # End of node "General_Transform"

    # Start of node "TextMerge"
    lastNode = app.createNode("net.sf.openfx.MergePlugin", 1, group)
    lastNode.setScriptName("TextMerge")
    lastNode.setLabel("TextMerge")
    lastNode.setPosition(1013, 379)
    lastNode.setSize(100, 45)
    lastNode.setColor(0.3, 0.37, 0.776)
    groupTextMerge = lastNode

    param = lastNode.getParam("userTextArea")
    if param is not None:
        param.setValue("<Natron>(over)</Natron>")
        del param

    del lastNode
    # End of node "TextMerge"

    # Start of node "Switch1"
    lastNode = app.createNode("net.sf.openfx.switchPlugin", 1, group)
    lastNode.setScriptName("Switch1")
    lastNode.setLabel("Switch1")
    lastNode.setPosition(-29, 455)
    lastNode.setSize(100, 29)
    lastNode.setColor(0.3, 0.37, 0.776)
    groupSwitch1 = lastNode

    param = lastNode.getParam("which")
    if param is not None:
        param.setValue(1, 0)
        del param

    del lastNode
    # End of node "Switch1"

    # Start of node "Backdrop1"
    lastNode = app.createNode("fr.inria.built-in.BackDrop", 1, group)
    lastNode.setScriptName("Backdrop1")
    lastNode.setLabel("Backdrop1")
    lastNode.setPosition(368, -630)
    lastNode.setSize(458, 498)
    lastNode.setColor(0.5098, 0.4431, 0.1647)
    groupBackdrop1 = lastNode

    param = lastNode.getParam("Label")
    if param is not None:
        param.setValue("<i><font size=\"30\" color=\"#000000\" face=\"Carlito\">Titles</font></i>")
        del param

    del lastNode
    # End of node "Backdrop1"

    # Start of node "title"
    lastNode = app.createNode("net.fxarena.openfx.Text", 6, group)
    lastNode.setScriptName("title")
    lastNode.setLabel("title")
    lastNode.setPosition(411, -368)
    lastNode.setSize(100, 29)
    lastNode.setColor(0.3, 0.5, 0.2)
    grouptitle = lastNode

    param = lastNode.getParam("center")
    if param is not None:
        param.setValue(1041, 0)
        param.setValue(161, 1)
        del param

    param = lastNode.getParam("interactive")
    if param is not None:
        param.setValue(False)
        del param

    param = lastNode.getParam("autoSize")
    if param is not None:
        param.setValue(True)
        del param

    param = lastNode.getParam("centerInteract")
    if param is not None:
        param.setValue(True)
        del param

    param = lastNode.getParam("markup")
    if param is not None:
        param.setValue(True)
        del param

    param = lastNode.getParam("text")
    if param is not None:
        param.setValue("Francico")
        del param

    param = lastNode.getParam("name")
    if param is not None:
        param.set("G/Great Vibes")
        del param

    param = lastNode.getParam("custom")
    if param is not None:
        param.setValue("/home/pancho/Documents/GitHub/videovina/static/fonts/great-vibes/Great Vibes.otf")
        del param

    param = lastNode.getParam("font")
    if param is not None:
        param.setValue("Great Vibes")
        del param

    param = lastNode.getParam("size")
    if param is not None:
        param.setValue(323, 0)
        del param

    param = lastNode.getParam("arcRadius")
    if param is not None:
        param.setValue(0, 0)
        del param

    del lastNode
    # End of node "title"

    # Start of node "subtitle"
    lastNode = app.createNode("net.fxarena.openfx.Text", 6, group)
    lastNode.setScriptName("subtitle")
    lastNode.setLabel("subtitle")
    lastNode.setPosition(687, -368)
    lastNode.setSize(100, 29)
    lastNode.setColor(0.3, 0.5, 0.2)
    groupsubtitle = lastNode

    param = lastNode.getParam("center")
    if param is not None:
        param.setValue(582, 0)
        param.setValue(187, 1)
        del param

    param = lastNode.getParam("autoSize")
    if param is not None:
        param.setValue(True)
        del param

    param = lastNode.getParam("text")
    if param is not None:
        param.setValue("Cuevas")
        del param

    param = lastNode.getParam("name")
    if param is not None:
        param.set("G/Great Vibes")
        del param

    param = lastNode.getParam("custom")
    if param is not None:
        param.setValue("/home/pancho/Documents/GitHub/videovina/static/fonts/great-vibes/Great Vibes.otf")
        del param

    param = lastNode.getParam("font")
    if param is not None:
        param.setValue("Great Vibes")
        del param

    param = lastNode.getParam("size")
    if param is not None:
        param.setValue(323, 0)
        del param

    del lastNode
    # End of node "subtitle"

    # Start of node "Merge3"
    lastNode = app.createNode("net.sf.openfx.MergePlugin", 1, group)
    lastNode.setScriptName("Merge3")
    lastNode.setLabel("Merge3")
    lastNode.setPosition(553, -245)
    lastNode.setSize(100, 45)
    lastNode.setColor(0.3, 0.37, 0.776)
    groupMerge3 = lastNode

    param = lastNode.getParam("userTextArea")
    if param is not None:
        param.setValue("<Natron>(over)</Natron>")
        del param

    del lastNode
    # End of node "Merge3"

    # Start of node "title_position"
    lastNode = app.createNode("net.sf.openfx.Position", 1, group)
    lastNode.setScriptName("title_position")
    lastNode.setLabel("title_position")
    lastNode.setPosition(411, -329)
    lastNode.setSize(100, 29)
    lastNode.setColor(0.7, 0.3, 0.1)
    grouptitle_position = lastNode

    param = lastNode.getParam("translate")
    if param is not None:
        param.setValue(309.5, 0)
        param.setValue(540, 1)
        del param

    del lastNode
    # End of node "title_position"

    # Start of node "subtitle_position"
    lastNode = app.createNode("net.sf.openfx.Position", 1, group)
    lastNode.setScriptName("subtitle_position")
    lastNode.setLabel("subtitle_position")
    lastNode.setPosition(687, -329)
    lastNode.setSize(100, 29)
    lastNode.setColor(0.7, 0.3, 0.1)
    groupsubtitle_position = lastNode

    param = lastNode.getParam("translate")
    if param is not None:
        param.setValue(490, 0)
        del param

    del lastNode
    # End of node "subtitle_position"

    # Start of node "Merge1"
    lastNode = app.createNode("net.sf.openfx.MergePlugin", 1, group)
    lastNode.setScriptName("Merge1")
    lastNode.setLabel("Merge1")
    lastNode.setPosition(-29, -253)
    lastNode.setSize(100, 55)
    lastNode.setColor(0.3, 0.37, 0.776)
    groupMerge1 = lastNode

    del lastNode
    # End of node "Merge1"

    # Start of node "ClampResolution"
    lastNode = app.createNode("fr.inria.built-in.Group", 1, group)
    lastNode.setScriptName("ClampResolution")
    lastNode.setLabel("ClampResolution")
    lastNode.setPosition(-29, 552)
    lastNode.setSize(100, 29)
    lastNode.setColor(0.451, 0.2431, 0.702)
    groupClampResolution = lastNode


    # Create the user parameters
    lastNode.control = lastNode.createPageParam("control", "Control")
    param = lastNode.createInt2DParam("resolution", "Resolution")
    param.setMinimum(0, 0)
    param.setMaximum(10000, 0)
    param.setDisplayMinimum(0, 0)
    param.setDisplayMaximum(10000, 0)
    param.setDefaultValue(0, 0)
    param.restoreDefaultValue(0)
    param.setMinimum(0, 1)
    param.setMaximum(10000, 1)
    param.setDisplayMinimum(0, 1)
    param.setDisplayMaximum(10000, 1)
    param.setDefaultValue(0, 1)
    param.restoreDefaultValue(1)

    # Add the param to the page
    lastNode.control.addParam(param)

    # Set param properties
    param.setHelp("")
    param.setAddNewLine(True)
    param.setAnimationEnabled(True)
    param.setValue(384, 0)
    param.setValue(216, 1)
    lastNode.resolution = param
    del param

    # Refresh the GUI with the newly created parameters
    lastNode.setPagesOrder(['control', 'Node', 'Settings'])
    lastNode.refreshUserParamsGUI()
    del lastNode
    # End of node "ClampResolution"

    groupgroup = groupClampResolution
    # Create all nodes in the group

    # Create the parameters of the group node the same way we did for all internal nodes
    lastNode = groupgroup
    lastNode.setColor(0.451, 0.2431, 0.702)

    # Create the user parameters
    lastNode.control = lastNode.createPageParam("control", "Control")
    param = lastNode.createInt2DParam("resolution", "Resolution")
    param.setMinimum(0, 0)
    param.setMaximum(10000, 0)
    param.setDisplayMinimum(0, 0)
    param.setDisplayMaximum(10000, 0)
    param.setDefaultValue(0, 0)
    param.restoreDefaultValue(0)
    param.setMinimum(0, 1)
    param.setMaximum(10000, 1)
    param.setDisplayMinimum(0, 1)
    param.setDisplayMaximum(10000, 1)
    param.setDefaultValue(0, 1)
    param.restoreDefaultValue(1)

    # Add the param to the page
    lastNode.control.addParam(param)

    # Set param properties
    param.setHelp("")
    param.setAddNewLine(True)
    param.setAnimationEnabled(True)
    param.setValue(384, 0)
    param.setValue(216, 1)
    lastNode.resolution = param
    del param

    # Refresh the GUI with the newly created parameters
    lastNode.setPagesOrder(['control', 'Node', 'Settings'])
    lastNode.refreshUserParamsGUI()
    del lastNode

    # Start of node "Output1"
    lastNode = app.createNode("fr.inria.built-in.Output", 1, groupgroup)
    lastNode.setLabel("Output")
    lastNode.setPosition(1046, 379)
    lastNode.setSize(100, 29)
    lastNode.setColor(0.7, 0.7, 0.7)
    groupgroupOutput1 = lastNode

    del lastNode
    # End of node "Output1"

    # Start of node "Input1"
    lastNode = app.createNode("fr.inria.built-in.Input", 1, groupgroup)
    lastNode.setScriptName("Input1")
    lastNode.setLabel("Input1")
    lastNode.setPosition(764, 82)
    lastNode.setSize(100, 29)
    lastNode.setColor(0.3, 0.5, 0.2)
    groupgroupInput1 = lastNode

    del lastNode
    # End of node "Input1"

    # Start of node "Crop1"
    lastNode = app.createNode("net.sf.openfx.CropPlugin", 1, groupgroup)
    lastNode.setScriptName("Crop1")
    lastNode.setLabel("Crop1")
    lastNode.setPosition(1316, 82)
    lastNode.setSize(100, 29)
    lastNode.setColor(0.7, 0.3, 0.1)
    groupgroupCrop1 = lastNode

    param = lastNode.getParam("NatronParamFormatChoice")
    if param is not None:
        param.set("PC_Video")
        del param

    param = lastNode.getParam("size")
    if param is not None:
        param.setValue(384, 0)
        param.setValue(216, 1)
        del param

    del lastNode
    # End of node "Crop1"

    # Start of node "Reformat1"
    lastNode = app.createNode("net.sf.openfx.Reformat", 1, groupgroup)
    lastNode.setScriptName("Reformat1")
    lastNode.setLabel("Reformat1")
    lastNode.setPosition(1316, 231)
    lastNode.setSize(100, 29)
    lastNode.setColor(0.7, 0.3, 0.1)
    groupgroupReformat1 = lastNode

    param = lastNode.getParam("useRoD")
    if param is not None:
        param.setValue(True)
        del param

    param = lastNode.getParam("reformatType")
    if param is not None:
        param.set("scale")
        del param

    param = lastNode.getParam("NatronParamFormatChoice")
    if param is not None:
        param.set("PC_Video")
        del param

    param = lastNode.getParam("boxSize")
    if param is not None:
        param.setValue(960, 0)
        param.setValue(540, 1)
        del param

    param = lastNode.getParam("boxFixed")
    if param is not None:
        param.setValue(True)
        del param

    del lastNode
    # End of node "Reformat1"

    # Start of node "Copy_RoD1"
    lastNode = app.createNode("fr.inria.built-in.Group", 1, groupgroup)
    lastNode.setScriptName("Copy_RoD1")
    lastNode.setLabel("Copy_RoD1")
    lastNode.setPosition(1046, 231)
    lastNode.setSize(100, 29)
    lastNode.setColor(0.7, 0.7, 0.7)
    groupgroupCopy_RoD1 = lastNode


    # Create the user parameters
    lastNode.custom = lastNode.createPageParam("custom", "Custom")
    param = lastNode.createBooleanParam("crop_format", "Crop Format")

    # Add the param to the page
    lastNode.custom.addParam(param)

    # Set param properties
    param.setHelp("")
    param.setAddNewLine(True)
    param.setAnimationEnabled(True)
    param.setValue(True)
    lastNode.crop_format = param
    del param

    # Refresh the GUI with the newly created parameters
    lastNode.setPagesOrder(['custom', 'Node', 'Settings'])
    lastNode.refreshUserParamsGUI()
    del lastNode
    # End of node "Copy_RoD1"

    groupgroupgroup = groupgroupCopy_RoD1
    # Create all nodes in the group

    # Create the parameters of the group node the same way we did for all internal nodes
    lastNode = groupgroupgroup
    lastNode.setColor(0.7, 0.7, 0.7)

    # Create the user parameters
    lastNode.custom = lastNode.createPageParam("custom", "Custom")
    param = lastNode.createBooleanParam("crop_format", "Crop Format")

    # Add the param to the page
    lastNode.custom.addParam(param)

    # Set param properties
    param.setHelp("")
    param.setAddNewLine(True)
    param.setAnimationEnabled(True)
    param.setValue(True)
    lastNode.crop_format = param
    del param

    # Refresh the GUI with the newly created parameters
    lastNode.setPagesOrder(['custom', 'Node', 'Settings'])
    lastNode.refreshUserParamsGUI()
    del lastNode

    # Start of node "Output1"
    lastNode = app.createNode("fr.inria.built-in.Output", 1, groupgroupgroup)
    lastNode.setLabel("Output")
    lastNode.setPosition(805, 302)
    lastNode.setSize(100, 29)
    lastNode.setColor(0.7, 0.7, 0.7)
    groupgroupgroupOutput1 = lastNode

    del lastNode
    # End of node "Output1"

    # Start of node "A"
    lastNode = app.createNode("fr.inria.built-in.Input", 1, groupgroupgroup)
    lastNode.setScriptName("A")
    lastNode.setLabel("A")
    lastNode.setPosition(1053, 75)
    lastNode.setSize(100, 29)
    lastNode.setColor(0.3, 0.5, 0.2)
    groupgroupgroupA = lastNode

    del lastNode
    # End of node "A"

    # Start of node "B"
    lastNode = app.createNode("fr.inria.built-in.Input", 1, groupgroupgroup)
    lastNode.setScriptName("B")
    lastNode.setLabel("B")
    lastNode.setPosition(805, 64)
    lastNode.setSize(100, 29)
    lastNode.setColor(0.3, 0.5, 0.2)
    groupgroupgroupB = lastNode

    del lastNode
    # End of node "B"

    # Start of node "Crop1"
    lastNode = app.createNode("net.sf.openfx.CropPlugin", 1, groupgroupgroup)
    lastNode.setScriptName("Crop1")
    lastNode.setLabel("Crop1")
    lastNode.setPosition(805, 186)
    lastNode.setSize(100, 29)
    lastNode.setColor(0.7, 0.3, 0.1)
    groupgroupgroupCrop1 = lastNode

    param = lastNode.getParam("NatronParamFormatChoice")
    if param is not None:
        param.set("PC_Video")
        del param

    param = lastNode.getParam("bottomLeft")
    if param is not None:
        param.setValue(163.6387002522554, 0)
        param.setValue(-369.2681906603295, 1)
        del param

    param = lastNode.getParam("size")
    if param is not None:
        param.setValue(2131.722747632546, 0)
        param.setValue(1529.649089837812, 1)
        del param

    param = lastNode.getParam("intersect")
    if param is not None:
        param.setValue(True)
        del param

    param = lastNode.getParam("blackOutside")
    if param is not None:
        param.setValue(True)
        del param

    del lastNode
    # End of node "Crop1"

    # Now that all nodes are created we can connect them together, restore expressions
    groupgroupgroupOutput1.connectInput(0, groupgroupgroupCrop1)
    groupgroupgroupCrop1.connectInput(0, groupgroupgroupB)

    param = groupgroupgroupCrop1.getParam("bottomLeft")
    param.setExpression("a = thisGroup.getInput(0)\n\nx = 0\ny = 0\nif a:\n\tx = a.getRegionOfDefinition(frame, 1).x1\n\ty = a.getRegionOfDefinition(frame, 1).y1\n\nif dimension == 0:\n\tret = x\nelse:\n\tret = y", True, 0)
    param.setExpression("a = thisGroup.getInput(0)\n\nx = 0\ny = 0\nif a:\n\tx = a.getRegionOfDefinition(frame, 1).x1\n\ty = a.getRegionOfDefinition(frame, 1).y1\n\nif dimension == 0:\n\tret = x\nelse:\n\tret = y", True, 1)
    del param
    param = groupgroupgroupCrop1.getParam("size")
    param.setExpression("a = thisGroup.getInput(0)\nb = thisGroup.getInput(0)\n\nx, y, w, h = 0,0,0,0\nif a:\n\tx = a.getRegionOfDefinition(frame, 1).x1\n\ty = a.getRegionOfDefinition(frame, 1).y1\n\tw = a.getRegionOfDefinition(frame, 1).x2\n\th = a.getRegionOfDefinition(frame, 1).y2\n\nif dimension == 0:\n\tret = w - x\nelse:\n\tret = h - y", True, 0)
    param.setExpression("a = thisGroup.getInput(0)\nb = thisGroup.getInput(0)\n\nx, y, w, h = 0,0,0,0\nif a:\n\tx = a.getRegionOfDefinition(frame, 1).x1\n\ty = a.getRegionOfDefinition(frame, 1).y1\n\tw = a.getRegionOfDefinition(frame, 1).x2\n\th = a.getRegionOfDefinition(frame, 1).y2\n\nif dimension == 0:\n\tret = w - x\nelse:\n\tret = h - y", True, 1)
    del param
    param = groupgroupgroupCrop1.getParam("intersect")
    param.setExpression("thisGroup.crop_format.get()", False, 0)
    del param


    # Start of node "Crop_Default"
    lastNode = app.createNode("net.sf.openfx.CropPlugin", 1, groupgroup)
    lastNode.setScriptName("Crop_Default")
    lastNode.setLabel("Crop Default")
    lastNode.setPosition(764, 231)
    lastNode.setSize(100, 29)
    lastNode.setColor(0.7, 0.3, 0.1)
    groupgroupCrop_Default = lastNode

    param = lastNode.getParam("extent")
    if param is not None:
        param.set("default")
        del param

    param = lastNode.getParam("NatronParamFormatChoice")
    if param is not None:
        param.set("PC_Video")
        del param

    del lastNode
    # End of node "Crop_Default"

    # Now that all nodes are created we can connect them together, restore expressions
    groupgroupOutput1.connectInput(0, groupgroupCopy_RoD1)
    groupgroupCrop1.connectInput(0, groupgroupInput1)
    groupgroupReformat1.connectInput(0, groupgroupCrop1)
    groupgroupCopy_RoD1.connectInput(0, groupgroupCrop_Default)
    groupgroupCopy_RoD1.connectInput(1, groupgroupReformat1)
    groupgroupCrop_Default.connectInput(0, groupgroupInput1)

    param = groupgroupCrop1.getParam("size")
    param.setExpression("ret = thisGroup.resolution.getValue(dimension)", False, 0)
    param.setExpression("ret = thisGroup.resolution.getValue(dimension)", False, 1)
    del param

    param = groupgroup.getParam("resolution")
    param.setExpression("scale = thisGroup.resolution_scale.get()\n\nw = 1920\nh = 1080\n\nif dimension == 0:\n\n\tret = w * scale\nelse:\n\tret = h * scale", True, 0)
    param.setExpression("scale = thisGroup.resolution_scale.get()\n\nw = 1920\nh = 1080\n\nif dimension == 0:\n\n\tret = w * scale\nelse:\n\tret = h * scale", True, 1)
    del param

    # Start of node "Transform1"
    lastNode = app.createNode("net.sf.openfx.TransformPlugin", 1, group)
    lastNode.setScriptName("Transform1")
    lastNode.setLabel("Transform1")
    lastNode.setPosition(395, 216)
    lastNode.setSize(100, 29)
    lastNode.setColor(0.7, 0.3, 0.1)
    groupTransform1 = lastNode

    param = lastNode.getParam("translate")
    if param is not None:
        param.setValue(0, 0)
        param.setValue(0, 1)
        del param

    param = lastNode.getParam("rotate")
    if param is not None:
        param.setValue(0, 0)
        del param

    param = lastNode.getParam("center")
    if param is not None:
        param.setValue(0, 0)
        param.setValue(0, 1)
        del param

    param = lastNode.getParam("transformCenterChanged")
    if param is not None:
        param.setValue(True)
        del param

    del lastNode
    # End of node "Transform1"

    # Start of node "Merge5"
    lastNode = app.createNode("net.sf.openfx.MergePlugin", 1, group)
    lastNode.setScriptName("Merge5")
    lastNode.setLabel("Merge5")
    lastNode.setPosition(395, 268)
    lastNode.setSize(100, 45)
    lastNode.setColor(0.3, 0.37, 0.776)
    groupMerge5 = lastNode

    param = lastNode.getParam("userTextArea")
    if param is not None:
        param.setValue("<Natron>(over)</Natron>")
        del param

    del lastNode
    # End of node "Merge5"

    # Start of node "Reformat3"
    lastNode = app.createNode("net.sf.openfx.Reformat", 1, group)
    lastNode.setScriptName("Reformat3")
    lastNode.setLabel("Reformat3")
    lastNode.setPosition(584, 279)
    lastNode.setSize(100, 29)
    lastNode.setColor(0.7, 0.3, 0.1)
    groupReformat3 = lastNode

    param = lastNode.getParam("reformatType")
    if param is not None:
        param.set("box")
        del param

    param = lastNode.getParam("NatronParamFormatChoice")
    if param is not None:
        param.set("PC_Video")
        del param

    param = lastNode.getParam("boxSize")
    if param is not None:
        param.setValue(384, 0)
        param.setValue(216, 1)
        del param

    param = lastNode.getParam("boxFixed")
    if param is not None:
        param.setValue(True)
        del param

    del lastNode
    # End of node "Reformat3"

    # Start of node "Backdrop2"
    lastNode = app.createNode("fr.inria.built-in.BackDrop", 1, group)
    lastNode.setScriptName("Backdrop2")
    lastNode.setLabel("Backdrop2")
    lastNode.setPosition(365, -92)
    lastNode.setSize(397, 653)
    lastNode.setColor(0.1451, 0.451, 0.451)
    groupBackdrop2 = lastNode

    param = lastNode.getParam("Label")
    if param is not None:
        param.setValue("<i><font size=\"7\" color=\"#000000\" face=\"Carlito\">Point de desplazamiento</font></i>")
        del param

    del lastNode
    # End of node "Backdrop2"

    # Start of node "scale_point"
    lastNode = app.createNode("net.sf.openfx.TransformPlugin", 1, group)
    lastNode.setScriptName("scale_point")
    lastNode.setLabel("scale_point")
    lastNode.setPosition(395, 174)
    lastNode.setSize(100, 29)
    lastNode.setColor(0.7, 0.3, 0.1)
    groupscale_point = lastNode

    param = lastNode.getParam("scale")
    if param is not None:
        param.setValue(0.2, 0)
        param.setValue(0.2, 1)
        del param

    param = lastNode.getParam("center")
    if param is not None:
        param.setValue(25.09144227457895, 0)
        param.setValue(24.3158515662731, 1)
        del param

    param = lastNode.getParam("transformCenterChanged")
    if param is not None:
        param.setValue(True)
        del param

    del lastNode
    # End of node "scale_point"

    # Start of node "letter_transform_2"
    lastNode = app.createNode("net.sf.openfx.TransformPlugin", 1, group)
    lastNode.setScriptName("letter_transform_2")
    lastNode.setLabel("letter_transform")
    lastNode.setPosition(395, 442)
    lastNode.setSize(100, 55)
    lastNode.setColor(0.7, 0.3, 0.1)
    groupletter_transform_2 = lastNode

    param = lastNode.getParam("translate")
    if param is not None:
        param.setValue(162.0943191489362, 0)
        param.setValue(94.07234042553193, 1)
        del param

    param = lastNode.getParam("rotate")
    if param is not None:
        param.setValue(-14.54763335977678, 0)
        del param

    param = lastNode.getParam("center")
    if param is not None:
        param.setValue(79.361, 0)
        param.setValue(0, 1)
        del param

    param = lastNode.getParam("transformCenterChanged")
    if param is not None:
        param.setValue(True)
        del param

    param = lastNode.getParam("interactive")
    if param is not None:
        param.setValue(False)
        del param

    param = lastNode.getParam("filter")
    if param is not None:
        param.set("bilinear")
        del param

    param = lastNode.getParam("shutter")
    if param is not None:
        param.setValue(0, 0)
        del param

    del lastNode
    # End of node "letter_transform_2"

    # Start of node "Constant2"
    lastNode = app.createNode("net.sf.openfx.ConstantPlugin", 1, group)
    lastNode.setScriptName("Constant2")
    lastNode.setLabel("Constant2")
    lastNode.setPosition(395, 48)
    lastNode.setSize(100, 29)
    lastNode.setColor(0.3, 0.5, 0.2)
    groupConstant2 = lastNode

    param = lastNode.getParam("NatronParamFormatChoice")
    if param is not None:
        param.set("PC_Video")
        del param

    param = lastNode.getParam("color")
    if param is not None:
        param.setValue(1, 1)
        param.setValue(0.002428215928375721, 2)
        param.setValue(1, 3)
        del param

    del lastNode
    # End of node "Constant2"

    # Start of node "NoOp1"
    lastNode = app.createNode("net.sf.openfx.NoOpPlugin", 2, group)
    lastNode.setScriptName("NoOp1")
    lastNode.setLabel("NoOp1")
    lastNode.setPosition(395, 132)
    lastNode.setSize(100, 29)
    lastNode.setColor(0.7, 0.7, 0.7)
    groupNoOp1 = lastNode

    param = lastNode.getParam("setFormat")
    if param is not None:
        param.setValue(True)
        del param

    param = lastNode.getParam("extent")
    if param is not None:
        param.set("size")
        del param

    param = lastNode.getParam("NatronParamFormatChoice")
    if param is not None:
        param.set("PC_Video")
        del param

    param = lastNode.getParam("size")
    if param is not None:
        param.setValue(50, 0)
        param.setValue(50, 1)
        del param

    del lastNode
    # End of node "NoOp1"

    # Start of node "Crop2"
    lastNode = app.createNode("net.sf.openfx.CropPlugin", 1, group)
    lastNode.setScriptName("Crop2")
    lastNode.setLabel("Crop2")
    lastNode.setPosition(395, 90)
    lastNode.setSize(100, 29)
    lastNode.setColor(0.7, 0.3, 0.1)
    groupCrop2 = lastNode

    param = lastNode.getParam("NatronParamFormatChoice")
    if param is not None:
        param.set("PC_Video")
        del param

    param = lastNode.getParam("size")
    if param is not None:
        param.setValue(50, 0)
        param.setValue(50, 1)
        del param

    del lastNode
    # End of node "Crop2"

    # Start of node "Switch2"
    lastNode = app.createNode("net.sf.openfx.switchPlugin", 1, group)
    lastNode.setScriptName("Switch2")
    lastNode.setLabel("Switch2")
    lastNode.setPosition(395, 386)
    lastNode.setSize(100, 29)
    lastNode.setColor(0.3, 0.37, 0.776)
    groupSwitch2 = lastNode

    param = lastNode.getParam("which")
    if param is not None:
        param.setValue(2, 0)
        del param

    del lastNode
    # End of node "Switch2"

    # Now that all nodes are created we can connect them together, restore expressions
    groupOutput1.connectInput(0, groupClampResolution)
    groupGeneral_Transform.connectInput(0, groupMerge1)
    groupSwitch1.connectInput(0, groupGeneral_Transform)
    groupSwitch1.connectInput(1, groupletter_transform_2)
    groupMerge3.connectInput(0, groupsubtitle_position)
    groupMerge3.connectInput(1, grouptitle_position)
    grouptitle_position.connectInput(0, grouptitle)
    groupsubtitle_position.connectInput(0, groupsubtitle)
    groupMerge1.connectInput(0, groupConstant1)
    groupMerge1.connectInput(1, groupMerge3)
    groupClampResolution.connectInput(0, groupSwitch1)
    groupTransform1.connectInput(0, groupscale_point)
    groupMerge5.connectInput(0, groupReformat3)
    groupMerge5.connectInput(1, groupTransform1)
    groupscale_point.connectInput(0, groupNoOp1)
    groupletter_transform_2.connectInput(0, groupSwitch2)
    groupNoOp1.connectInput(0, groupCrop2)
    groupCrop2.connectInput(0, groupConstant2)
    groupSwitch2.connectInput(1, groupMerge5)
    groupSwitch2.connectInput(2, groupTextMerge)

    param = groupGeneral_Transform.getParam("translate")
    param.setExpression("transform = thisGroup.getInput(0)\n\n# para la escale de resolucion\nscale = thisGroup.resolution_scale.get()\n\ntranslate = 0\ncenter = 0\nif transform:\n\ttranslate = transform.getParam(\'translate\').curve(frame, dimension)\n\tcenter = transform.getParam(\'center\').curve(frame, dimension)\n\nret = (translate * scale) + (center * scale) - center", True, 0)
    param.setExpression("transform = thisGroup.getInput(0)\n\n# para la escale de resolucion\nscale = thisGroup.resolution_scale.get()\n\ntranslate = 0\ncenter = 0\nif transform:\n\ttranslate = transform.getParam(\'translate\').curve(frame, dimension)\n\tcenter = transform.getParam(\'center\').curve(frame, dimension)\n\nret = (translate * scale) + (center * scale) - center", True, 1)
    del param
    param = groupGeneral_Transform.getParam("rotate")
    param.setExpression("transform = thisGroup.getInput(0)\n\nif transform:\n\tret = transform.getParam(\'rotate\').curve(frame)\nelse:\n\tret = 0", True, 0)
    del param
    param = groupGeneral_Transform.getParam("scale")
    param.setExpression("# si esta conectada la entrada Transform, obtiene la curva\ntransform = thisGroup.getInput(0)\n\n# para la escale de resolucion\nscale = thisGroup.resolution_scale.get()\n\nif transform:\n\tret = transform.getParam(\'scale\').curve(frame, dimension) * scale\nelse:\n\tret = 1", True, 0)
    param.setExpression("# si esta conectada la entrada Transform, obtiene la curva\ntransform = thisGroup.getInput(0)\n\n# para la escale de resolucion\nscale = thisGroup.resolution_scale.get()\n\nif transform:\n\tret = transform.getParam(\'scale\').curve(frame, dimension) * scale\nelse:\n\tret = 1", True, 1)
    del param
    param = groupGeneral_Transform.getParam("center")
    param.setExpression("transform = thisGroup.getInput(0)\n\ncenter = 0\nif transform:\n\tcenter = transform.getParam(\'center\').curve(frame, dimension)\n\nret = center", True, 0)
    param.setExpression("transform = thisGroup.getInput(0)\n\ncenter = 0\nif transform:\n\tcenter = transform.getParam(\'center\').curve(frame, dimension)\n\nret = center", True, 1)
    del param
    param = groupSwitch1.getParam("which")
    param.setExpression("if not thisGroup.display_param.getValue():\n\tret = 0\nelse: \n\tret = 1\n", True, 0)
    del param
    param = groupClampResolution.getParam("resolution")
    param.setExpression("scale = thisGroup.resolution_scale.get()\n\nw = 1920\nh = 1080\n\nif dimension == 0:\n\n\tret = w * scale\nelse:\n\tret = h * scale", True, 0)
    param.setExpression("scale = thisGroup.resolution_scale.get()\n\nw = 1920\nh = 1080\n\nif dimension == 0:\n\n\tret = w * scale\nelse:\n\tret = h * scale", True, 1)
    del param
    param = groupTransform1.getParam("translate")
    param.setExpression("translate = thisGroup.translate_param.get()\n\nif dimension == 0:\n\tret = translate * thisGroup.resolution_scale.get()\n\nelse:\n\tret = 0", True, 0)
    param.setExpression("translate = thisGroup.translate_param.get()\n\nif dimension == 0:\n\tret = translate * thisGroup.resolution_scale.get()\n\nelse:\n\tret = 0", True, 1)
    del param
    param = groupTransform1.getParam("rotate")
    param.setExpression("thisGroup.angle_param.get()", False, 0)
    del param
    param = groupTransform1.getParam("center")
    param.setExpression("translate = thisGroup.translate_param.get()\n\n\nif dimension == 0:\n\tret = -translate * thisGroup.resolution_scale.get()\n\nelse:\n\tret = 0", True, 0)
    param.setExpression("translate = thisGroup.translate_param.get()\n\n\nif dimension == 0:\n\tret = -translate * thisGroup.resolution_scale.get()\n\nelse:\n\tret = 0", True, 1)
    del param
    param = groupReformat3.getParam("boxSize")
    param.setExpression("if dimension == 0:\n\tret =1920 * thisGroup.resolution_scale.get()\nelse:\n\tret =1080 * thisGroup.resolution_scale.get()\n", True, 0)
    param.setExpression("if dimension == 0:\n\tret =1920 * thisGroup.resolution_scale.get()\nelse:\n\tret =1080 * thisGroup.resolution_scale.get()\n", True, 1)
    del param
    param = groupscale_point.getParam("scale")
    param.setExpression("thisGroup.resolution_scale.get()", False, 0)
    param.setExpression("thisGroup.resolution_scale.get()", False, 1)
    del param
    param = groupletter_transform_2.getParam("translate")
    param.setExpression("position = thisGroup.title_position.translate.curve( frame, dimension )\nresolution_scale = thisGroup.resolution_scale.get()\n\n# Transform general\nscale, center, translate = 0, 0, 0\ntransform = thisGroup.getInput(0)\nif transform:\n\tscale = transform.getParam(\'scale\').curve( frame, dimension ) * resolution_scale\n\tcenter = transform.getParam(\'center\').curve( frame, dimension )\n\ttranslate = transform.getParam(\'translate\').curve( frame, dimension )\t\n\ttranslate = ( translate * resolution_scale ) + ( center * resolution_scale ) - center\n# ---------------------------\n\nposition_added = position * scale\nnew_position = position_added + translate + ( center - ( center * scale ) )\n\nret = new_position", True, 0)
    param.setExpression("position = thisGroup.title_position.translate.curve( frame, dimension )\nresolution_scale = thisGroup.resolution_scale.get()\n\n# Transform general\nscale, center, translate = 0, 0, 0\ntransform = thisGroup.getInput(0)\nif transform:\n\tscale = transform.getParam(\'scale\').curve( frame, dimension ) * resolution_scale\n\tcenter = transform.getParam(\'center\').curve( frame, dimension )\n\ttranslate = transform.getParam(\'translate\').curve( frame, dimension )\t\n\ttranslate = ( translate * resolution_scale ) + ( center * resolution_scale ) - center\n# ---------------------------\n\nposition_added = position * scale\nnew_position = position_added + translate + ( center - ( center * scale ) )\n\nret = new_position", True, 1)
    del param
    param = groupletter_transform_2.getParam("rotate")
    param.setExpression("rotate = 0\ntransform = thisGroup.getInput(0)\nif transform:\n\trotate = transform.getParam(\'rotate\').curve( frame )\n\nret = rotate", True, 0)
    del param
    param = groupletter_transform_2.getParam("center")
    param.setExpression("position = thisGroup.title_position.translate.curve( frame, dimension )\nresolution_scale = thisGroup.resolution_scale.get()\n\n# Transform general\nscale, center = 0, 0\ntransform = thisGroup.getInput(0)\nif transform:\n\tscale = transform.getParam(\'scale\').curve( frame, dimension ) * resolution_scale\n\tcenter = transform.getParam(\'center\').curve( frame, dimension )\n# ---------------------------\n\nposition_added = position * scale\nnew_center = ( center * scale ) - position_added\n\nret = new_center", True, 0)
    param.setExpression("position = thisGroup.title_position.translate.curve( frame, dimension )\nresolution_scale = thisGroup.resolution_scale.get()\n\n# Transform general\nscale, center = 0, 0\ntransform = thisGroup.getInput(0)\nif transform:\n\tscale = transform.getParam(\'scale\').curve( frame, dimension ) * resolution_scale\n\tcenter = transform.getParam(\'center\').curve( frame, dimension )\n# ---------------------------\n\nposition_added = position * scale\nnew_center = ( center * scale ) - position_added\n\nret = new_center", True, 1)
    del param
    param = groupSwitch2.getParam("which")
    param.setExpression("thisGroup.display_param.getValue()", False, 0)
    del param

    try:
        extModule = sys.modules["VVTextExt"]
    except KeyError:
        extModule = None
    if extModule is not None and hasattr(extModule ,"createInstanceExt") and hasattr(extModule.createInstanceExt,"__call__"):
        extModule.createInstanceExt(app,group)
