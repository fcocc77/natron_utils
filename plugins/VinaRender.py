# -*- coding: utf-8 -*-
# DO NOT EDIT THIS FILE
# Natron PyPlug
# This file was automatically generated by Natron PyPlug exporter version 10.

# Hand-written code should be added in a separate file named VinaRenderExt.py
# See http://natron.readthedocs.org/en/master/devel/groups.html#adding-hand-written-code-callbacks-etc
# Note that Viewers are never exported

import NatronEngine
import sys

# Try to import the extensions file where callbacks and hand-written code should be located.
try:
    from VinaRenderExt import *
except ImportError:
    pass

def getPluginID():
    return "vv.vinarender"

def getLabel():
    return "VinaRender"

def getVersion():
    return 1

def getIconPath():
    return "VinaRender.png"

def getGrouping():
    return "videovina"

def createInstance(app,group):
    # Create all nodes in the group

    # Create the parameters of the group node the same way we did for all internal nodes
    lastNode = group
    lastNode.setColor(0.7, 0.7, 0.7)
    param = lastNode.getParam("onParamChanged")
    if param is not None:
        param.setValue("vinarender.main")
        del param


    # Create the user parameters
    lastNode.control = lastNode.createPageParam("control", "Control")
    param = lastNode.createOutputFileParam("filename", "Filename")
    param.setSequenceEnabled(False)

    # Add the param to the page
    lastNode.control.addParam(param)

    # Set param properties
    param.setHelp("")
    param.setAddNewLine(True)
    param.setValue("/mnt/server_01/templates/wedding_01/renders/prerender/ink_blot_01/ink_blot_01_###.jpg")
    lastNode.filename = param
    del param

    param = lastNode.createInt2DParam("resolutionboxSize", "Size")
    param.setDefaultValue(200, 0)
    param.restoreDefaultValue(0)
    param.setDefaultValue(200, 1)
    param.restoreDefaultValue(1)

    # Add the param to the page
    lastNode.control.addParam(param)

    # Set param properties
    param.setAddNewLine(True)
    param.setAnimationEnabled(False)
    param.setValue(1920, 0)
    param.setValue(1080, 1)
    lastNode.resolutionboxSize = param
    del param

    param = lastNode.createInt2DParam("range", "Frame Range")
    param.setDefaultValue(1, 0)
    param.restoreDefaultValue(0)
    param.setDefaultValue(1, 1)
    param.restoreDefaultValue(1)

    # Add the param to the page
    lastNode.control.addParam(param)

    # Set param properties
    param.setAddNewLine(True)
    param.setAnimationEnabled(False)
    param.setValue(2, 0)
    param.setValue(20, 1)
    lastNode.range = param
    del param

    param = lastNode.createIntParam("task_size", "Task Size")
    param.setMinimum(1, 0)
    param.setMaximum(100, 0)
    param.setDisplayMinimum(1, 0)
    param.setDisplayMaximum(100, 0)
    param.setDefaultValue(0, 0)
    param.restoreDefaultValue(0)

    # Add the param to the page
    lastNode.control.addParam(param)

    # Set param properties
    param.setHelp("")
    param.setAddNewLine(True)
    param.setAnimationEnabled(True)
    param.setValue(10, 0)
    lastNode.task_size = param
    del param

    param = lastNode.createButtonParam("render", "Render")

    # Add the param to the page
    lastNode.control.addParam(param)

    # Set param properties
    param.setHelp("")
    param.setAddNewLine(True)
    param.setEvaluateOnChange(False)
    lastNode.render = param
    del param

    # Refresh the GUI with the newly created parameters
    lastNode.setPagesOrder(['control', 'Node', 'Settings'])
    lastNode.refreshUserParamsGUI()
    del lastNode

    # Start of node "Output1"
    lastNode = app.createNode("fr.inria.built-in.Output", 1, group)
    lastNode.setLabel("Output")
    lastNode.setPosition(704, 406)
    lastNode.setSize(100, 29)
    lastNode.setColor(0.7, 0.7, 0.7)
    groupOutput1 = lastNode

    del lastNode
    # End of node "Output1"

    # Start of node "Input1"
    lastNode = app.createNode("fr.inria.built-in.Input", 1, group)
    lastNode.setScriptName("Input1")
    lastNode.setLabel("Input1")
    lastNode.setPosition(704, 125)
    lastNode.setSize(100, 29)
    lastNode.setColor(0.3, 0.5, 0.2)
    groupInput1 = lastNode

    del lastNode
    # End of node "Input1"

    # Start of node "reading"
    lastNode = app.createNode("fr.inria.built-in.Read", 1, group)
    lastNode.setScriptName("reading")
    lastNode.setLabel("reading")
    lastNode.setPosition(885, 266)
    lastNode.setSize(123, 76)
    lastNode.setColor(0.7, 0.7, 0.7)
    groupreading = lastNode

    param = lastNode.getParam("decodingPluginID")
    if param is not None:
        param.setValue("fr.inria.openfx.ReadOIIO")
        del param

    param = lastNode.getParam("filename")
    if param is not None:
        param.setValue("/mnt/server_01/templates/wedding_01/renders/prerender/ink_blot_01/ink_blot_01_###.jpg")
        del param

    param = lastNode.getParam("lastFrame")
    if param is not None:
        param.setValue(20, 0)
        del param

    param = lastNode.getParam("timeDomainUserEdited")
    if param is not None:
        param.setValue(True)
        del param

    param = lastNode.getParam("outputLayerChoice")
    if param is not None:
        param.setValue("Color.RGB")
        del param

    del lastNode
    # End of node "reading"

    # Start of node "frame_range"
    lastNode = app.createNode("net.sf.openfx.FrameRange", 1, group)
    lastNode.setScriptName("frame_range")
    lastNode.setLabel("frame_range")
    lastNode.setPosition(1119, 342)
    lastNode.setSize(100, 55)
    lastNode.setColor(0.7, 0.65, 0.35)
    groupframe_range = lastNode

    param = lastNode.getParam("frameRange")
    if param is not None:
        param.setValue(2, 0)
        param.setValue(20, 1)
        del param

    del lastNode
    # End of node "frame_range"

    # Start of node "resolution"
    lastNode = app.createNode("net.sf.openfx.Reformat", 1, group)
    lastNode.setScriptName("resolution")
    lastNode.setLabel("resolution")
    lastNode.setPosition(1364, 242)
    lastNode.setSize(100, 32)
    lastNode.setColor(0.7, 0.3, 0.1)
    groupresolution = lastNode

    param = lastNode.getParam("reformatType")
    if param is not None:
        param.set("box")
        del param

    param = lastNode.getParam("NatronParamFormatChoice")
    if param is not None:
        param.set("PC_Video")
        del param

    param = lastNode.getParam("boxSize")
    if param is not None:
        param.setValue(1920, 0)
        param.setValue(1080, 1)
        del param

    param = lastNode.getParam("boxFixed")
    if param is not None:
        param.setValue(True)
        del param

    del lastNode
    # End of node "resolution"

    # Now that all nodes are created we can connect them together, restore expressions
    groupOutput1.connectInput(0, groupreading)

    param = groupreading.getParam("filename")
    param.setExpression("thisGroup.filename.get()", False, 0)
    del param
    param = groupframe_range.getParam("frameRange")
    group.getParam("range").setAsAlias(param)
    del param
    param = groupresolution.getParam("boxSize")
    group.getParam("resolutionboxSize").setAsAlias(param)
    del param

    try:
        extModule = sys.modules["VinaRenderExt"]
    except KeyError:
        extModule = None
    if extModule is not None and hasattr(extModule ,"createInstanceExt") and hasattr(extModule.createInstanceExt,"__call__"):
        extModule.createInstanceExt(app,group)
