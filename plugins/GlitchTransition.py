# -*- coding: utf-8 -*-
# DO NOT EDIT THIS FILE
# Natron PyPlug
# This file was automatically generated by Natron PyPlug exporter version 10.

# Hand-written code should be added in a separate file named GlitchTransitionExt.py
# See http://natron.readthedocs.org/en/master/devel/groups.html#adding-hand-written-code-callbacks-etc
# Note that Viewers are never exported

import NatronEngine
import sys

# Try to import the extensions file where callbacks and hand-written code should be located.
try:
    from GlitchTransitionExt import *
except ImportError:
    pass

def getPluginID():
    return "vv.GlitchTransition"

def getLabel():
    return "GlitchTransition"

def getVersion():
    return 1

def getIconPath():
    return "Transition.png"

def getGrouping():
    return "videovina/Transitions"

def createInstance(app,group):
    # Create all nodes in the group

    # Create the parameters of the group node the same way we did for all internal nodes
    lastNode = group
    lastNode.setColor(0.7, 0.7, 0.7)
    param = lastNode.getParam("onParamChanged")
    if param is not None:
        param.setValue("glitch_transition.main")
        del param


    # Create the user parameters
    lastNode.control = lastNode.createPageParam("control", "Control")
    param = lastNode.createStringParam("state_label", "")
    param.setType(NatronEngine.StringParam.TypeEnum.eStringTypeLabel)
    param.setDefaultValue("- - - - - - - >    STATE :")
    param.restoreDefaultValue()

    # Add the param to the page
    lastNode.control.addParam(param)

    # Set param properties
    param.setAddNewLine(True)
    param.setEvaluateOnChange(False)
    param.setAnimationEnabled(False)
    lastNode.state_label = param
    del param

    param = lastNode.createChoiceParam("format", "Format")
    param.setDefaultValue(2)
    param.restoreDefaultValue()

    # Add the param to the page
    lastNode.control.addParam(param)

    # Set param properties
    param.setAddNewLine(True)
    param.setAnimationEnabled(True)
    lastNode.format = param
    del param

    param = lastNode.createChoiceParam("speed", "Speed")
    param.setDefaultValue(1)
    param.restoreDefaultValue()

    # Add the param to the page
    lastNode.control.addParam(param)

    # Set param properties
    param.setAddNewLine(False)
    param.setAnimationEnabled(True)
    lastNode.speed = param
    del param

    param = lastNode.createButtonParam("refresh", "Refresh")

    # Add the param to the page
    lastNode.control.addParam(param)

    # Set param properties
    param.setHelp("")
    param.setAddNewLine(False)
    param.setEvaluateOnChange(False)
    lastNode.refresh = param
    del param

    param = lastNode.createSeparatorParam("sep5", "")

    # Add the param to the page
    lastNode.control.addParam(param)

    # Set param properties
    param.setHelp("")
    param.setAddNewLine(True)
    param.setPersistent(False)
    param.setEvaluateOnChange(False)
    lastNode.sep5 = param
    del param

    param = lastNode.createStringParam("time_label", "")
    param.setType(NatronEngine.StringParam.TypeEnum.eStringTypeLabel)
    param.setDefaultValue("- - - - - - - >    TIME :")
    param.restoreDefaultValue()

    # Add the param to the page
    lastNode.control.addParam(param)

    # Set param properties
    param.setHelp("")
    param.setAddNewLine(True)
    param.setEvaluateOnChange(False)
    param.setAnimationEnabled(False)
    lastNode.time_label = param
    del param

    param = lastNode.createIntParam("start_frame", "Start Frame")
    param.setDisplayMinimum(0, 0)
    param.setDisplayMaximum(100, 0)
    param.setDefaultValue(0, 0)
    param.restoreDefaultValue(0)

    # Add the param to the page
    lastNode.control.addParam(param)

    # Set param properties
    param.setHelp("")
    param.setAddNewLine(True)
    param.setAnimationEnabled(True)
    lastNode.start_frame = param
    del param

    param = lastNode.createInt3DParam("durations", "Durations")
    param.setDisplayMinimum(0, 0)
    param.setDisplayMaximum(100, 0)
    param.setDefaultValue(0, 0)
    param.restoreDefaultValue(0)
    param.setDisplayMinimum(0, 1)
    param.setDisplayMaximum(100, 1)
    param.setDefaultValue(0, 1)
    param.restoreDefaultValue(1)
    param.setDisplayMinimum(0, 2)
    param.setDisplayMaximum(100, 2)
    param.setDefaultValue(0, 2)
    param.restoreDefaultValue(2)

    # Add the param to the page
    lastNode.control.addParam(param)

    # Set param properties
    param.setAddNewLine(False)
    param.setAnimationEnabled(True)
    param.setValue(150, 0)
    param.setValue(100, 1)
    param.setValue(50, 2)
    lastNode.durations = param
    del param

    param = lastNode.createSeparatorParam("sep6", "")

    # Add the param to the page
    lastNode.control.addParam(param)

    # Set param properties
    param.setHelp("")
    param.setAddNewLine(True)
    param.setPersistent(False)
    param.setEvaluateOnChange(False)
    lastNode.sep6 = param
    del param

    param = lastNode.createStringParam("settings_label", "")
    param.setType(NatronEngine.StringParam.TypeEnum.eStringTypeLabel)
    param.setDefaultValue("- - - - - - - >    SETTINGS :")
    param.restoreDefaultValue()

    # Add the param to the page
    lastNode.control.addParam(param)

    # Set param properties
    param.setHelp("")
    param.setAddNewLine(True)
    param.setEvaluateOnChange(False)
    param.setAnimationEnabled(False)
    lastNode.settings_label = param
    del param

    param = lastNode.createChoiceParam("direction", "Direction")
    entries = [ ("Left", ""),
    ("Right", ""),
    ("Up", ""),
    ("Down", "")]
    param.setOptions(entries)
    del entries

    # Add the param to the page
    lastNode.control.addParam(param)

    # Set param properties
    param.setHelp("")
    param.setAddNewLine(True)
    param.setAnimationEnabled(True)
    param.set("Right")
    lastNode.direction = param
    del param

    param = lastNode.createDoubleParam("noise_size", "Noise Size")
    param.setMinimum(0, 0)
    param.setMaximum(10000, 0)
    param.setDisplayMinimum(0, 0)
    param.setDisplayMaximum(1000, 0)

    # Add the param to the page
    lastNode.control.addParam(param)

    # Set param properties
    param.setHelp("")
    param.setAddNewLine(True)
    param.setAnimationEnabled(True)
    param.setValue(785, 0)
    lastNode.noise_size = param
    del param

    param = lastNode.createDoubleParam("lacunarity", "Noise Lacunarity")
    param.setMinimum(1, 0)
    param.setMaximum(10, 0)
    param.setDisplayMinimum(1, 0)
    param.setDisplayMaximum(10, 0)

    # Add the param to the page
    lastNode.control.addParam(param)

    # Set param properties
    param.setHelp("")
    param.setAddNewLine(False)
    param.setAnimationEnabled(True)
    param.setValue(3, 0)
    lastNode.lacunarity = param
    del param

    param = lastNode.createDoubleParam("evolution", "Noise Evolution")
    param.setMinimum(0, 0)
    param.setMaximum(1, 0)
    param.setDisplayMinimum(0, 0)
    param.setDisplayMaximum(1, 0)

    # Add the param to the page
    lastNode.control.addParam(param)

    # Set param properties
    param.setHelp("")
    param.setAddNewLine(True)
    param.setAnimationEnabled(True)
    param.setValue(0.043, 0)
    lastNode.evolution = param
    del param

    param = lastNode.createDoubleParam("dir_blur", "Directional Blur")
    param.setMinimum(-2147483648, 0)
    param.setMaximum(2147483647, 0)
    param.setDisplayMinimum(0, 0)
    param.setDisplayMaximum(100, 0)

    # Add the param to the page
    lastNode.control.addParam(param)

    # Set param properties
    param.setHelp("")
    param.setAddNewLine(True)
    param.setAnimationEnabled(True)
    param.setValue(37.6, 0)
    lastNode.dir_blur = param
    del param

    param = lastNode.createDoubleParam("crushed", "Crushed")
    param.setMinimum(0, 0)
    param.setMaximum(1, 0)
    param.setDisplayMinimum(0, 0)
    param.setDisplayMaximum(1, 0)

    # Add the param to the page
    lastNode.control.addParam(param)

    # Set param properties
    param.setHelp("")
    param.setAddNewLine(True)
    param.setAnimationEnabled(True)
    param.setValue(0.584, 0)
    lastNode.crushed = param
    del param

    param = lastNode.createSeparatorParam("sep7", "")

    # Add the param to the page
    lastNode.control.addParam(param)

    # Set param properties
    param.setHelp("")
    param.setAddNewLine(True)
    param.setPersistent(False)
    param.setEvaluateOnChange(False)
    lastNode.sep7 = param
    del param

    param = lastNode.createStringParam("prerender_label", "")
    param.setType(NatronEngine.StringParam.TypeEnum.eStringTypeLabel)
    param.setDefaultValue("- - - - - - - >    PRE-RENDER :")
    param.restoreDefaultValue()

    # Add the param to the page
    lastNode.control.addParam(param)

    # Set param properties
    param.setHelp("")
    param.setAddNewLine(True)
    param.setEvaluateOnChange(False)
    param.setAnimationEnabled(False)
    lastNode.prerender_label = param
    del param

    param = lastNode.createStringParam("prefix", "Prefix")
    param.setType(NatronEngine.StringParam.TypeEnum.eStringTypeDefault)

    # Add the param to the page
    lastNode.control.addParam(param)

    # Set param properties
    param.setAddNewLine(True)
    param.setAnimationEnabled(True)
    param.setValue("glitch_transition")
    lastNode.prefix = param
    del param

    param = lastNode.createBooleanParam("prerender_read", "Prerender Read")

    # Add the param to the page
    lastNode.control.addParam(param)

    # Set param properties
    param.setHelp("")
    param.setAddNewLine(False)
    param.setAnimationEnabled(True)
    lastNode.prerender_read = param
    del param

    param = lastNode.createBooleanParam("current_state", "Current State")

    # Add the param to the page
    lastNode.control.addParam(param)

    # Set param properties
    param.setAddNewLine(False)
    param.setAnimationEnabled(True)
    lastNode.current_state = param
    del param

    param = lastNode.createButtonParam("render", "Render")

    # Add the param to the page
    lastNode.control.addParam(param)

    # Set param properties
    param.setHelp("")
    param.setAddNewLine(False)
    param.setEvaluateOnChange(False)
    lastNode.render = param
    del param

    # Refresh the GUI with the newly created parameters
    lastNode.setPagesOrder(['control', 'Node', 'Settings'])
    lastNode.refreshUserParamsGUI()
    del lastNode

    # Start of node "Output1"
    lastNode = app.createNode("fr.inria.built-in.Output", 1, group)
    lastNode.setLabel("Output")
    lastNode.setPosition(-1276, 1857)
    lastNode.setSize(104, 30)
    lastNode.setColor(0.7, 0.7, 0.7)
    groupOutput1 = lastNode

    del lastNode
    # End of node "Output1"

    # Start of node "A"
    lastNode = app.createNode("fr.inria.built-in.Input", 1, group)
    lastNode.setScriptName("A")
    lastNode.setLabel("A")
    lastNode.setPosition(-806, -1214)
    lastNode.setSize(104, 30)
    lastNode.setColor(0.3, 0.5, 0.2)
    groupA = lastNode

    del lastNode
    # End of node "A"

    # Start of node "B"
    lastNode = app.createNode("fr.inria.built-in.Input", 1, group)
    lastNode.setScriptName("B")
    lastNode.setLabel("B")
    lastNode.setPosition(-176, -1216)
    lastNode.setSize(104, 30)
    lastNode.setColor(0.3, 0.5, 0.2)
    groupB = lastNode

    del lastNode
    # End of node "B"

    # Start of node "lens_distort"
    lastNode = app.createNode("net.sf.openfx.LensDistortion", 4, group)
    lastNode.setScriptName("lens_distort")
    lastNode.setLabel("lens_distort")
    lastNode.setPosition(-176, 335)
    lastNode.setSize(104, 32)
    lastNode.setColor(0.7, 0.3, 0.1)
    grouplens_distort = lastNode

    param = lastNode.getParam("NatronParamFormatChoice")
    if param is not None:
        param.set("PC_Video")
        del param

    param = lastNode.getParam("k1")
    if param is not None:
        param.setValueAtTime(0, 1, 0)
        param.setValueAtTime(0.2, 51, 0)
        param.setValueAtTime(0, 101, 0)
        del param

    param = lastNode.getParam("center")
    if param is not None:
        param.setValue(1, 0)
        del param

    del lastNode
    # End of node "lens_distort"

    # Start of node "KeyMix2"
    lastNode = app.createNode("net.sf.openfx.KeyMix", 1, group)
    lastNode.setScriptName("KeyMix2")
    lastNode.setLabel("KeyMix2")
    lastNode.setPosition(-164, 476)
    lastNode.setSize(80, 32)
    lastNode.setColor(0.3, 0.37, 0.776)
    groupKeyMix2 = lastNode

    param = lastNode.getParam("enableMask_Mask")
    if param is not None:
        param.setValue(True)
        del param

    del lastNode
    # End of node "KeyMix2"

    # Start of node "Grade6"
    lastNode = app.createNode("net.sf.openfx.GradePlugin", 2, group)
    lastNode.setScriptName("Grade6")
    lastNode.setLabel("Grade6")
    lastNode.setPosition(1122, -1616)
    lastNode.setSize(104, 32)
    lastNode.setColor(0.48, 0.66, 1)
    groupGrade6 = lastNode

    param = lastNode.getParam("NatronOfxParamProcessA")
    if param is not None:
        param.setValue(True)
        del param

    param = lastNode.getParam("whitePoint")
    if param is not None:
        param.setValue(0.06, 0)
        param.setValue(0.06, 1)
        param.setValue(0.06, 2)
        param.setValue(0.06, 3)
        del param

    param = lastNode.getParam("clampWhite")
    if param is not None:
        param.setValue(True)
        del param

    del lastNode
    # End of node "Grade6"

    # Start of node "Merge5"
    lastNode = app.createNode("net.sf.openfx.MergePlugin", 1, group)
    lastNode.setScriptName("Merge5")
    lastNode.setLabel("Merge5")
    lastNode.setPosition(-176, 1019)
    lastNode.setSize(104, 55)
    lastNode.setColor(0.3, 0.37, 0.776)
    groupMerge5 = lastNode

    param = lastNode.getParam("mix")
    if param is not None:
        param.setValueAtTime(0, 0, 0)
        param.setValueAtTime(0.499, 49, 0)
        param.setValueAtTime(0, 99, 0)
        del param

    del lastNode
    # End of node "Merge5"

    # Start of node "crop_b"
    lastNode = app.createNode("net.sf.openfx.CropPlugin", 1, group)
    lastNode.setScriptName("crop_b")
    lastNode.setLabel("crop_b")
    lastNode.setPosition(-176, 1459)
    lastNode.setSize(104, 32)
    lastNode.setColor(0.7, 0.3, 0.1)
    groupcrop_b = lastNode

    param = lastNode.getParam("NatronParamFormatChoice")
    if param is not None:
        param.set("PC_Video")
        del param

    del lastNode
    # End of node "crop_b"

    # Start of node "ChromaticAberration4"
    lastNode = app.createNode("vv.ChromaticAberration", 1, group)
    lastNode.setScriptName("ChromaticAberration4")
    lastNode.setLabel("ChromaticAberration4")
    lastNode.setPosition(-176, 1287)
    lastNode.setSize(104, 55)
    lastNode.setColor(0.7, 0.7, 0.7)
    groupChromaticAberration4 = lastNode

    param = lastNode.getParam("onParamChanged")
    if param is not None:
        param.setValue("chromatic_aberration.main")
        del param


    # Create the user parameters
    lastNode.control = lastNode.createPageParam("control", "Control")
    param = lastNode.createStringParam("state_label", "State")
    param.setType(NatronEngine.StringParam.TypeEnum.eStringTypeLabel)
    param.setDefaultValue("- - - - - - - >    STATE :")
    param.restoreDefaultValue()

    # Add the param to the page
    lastNode.control.addParam(param)

    # Set param properties
    param.setHelp("")
    param.setAddNewLine(True)
    param.setEvaluateOnChange(False)
    param.setAnimationEnabled(False)
    param.setEnabled(False, 0)
    lastNode.state_label = param
    del param

    param = lastNode.createChoiceParam("format", "Format")
    entries = [ ("Quarter HD - 480 x 270", ""),
    ("Half HD - 960 x 540", ""),
    ("Full HD - 1920 x 1080", ""),
    ("4K - 3840 x 2160", "")]
    param.setOptions(entries)
    del entries
    param.setDefaultValue("Full HD - 1920 x 1080")
    param.restoreDefaultValue()

    # Add the param to the page
    lastNode.control.addParam(param)

    # Set param properties
    param.setHelp("")
    param.setAddNewLine(True)
    param.setAnimationEnabled(True)
    param.set("Full HD - 1920 x 1080")
    param.setEnabled(False, 0)
    lastNode.format = param
    del param

    param = lastNode.createChoiceParam("speed", "Speed")
    entries = [ ("Slow", ""),
    ("Normal", ""),
    ("Fast", "")]
    param.setOptions(entries)
    del entries
    param.setDefaultValue("Normal")
    param.restoreDefaultValue()

    # Add the param to the page
    lastNode.control.addParam(param)

    # Set param properties
    param.setHelp("")
    param.setAddNewLine(False)
    param.setAnimationEnabled(True)
    param.setEnabled(False, 0)
    lastNode.speed = param
    del param

    param = lastNode.createButtonParam("link", "Link To Parent")

    # Add the param to the page
    lastNode.control.addParam(param)

    # Set param properties
    param.setHelp("")
    param.setAddNewLine(False)
    param.setEvaluateOnChange(False)
    lastNode.link = param
    del param

    param = lastNode.createButtonParam("refresh", "Refresh")

    # Add the param to the page
    lastNode.control.addParam(param)

    # Set param properties
    param.setHelp("")
    param.setAddNewLine(False)
    param.setEvaluateOnChange(False)
    lastNode.refresh = param
    del param

    param = lastNode.createSeparatorParam("sep5", "")

    # Add the param to the page
    lastNode.control.addParam(param)

    # Set param properties
    param.setHelp("")
    param.setAddNewLine(True)
    param.setPersistent(False)
    param.setEvaluateOnChange(False)
    lastNode.sep5 = param
    del param

    param = lastNode.createStringParam("time_label", "")
    param.setType(NatronEngine.StringParam.TypeEnum.eStringTypeLabel)
    param.setDefaultValue("- - - - - - - >    TIME :")
    param.restoreDefaultValue()

    # Add the param to the page
    lastNode.control.addParam(param)

    # Set param properties
    param.setHelp("")
    param.setAddNewLine(True)
    param.setEvaluateOnChange(False)
    param.setAnimationEnabled(False)
    lastNode.time_label = param
    del param

    param = lastNode.createIntParam("duration_percent", "Duration Percent %")
    param.setMinimum(0, 0)
    param.setMaximum(100, 0)
    param.setDisplayMinimum(0, 0)
    param.setDisplayMaximum(100, 0)
    param.setDefaultValue(0, 0)
    param.restoreDefaultValue(0)

    # Add the param to the page
    lastNode.control.addParam(param)

    # Set param properties
    param.setHelp("")
    param.setAddNewLine(True)
    param.setAnimationEnabled(True)
    param.setValue(100, 0)
    lastNode.duration_percent = param
    del param

    param = lastNode.createInt3DParam("durations", "Durations")
    param.setDisplayMinimum(0, 0)
    param.setDisplayMaximum(100, 0)
    param.setDefaultValue(0, 0)
    param.restoreDefaultValue(0)
    param.setDisplayMinimum(0, 1)
    param.setDisplayMaximum(100, 1)
    param.setDefaultValue(0, 1)
    param.restoreDefaultValue(1)
    param.setDisplayMinimum(0, 2)
    param.setDisplayMaximum(100, 2)
    param.setDefaultValue(0, 2)
    param.restoreDefaultValue(2)

    # Add the param to the page
    lastNode.control.addParam(param)

    # Set param properties
    param.setHelp("")
    param.setAddNewLine(False)
    param.setAnimationEnabled(True)
    param.setValue(150, 0)
    param.setValue(100, 1)
    param.setValue(50, 2)
    param.setEnabled(False, 0)
    param.setEnabled(False, 1)
    param.setEnabled(False, 2)
    lastNode.durations = param
    del param

    param = lastNode.createIntParam("transition_duration", "Transition Duration")
    param.setMinimum(0, 0)
    param.setMaximum(100, 0)
    param.setDisplayMinimum(0, 0)
    param.setDisplayMaximum(100, 0)
    param.setDefaultValue(0, 0)
    param.restoreDefaultValue(0)

    # Add the param to the page
    lastNode.control.addParam(param)

    # Set param properties
    param.setHelp("")
    param.setAddNewLine(True)
    param.setAnimationEnabled(True)
    param.setValue(100, 0)
    lastNode.transition_duration = param
    del param

    param = lastNode.createSeparatorParam("sep6", "")

    # Add the param to the page
    lastNode.control.addParam(param)

    # Set param properties
    param.setHelp("")
    param.setAddNewLine(True)
    param.setPersistent(False)
    param.setEvaluateOnChange(False)
    lastNode.sep6 = param
    del param

    param = lastNode.createStringParam("settings_label", "")
    param.setType(NatronEngine.StringParam.TypeEnum.eStringTypeLabel)
    param.setDefaultValue("- - - - - - - >    SETTINGS :")
    param.restoreDefaultValue()

    # Add the param to the page
    lastNode.control.addParam(param)

    # Set param properties
    param.setHelp("")
    param.setAddNewLine(True)
    param.setEvaluateOnChange(False)
    param.setAnimationEnabled(False)
    lastNode.settings_label = param
    del param

    param = lastNode.createChoiceParam("orientation", "Orientation")
    entries = [ ("Horizontal", ""),
    ("Vertical", "")]
    param.setOptions(entries)
    del entries

    # Add the param to the page
    lastNode.control.addParam(param)

    # Set param properties
    param.setHelp("")
    param.setAddNewLine(True)
    param.setAnimationEnabled(True)
    lastNode.orientation = param
    del param

    param = lastNode.createBooleanParam("with_animation", "With Animation")

    # Add the param to the page
    lastNode.control.addParam(param)

    # Set param properties
    param.setHelp("")
    param.setAddNewLine(False)
    param.setAnimationEnabled(True)
    param.setValue(True)
    lastNode.with_animation = param
    del param

    param = lastNode.createBooleanParam("reverse_separation", "Reverse Separation")

    # Add the param to the page
    lastNode.control.addParam(param)

    # Set param properties
    param.setHelp("")
    param.setAddNewLine(False)
    param.setAnimationEnabled(True)
    param.setValue(True)
    lastNode.reverse_separation = param
    del param

    param = lastNode.createIntParam("separation", "Separation")
    param.setMinimum(0, 0)
    param.setDisplayMinimum(0, 0)
    param.setDisplayMaximum(10, 0)
    param.setDefaultValue(0, 0)
    param.restoreDefaultValue(0)

    # Add the param to the page
    lastNode.control.addParam(param)

    # Set param properties
    param.setHelp("")
    param.setAddNewLine(True)
    param.setAnimationEnabled(True)
    param.setValue(10, 0)
    lastNode.separation = param
    del param

    # Refresh the GUI with the newly created parameters
    lastNode.setPagesOrder(['control', 'Node', 'Settings'])
    lastNode.refreshUserParamsGUI()
    del lastNode
    # End of node "ChromaticAberration4"

    # Start of node "Read7"
    lastNode = app.createNode("fr.inria.built-in.Read", 1, group)
    lastNode.setScriptName("Read7")
    lastNode.setLabel("Read7")
    lastNode.setPosition(1110, -1739)
    lastNode.setSize(128, 78)
    lastNode.setColor(0.7, 0.7, 0.7)
    groupRead7 = lastNode

    param = lastNode.getParam("decodingPluginID")
    if param is not None:
        param.setValue("fr.inria.openfx.ReadOIIO")
        del param

    param = lastNode.getParam("filename")
    if param is not None:
        param.setValue("[Project]/../assets/glitchs/glitch_10/glitch_10_###.jpg")
        del param

    param = lastNode.getParam("before")
    if param is not None:
        param.set("loop")
        del param

    param = lastNode.getParam("after")
    if param is not None:
        param.set("loop")
        del param

    param = lastNode.getParam("filePremult")
    if param is not None:
        param.set("opaque")
        del param

    param = lastNode.getParam("outputPremult")
    if param is not None:
        param.set("opaque")
        del param

    param = lastNode.getParam("outputComponents")
    if param is not None:
        param.set("RGB")
        del param

    param = lastNode.getParam("ParamExistingInstance")
    if param is not None:
        param.setValue(True)
        del param

    param = lastNode.getParam("outputLayerChoice")
    if param is not None:
        param.setValue("Color.RGB")
        del param

    param = lastNode.getParam("ocioInputSpace")
    if param is not None:
        param.setValue("sRGB")
        del param

    del lastNode
    # End of node "Read7"

    # Start of node "mix_transform"
    lastNode = app.createNode("net.sf.openfx.TransformPlugin", 1, group)
    lastNode.setScriptName("mix_transform")
    lastNode.setLabel("mix_transform")
    lastNode.setPosition(198, 335)
    lastNode.setSize(104, 32)
    lastNode.setColor(0.7, 0.3, 0.1)
    groupmix_transform = lastNode

    param = lastNode.getParam("scale")
    if param is not None:
        param.setValueAtTime(1, 1, 0)
        param.setValueAtTime(1.1, 51, 0)
        param.setValueAtTime(1, 101, 0)
        param.setValueAtTime(1, 1, 1)
        param.setValueAtTime(1.1, 51, 1)
        param.setValueAtTime(1, 101, 1)
        del param

    param = lastNode.getParam("transformCenterChanged")
    if param is not None:
        param.setValue(True)
        del param

    del lastNode
    # End of node "mix_transform"

    # Start of node "crop_a"
    lastNode = app.createNode("net.sf.openfx.CropPlugin", 1, group)
    lastNode.setScriptName("crop_a")
    lastNode.setLabel("crop_a")
    lastNode.setPosition(-176, 52)
    lastNode.setSize(104, 32)
    lastNode.setColor(0.7, 0.3, 0.1)
    groupcrop_a = lastNode

    param = lastNode.getParam("NatronParamFormatChoice")
    if param is not None:
        param.set("PC_Video")
        del param

    del lastNode
    # End of node "crop_a"

    # Start of node "KeyMix3"
    lastNode = app.createNode("net.sf.openfx.KeyMix", 1, group)
    lastNode.setScriptName("KeyMix3")
    lastNode.setLabel("KeyMix3")
    lastNode.setPosition(-164, -429)
    lastNode.setSize(80, 32)
    lastNode.setColor(0.3, 0.37, 0.776)
    groupKeyMix3 = lastNode

    param = lastNode.getParam("enableMask_Mask")
    if param is not None:
        param.setValue(True)
        del param

    param = lastNode.getParam("maskChannel_Mask")
    if param is not None:
        param.set("uk.co.thefoundry.OfxImagePlaneColour.B")
        del param

    del lastNode
    # End of node "KeyMix3"

    # Start of node "noise"
    lastNode = app.createNode("net.sf.openfx.SeNoise", 1, group)
    lastNode.setScriptName("noise")
    lastNode.setLabel("noise")
    lastNode.setPosition(587, -1147)
    lastNode.setSize(80, 32)
    lastNode.setColor(0.75, 0.75, 0.75)
    groupnoise = lastNode

    param = lastNode.getParam("noiseSize")
    if param is not None:
        param.setValue(785, 0)
        param.setValue(785, 1)
        del param

    param = lastNode.getParam("noiseZSlope")
    if param is not None:
        param.setValue(0.0043, 0)
        del param

    param = lastNode.getParam("fbmLacunarity")
    if param is not None:
        param.setValue(3, 0)
        del param

    param = lastNode.getParam("transformTranslate")
    if param is not None:
        param.setValueAtTime(0, 1, 0)
        param.setValueAtTime(432.0000000000001, 36, 0)
        param.setValueAtTime(2448, 66, 0)
        param.setValueAtTime(2880, 101, 0)
        del param

    param = lastNode.getParam("transformScale")
    if param is not None:
        param.setValue(0.416, 1)
        del param

    param = lastNode.getParam("transformCenter")
    if param is not None:
        param.setValue(0, 0)
        param.setValue(0, 1)
        del param

    param = lastNode.getParam("transformCenterChanged")
    if param is not None:
        param.setValue(True)
        del param

    del lastNode
    # End of node "noise"

    # Start of node "noise_keyer"
    lastNode = app.createNode("net.sf.openfx.KeyerPlugin", 1, group)
    lastNode.setScriptName("noise_keyer")
    lastNode.setLabel("noise_keyer")
    lastNode.setPosition(575, -1105)
    lastNode.setSize(104, 55)
    lastNode.setColor(0, 1, 0)
    groupnoise_keyer = lastNode

    param = lastNode.getParam("softnessLower")
    if param is not None:
        param.setValue(0, 0)
        del param

    param = lastNode.getParam("toleranceLower")
    if param is not None:
        param.setValueAtTime(-0.8, 1, 0)
        param.setValueAtTime(-0.71, 36, 0)
        param.setValueAtTime(-0.29, 66, 0)
        param.setValueAtTime(-0.2, 101, 0)
        del param

    del lastNode
    # End of node "noise_keyer"

    # Start of node "noise_blur"
    lastNode = app.createNode("net.sf.cimg.CImgBlur", 4, group)
    lastNode.setScriptName("noise_blur")
    lastNode.setLabel("noise_blur")
    lastNode.setPosition(575, -1040)
    lastNode.setSize(104, 30)
    lastNode.setColor(0.8, 0.5, 0.3)
    groupnoise_blur = lastNode

    param = lastNode.getParam("size")
    if param is not None:
        param.setValue(37.6, 0)
        del param

    param = lastNode.getParam("boundary")
    if param is not None:
        param.set("nearest")
        del param

    del lastNode
    # End of node "noise_blur"

    # Start of node "duplicate_a"
    lastNode = app.createNode("net.sf.openfx.TransformPlugin", 1, group)
    lastNode.setScriptName("duplicate_a")
    lastNode.setLabel("duplicate_a")
    lastNode.setPosition(-621, -1052)
    lastNode.setSize(104, 30)
    lastNode.setColor(0.7, 0.3, 0.1)
    groupduplicate_a = lastNode

    param = lastNode.getParam("translate")
    if param is not None:
        param.setValue(-1920, 0)
        del param

    param = lastNode.getParam("scale")
    if param is not None:
        param.setValue(-1, 0)
        del param

    del lastNode
    # End of node "duplicate_a"

    # Start of node "duplicate_b"
    lastNode = app.createNode("net.sf.openfx.TransformPlugin", 1, group)
    lastNode.setScriptName("duplicate_b")
    lastNode.setLabel("duplicate_b")
    lastNode.setPosition(56, -1074)
    lastNode.setSize(104, 30)
    lastNode.setColor(0.7, 0.3, 0.1)
    groupduplicate_b = lastNode

    param = lastNode.getParam("translate")
    if param is not None:
        param.setValue(1920, 0)
        del param

    param = lastNode.getParam("scale")
    if param is not None:
        param.setValue(-1, 0)
        del param

    del lastNode
    # End of node "duplicate_b"

    # Start of node "Merge1"
    lastNode = app.createNode("net.sf.openfx.MergePlugin", 1, group)
    lastNode.setScriptName("Merge1")
    lastNode.setLabel("Merge1")
    lastNode.setPosition(-806, -882)
    lastNode.setSize(104, 50)
    lastNode.setColor(0.3, 0.37, 0.776)
    groupMerge1 = lastNode

    param = lastNode.getParam("userTextArea")
    if param is not None:
        param.setValue("<Natron>(over)</Natron>")
        del param

    del lastNode
    # End of node "Merge1"

    # Start of node "Dot3"
    lastNode = app.createNode("fr.inria.built-in.Dot", 1, group)
    lastNode.setScriptName("Dot3")
    lastNode.setLabel("Dot3")
    lastNode.setPosition(-761, -1043)
    lastNode.setSize(15, 15)
    lastNode.setColor(0.7, 0.7, 0.7)
    groupDot3 = lastNode

    del lastNode
    # End of node "Dot3"

    # Start of node "Dot4"
    lastNode = app.createNode("fr.inria.built-in.Dot", 1, group)
    lastNode.setScriptName("Dot4")
    lastNode.setLabel("Dot4")
    lastNode.setPosition(-131, -1065)
    lastNode.setSize(15, 15)
    lastNode.setColor(0.7, 0.7, 0.7)
    groupDot4 = lastNode

    del lastNode
    # End of node "Dot4"

    # Start of node "Merge2"
    lastNode = app.createNode("net.sf.openfx.MergePlugin", 1, group)
    lastNode.setScriptName("Merge2")
    lastNode.setLabel("Merge2")
    lastNode.setPosition(-176, -885)
    lastNode.setSize(104, 50)
    lastNode.setColor(0.3, 0.37, 0.776)
    groupMerge2 = lastNode

    param = lastNode.getParam("userTextArea")
    if param is not None:
        param.setValue("<Natron>(over)</Natron>")
        del param

    del lastNode
    # End of node "Merge2"

    # Start of node "transform_a"
    lastNode = app.createNode("net.sf.openfx.TransformPlugin", 1, group)
    lastNode.setScriptName("transform_a")
    lastNode.setLabel("transform_a")
    lastNode.setPosition(-806, -800)
    lastNode.setSize(104, 30)
    lastNode.setColor(0.7, 0.3, 0.1)
    grouptransform_a = lastNode

    param = lastNode.getParam("translate")
    if param is not None:
        param.setValueAtTime(0, 1, 0)
        param.setValueAtTime(288.0000000000001, 36, 0)
        param.setValueAtTime(1632, 66, 0)
        param.setValueAtTime(1920, 101, 0)
        del param

    del lastNode
    # End of node "transform_a"

    # Start of node "transform_b"
    lastNode = app.createNode("net.sf.openfx.TransformPlugin", 1, group)
    lastNode.setScriptName("transform_b")
    lastNode.setLabel("transform_b")
    lastNode.setPosition(-176, -806)
    lastNode.setSize(104, 30)
    lastNode.setColor(0.7, 0.3, 0.1)
    grouptransform_b = lastNode

    param = lastNode.getParam("translate")
    if param is not None:
        param.setValueAtTime(-1920, 1, 0)
        param.setValueAtTime(-1632, 36, 0)
        param.setValueAtTime(-288.0000000000001, 66, 0)
        param.setValueAtTime(0, 101, 0)
        del param

    del lastNode
    # End of node "transform_b"

    # Start of node "Dot1"
    lastNode = app.createNode("fr.inria.built-in.Dot", 1, group)
    lastNode.setScriptName("Dot1")
    lastNode.setLabel("Dot1")
    lastNode.setPosition(-761, -420)
    lastNode.setSize(15, 15)
    lastNode.setColor(0.7, 0.7, 0.7)
    groupDot1 = lastNode

    del lastNode
    # End of node "Dot1"

    # Start of node "limit"
    lastNode = app.createNode("net.sf.openfx.switchPlugin", 1, group)
    lastNode.setScriptName("limit")
    lastNode.setLabel("limit")
    lastNode.setPosition(-1276, 1459)
    lastNode.setSize(104, 32)
    lastNode.setColor(0.3, 0.37, 0.776)
    grouplimit = lastNode

    param = lastNode.getParam("which")
    if param is not None:
        param.setValueAtTime(0, 0, 0)
        param.setValueAtTime(1, 1, 0)
        param.setValueAtTime(1, 100, 0)
        param.setValueAtTime(2, 101, 0)
        del param

    del lastNode
    # End of node "limit"

    # Start of node "Dot2"
    lastNode = app.createNode("fr.inria.built-in.Dot", 1, group)
    lastNode.setScriptName("Dot2")
    lastNode.setLabel("Dot2")
    lastNode.setPosition(679, 485)
    lastNode.setSize(15, 15)
    lastNode.setColor(0.7, 0.7, 0.7)
    groupDot2 = lastNode

    del lastNode
    # End of node "Dot2"

    # Start of node "to_blue"
    lastNode = app.createNode("net.sf.openfx.ShufflePlugin", 3, group)
    lastNode.setScriptName("to_blue")
    lastNode.setLabel("to_blue")
    lastNode.setPosition(810, -1041)
    lastNode.setSize(104, 32)
    lastNode.setColor(0.6, 0.24, 0.39)
    groupto_blue = lastNode

    param = lastNode.getParam("outputB")
    if param is not None:
        param.set("A.uk.co.thefoundry.OfxImagePlaneColour.A")
        del param

    del lastNode
    # End of node "to_blue"

    # Start of node "TwelveRender"
    lastNode = app.createNode("vv.TwelveRender", 1, group)
    lastNode.setScriptName("TwelveRender")
    lastNode.setLabel("TwelveRender")
    lastNode.setPosition(810, -936)
    lastNode.setSize(104, 32)
    lastNode.setColor(0.7, 0.7, 0.7)
    groupTwelveRender = lastNode

    param = lastNode.getParam("onParamChanged")
    if param is not None:
        param.setValue("twelve_render.main")
        del param


    # Create the user parameters
    lastNode.control = lastNode.createPageParam("control", "Control")
    param = lastNode.createStringParam("state_label", "State")
    param.setType(NatronEngine.StringParam.TypeEnum.eStringTypeLabel)
    param.setDefaultValue("- - - - - - - >    STATE :")
    param.restoreDefaultValue()

    # Add the param to the page
    lastNode.control.addParam(param)

    # Set param properties
    param.setAddNewLine(True)
    param.setEvaluateOnChange(False)
    param.setAnimationEnabled(False)
    param.setEnabled(False, 0)
    lastNode.state_label = param
    del param

    param = lastNode.createChoiceParam("format", "Format")
    param.setDefaultValue(2)
    param.restoreDefaultValue()

    # Add the param to the page
    lastNode.control.addParam(param)

    # Set param properties
    param.setAddNewLine(True)
    param.setAnimationEnabled(True)
    param.set("Full HD - 1920 x 1080")
    param.setEnabled(False, 0)
    lastNode.format = param
    del param

    param = lastNode.createChoiceParam("speed", "Speed")
    entries = [ ("Slow", ""),
    ("Normal", ""),
    ("Fast", "")]
    param.setOptions(entries)
    del entries
    param.setDefaultValue("Normal")
    param.restoreDefaultValue()

    # Add the param to the page
    lastNode.control.addParam(param)

    # Set param properties
    param.setHelp("")
    param.setAddNewLine(False)
    param.setAnimationEnabled(True)
    param.setEnabled(False, 0)
    lastNode.speed = param
    del param

    param = lastNode.createButtonParam("link", "Link To Parent")

    # Add the param to the page
    lastNode.control.addParam(param)

    # Set param properties
    param.setHelp("")
    param.setAddNewLine(False)
    param.setEvaluateOnChange(False)
    lastNode.link = param
    del param

    param = lastNode.createButtonParam("link_to_connected", "Link To Connected")

    # Add the param to the page
    lastNode.control.addParam(param)

    # Set param properties
    param.setHelp("Vincula todos los nodos conectados que tengan,\nlos atributos de videovina.")
    param.setAddNewLine(False)
    param.setEvaluateOnChange(False)
    lastNode.link_to_connected = param
    del param

    param = lastNode.createSeparatorParam("sep5", "")

    # Add the param to the page
    lastNode.control.addParam(param)

    # Set param properties
    param.setHelp("")
    param.setAddNewLine(True)
    param.setPersistent(False)
    param.setEvaluateOnChange(False)
    lastNode.sep5 = param
    del param

    param = lastNode.createStringParam("time_label", "")
    param.setType(NatronEngine.StringParam.TypeEnum.eStringTypeLabel)
    param.setDefaultValue("- - - - - - - >    TIME :")
    param.restoreDefaultValue()

    # Add the param to the page
    lastNode.control.addParam(param)

    # Set param properties
    param.setHelp("")
    param.setAddNewLine(True)
    param.setEvaluateOnChange(False)
    param.setAnimationEnabled(False)
    lastNode.time_label = param
    del param

    param = lastNode.createIntParam("duration_percent", "Duration Percent %")
    param.setMinimum(25, 0)
    param.setMaximum(100, 0)
    param.setDisplayMinimum(25, 0)
    param.setDisplayMaximum(100, 0)
    param.setDefaultValue(0, 0)
    param.restoreDefaultValue(0)

    # Add the param to the page
    lastNode.control.addParam(param)

    # Set param properties
    param.setHelp("")
    param.setAddNewLine(True)
    param.setAnimationEnabled(True)
    param.setValue(100, 0)
    lastNode.duration_percent = param
    del param

    param = lastNode.createInt3DParam("durations", "Durations")
    param.setDisplayMinimum(0, 0)
    param.setDisplayMaximum(100, 0)
    param.setDefaultValue(0, 0)
    param.restoreDefaultValue(0)
    param.setDisplayMinimum(0, 1)
    param.setDisplayMaximum(100, 1)
    param.setDefaultValue(0, 1)
    param.restoreDefaultValue(1)
    param.setDisplayMinimum(0, 2)
    param.setDisplayMaximum(100, 2)
    param.setDefaultValue(0, 2)
    param.restoreDefaultValue(2)

    # Add the param to the page
    lastNode.control.addParam(param)

    # Set param properties
    param.setHelp("")
    param.setAddNewLine(False)
    param.setAnimationEnabled(True)
    param.setValue(150, 0)
    param.setValue(100, 1)
    param.setValue(50, 2)
    param.setEnabled(False, 0)
    param.setEnabled(False, 1)
    param.setEnabled(False, 2)
    lastNode.durations = param
    del param

    param = lastNode.createSeparatorParam("sep6", "")

    # Add the param to the page
    lastNode.control.addParam(param)

    # Set param properties
    param.setHelp("")
    param.setAddNewLine(True)
    param.setPersistent(False)
    param.setEvaluateOnChange(False)
    lastNode.sep6 = param
    del param

    param = lastNode.createStringParam("settings_label", "")
    param.setType(NatronEngine.StringParam.TypeEnum.eStringTypeLabel)
    param.setDefaultValue("- - - - - - - >    SETTINGS :")
    param.restoreDefaultValue()

    # Add the param to the page
    lastNode.control.addParam(param)

    # Set param properties
    param.setHelp("")
    param.setAddNewLine(True)
    param.setEvaluateOnChange(False)
    param.setAnimationEnabled(False)
    lastNode.settings_label = param
    del param

    param = lastNode.createChoiceParam("sequence_type", "Sequence Type")
    entries = [ ("PNG", ""),
    ("JPG", "")]
    param.setOptions(entries)
    del entries

    # Add the param to the page
    lastNode.control.addParam(param)

    # Set param properties
    param.setHelp("")
    param.setAddNewLine(True)
    param.setAnimationEnabled(True)
    lastNode.sequence_type = param
    del param

    param = lastNode.createChoiceParam("filter", "Reformat Filter")
    entries = [ ("Cubic", ""),
    ("Impulse", ""),
    ("Notch", "")]
    param.setOptions(entries)
    del entries

    # Add the param to the page
    lastNode.control.addParam(param)

    # Set param properties
    param.setHelp("")
    param.setAddNewLine(False)
    param.setAnimationEnabled(True)
    lastNode.filter = param
    del param

    param = lastNode.createStringParam("prefix", "Prefix")
    param.setType(NatronEngine.StringParam.TypeEnum.eStringTypeDefault)

    # Add the param to the page
    lastNode.control.addParam(param)

    # Set param properties
    param.setHelp("")
    param.setAddNewLine(True)
    param.setAnimationEnabled(True)
    param.setValue("glitch_transition")
    param.setEnabled(False, 0)
    lastNode.prefix = param
    del param

    param = lastNode.createBooleanParam("current_state", "Current State")

    # Add the param to the page
    lastNode.control.addParam(param)

    # Set param properties
    param.setHelp("")
    param.setAddNewLine(False)
    param.setAnimationEnabled(True)
    param.setEnabled(False, 0)
    lastNode.current_state = param
    del param

    param = lastNode.createBooleanParam("current_speed", "Current Speed")

    # Add the param to the page
    lastNode.control.addParam(param)

    # Set param properties
    param.setHelp("Renderiza solo una velocidad con los 3 formatos.")
    param.setAddNewLine(False)
    param.setAnimationEnabled(True)
    lastNode.current_speed = param
    del param

    param = lastNode.createButtonParam("render", "Render")

    # Add the param to the page
    lastNode.control.addParam(param)

    # Set param properties
    param.setHelp("")
    param.setAddNewLine(False)
    param.setEvaluateOnChange(False)
    lastNode.render = param
    del param

    # Refresh the GUI with the newly created parameters
    lastNode.setPagesOrder(['control', 'Node', 'Settings'])
    lastNode.refreshUserParamsGUI()
    del lastNode
    # End of node "TwelveRender"

    # Start of node "Format1"
    lastNode = app.createNode("vv.Format", 1, group)
    lastNode.setScriptName("Format1")
    lastNode.setLabel("Format1")
    lastNode.setPosition(1122, -1136)
    lastNode.setSize(104, 32)
    lastNode.setColor(0.7, 0.7, 0.7)
    groupFormat1 = lastNode

    param = lastNode.getParam("onParamChanged")
    if param is not None:
        param.setValue("base.main")
        del param


    # Create the user parameters
    lastNode.control = lastNode.createPageParam("control", "Control")
    param = lastNode.createStringParam("state_label", "State")
    param.setType(NatronEngine.StringParam.TypeEnum.eStringTypeLabel)
    param.setDefaultValue("- - - - - - - >    STATE :")
    param.restoreDefaultValue()

    # Add the param to the page
    lastNode.control.addParam(param)

    # Set param properties
    param.setAddNewLine(True)
    param.setEvaluateOnChange(False)
    param.setAnimationEnabled(False)
    param.setEnabled(False, 0)
    lastNode.state_label = param
    del param

    param = lastNode.createChoiceParam("format", "Format")
    param.setDefaultValue(2)
    param.restoreDefaultValue()

    # Add the param to the page
    lastNode.control.addParam(param)

    # Set param properties
    param.setAddNewLine(True)
    param.setAnimationEnabled(True)
    param.set("Full HD - 1920 x 1080")
    param.setEnabled(False, 0)
    lastNode.format = param
    del param

    param = lastNode.createButtonParam("link", "Link To Parent")

    # Add the param to the page
    lastNode.control.addParam(param)

    # Set param properties
    param.setHelp("")
    param.setAddNewLine(False)
    param.setEvaluateOnChange(False)
    lastNode.link = param
    del param

    param = lastNode.createButtonParam("refresh", "Refresh")

    # Add the param to the page
    lastNode.control.addParam(param)

    # Set param properties
    param.setHelp("")
    param.setAddNewLine(False)
    param.setEvaluateOnChange(False)
    lastNode.refresh = param
    del param

    param = lastNode.createSeparatorParam("sep5", "")

    # Add the param to the page
    lastNode.control.addParam(param)

    # Set param properties
    param.setHelp("")
    param.setAddNewLine(True)
    param.setPersistent(False)
    param.setEvaluateOnChange(False)
    lastNode.sep5 = param
    del param

    # Refresh the GUI with the newly created parameters
    lastNode.setPagesOrder(['control', 'Node', 'Settings'])
    lastNode.refreshUserParamsGUI()
    del lastNode
    # End of node "Format1"

    # Start of node "noise_background"
    lastNode = app.createNode("net.sf.openfx.ConstantPlugin", 1, group)
    lastNode.setScriptName("noise_background")
    lastNode.setLabel("noise_background")
    lastNode.setPosition(575, -1212)
    lastNode.setSize(104, 55)
    lastNode.setColor(0.3, 0.5, 0.2)
    groupnoise_background = lastNode

    param = lastNode.getParam("extent")
    if param is not None:
        param.set("size")
        del param

    param = lastNode.getParam("reformat")
    if param is not None:
        param.setValue(True)
        del param

    param = lastNode.getParam("NatronParamFormatChoice")
    if param is not None:
        param.set("PC_Video")
        del param

    del lastNode
    # End of node "noise_background"

    # Start of node "Dot5"
    lastNode = app.createNode("fr.inria.built-in.Dot", 1, group)
    lastNode.setScriptName("Dot5")
    lastNode.setLabel("Dot5")
    lastNode.setPosition(679, -419)
    lastNode.setSize(15, 15)
    lastNode.setColor(0.7, 0.7, 0.7)
    groupDot5 = lastNode

    del lastNode
    # End of node "Dot5"

    # Start of node "Read5"
    lastNode = app.createNode("fr.inria.built-in.Read", 1, group)
    lastNode.setScriptName("Read5")
    lastNode.setLabel("Read5")
    lastNode.setPosition(379, -2079)
    lastNode.setSize(128, 78)
    lastNode.setColor(0.7, 0.7, 0.7)
    groupRead5 = lastNode

    param = lastNode.getParam("decodingPluginID")
    if param is not None:
        param.setValue("fr.inria.openfx.ReadOIIO")
        del param

    param = lastNode.getParam("filename")
    if param is not None:
        param.setValue("[Project]/../assets/glitchs/glitch_15/glitch_15_###.jpg")
        del param

    param = lastNode.getParam("before")
    if param is not None:
        param.set("loop")
        del param

    param = lastNode.getParam("after")
    if param is not None:
        param.set("loop")
        del param

    param = lastNode.getParam("filePremult")
    if param is not None:
        param.set("opaque")
        del param

    param = lastNode.getParam("outputPremult")
    if param is not None:
        param.set("opaque")
        del param

    param = lastNode.getParam("outputComponents")
    if param is not None:
        param.set("RGB")
        del param

    param = lastNode.getParam("ParamExistingInstance")
    if param is not None:
        param.setValue(True)
        del param

    param = lastNode.getParam("outputLayerChoice")
    if param is not None:
        param.setValue("Color.RGB")
        del param

    param = lastNode.getParam("ocioInputSpace")
    if param is not None:
        param.setValue("sRGB")
        del param

    del lastNode
    # End of node "Read5"

    # Start of node "Shuffle1"
    lastNode = app.createNode("net.sf.openfx.ShufflePlugin", 3, group)
    lastNode.setScriptName("Shuffle1")
    lastNode.setLabel("Shuffle1")
    lastNode.setPosition(634, 931)
    lastNode.setSize(104, 32)
    lastNode.setColor(0.6, 0.24, 0.39)
    groupShuffle1 = lastNode

    param = lastNode.getParam("outputB")
    if param is not None:
        param.set("B.uk.co.thefoundry.OfxImagePlaneColour.G")
        del param

    param = lastNode.getParam("outputA")
    if param is not None:
        param.set("0")
        del param

    del lastNode
    # End of node "Shuffle1"

    # Start of node "Dot6"
    lastNode = app.createNode("fr.inria.built-in.Dot", 1, group)
    lastNode.setScriptName("Dot6")
    lastNode.setLabel("Dot6")
    lastNode.setPosition(679, 1039)
    lastNode.setSize(15, 15)
    lastNode.setColor(0.7, 0.7, 0.7)
    groupDot6 = lastNode

    del lastNode
    # End of node "Dot6"

    # Start of node "to_alpha"
    lastNode = app.createNode("net.sf.openfx.ShufflePlugin", 3, group)
    lastNode.setScriptName("to_alpha")
    lastNode.setLabel("to_alpha")
    lastNode.setPosition(810, -1136)
    lastNode.setSize(104, 32)
    lastNode.setColor(0.6, 0.24, 0.39)
    groupto_alpha = lastNode

    param = lastNode.getParam("outputA")
    if param is not None:
        param.set("A.uk.co.thefoundry.OfxImagePlaneColour.R")
        del param

    del lastNode
    # End of node "to_alpha"

    # Start of node "TwelveRead1"
    lastNode = app.createNode("vv.TwelveRead", 1, group)
    lastNode.setScriptName("TwelveRead1")
    lastNode.setLabel("TwelveRead1")
    lastNode.setPosition(809, -730)
    lastNode.setSize(104, 32)
    lastNode.setColor(0.7, 0.7, 0.7)
    groupTwelveRead1 = lastNode

    param = lastNode.getParam("onParamChanged")
    if param is not None:
        param.setValue("twelve_read.main")
        del param


    # Create the user parameters
    lastNode.control = lastNode.createPageParam("control", "Control")
    param = lastNode.createChoiceParam("format", "Format")
    entries = [ ("Quarter HD - 480 x 270", ""),
    ("Half HD - 960 x 540", ""),
    ("Full HD - 1920 x 1080", ""),
    ("4K - 3840 x 2160", "")]
    param.setOptions(entries)
    del entries
    param.setDefaultValue("Full HD - 1920 x 1080")
    param.restoreDefaultValue()

    # Add the param to the page
    lastNode.control.addParam(param)

    # Set param properties
    param.setHelp("")
    param.setAddNewLine(True)
    param.setAnimationEnabled(True)
    param.set("Full HD - 1920 x 1080")
    param.setEnabled(False, 0)
    lastNode.format = param
    del param

    param = lastNode.createChoiceParam("speed", "Speed")
    entries = [ ("Slow", ""),
    ("Normal", ""),
    ("Fast", "")]
    param.setOptions(entries)
    del entries
    param.setDefaultValue("Normal")
    param.restoreDefaultValue()

    # Add the param to the page
    lastNode.control.addParam(param)

    # Set param properties
    param.setHelp("")
    param.setAddNewLine(False)
    param.setAnimationEnabled(True)
    param.setEnabled(False, 0)
    lastNode.speed = param
    del param

    param = lastNode.createButtonParam("link", "Link To Parent")

    # Add the param to the page
    lastNode.control.addParam(param)

    # Set param properties
    param.setHelp("")
    param.setAddNewLine(False)
    param.setEvaluateOnChange(False)
    lastNode.link = param
    del param

    param = lastNode.createSeparatorParam("sep1", "")

    # Add the param to the page
    lastNode.control.addParam(param)

    # Set param properties
    param.setHelp("")
    param.setAddNewLine(True)
    param.setPersistent(False)
    param.setEvaluateOnChange(False)
    lastNode.sep1 = param
    del param

    param = lastNode.createChoiceParam("sequence_type", "Sequence Type")
    entries = [ ("PNG", ""),
    ("JPG", "")]
    param.setOptions(entries)
    del entries

    # Add the param to the page
    lastNode.control.addParam(param)

    # Set param properties
    param.setHelp("")
    param.setAddNewLine(True)
    param.setAnimationEnabled(True)
    param.setEnabled(False, 0)
    lastNode.sequence_type = param
    del param

    param = lastNode.createStringParam("prefix", "Prefix")
    param.setType(NatronEngine.StringParam.TypeEnum.eStringTypeDefault)

    # Add the param to the page
    lastNode.control.addParam(param)

    # Set param properties
    param.setHelp("")
    param.setAddNewLine(True)
    param.setAnimationEnabled(True)
    param.setValue("glitch_transition")
    param.setEnabled(False, 0)
    lastNode.prefix = param
    del param

    param = lastNode.createChoiceParam("before", "Before")
    entries = [ ("Hold", ""),
    ("Loop", ""),
    ("Bounce", "")]
    param.setOptions(entries)
    del entries

    # Add the param to the page
    lastNode.control.addParam(param)

    # Set param properties
    param.setHelp("")
    param.setAddNewLine(False)
    param.setAnimationEnabled(True)
    lastNode.before = param
    del param

    param = lastNode.createChoiceParam("after", "After")
    entries = [ ("Hold", ""),
    ("Loop", ""),
    ("Bounce", "")]
    param.setOptions(entries)
    del entries

    # Add the param to the page
    lastNode.control.addParam(param)

    # Set param properties
    param.setHelp("")
    param.setAddNewLine(False)
    param.setAnimationEnabled(True)
    lastNode.after = param
    del param

    param = lastNode.createButtonParam("refresh", "Refresh")

    # Add the param to the page
    lastNode.control.addParam(param)

    # Set param properties
    param.setHelp("")
    param.setAddNewLine(False)
    param.setEvaluateOnChange(False)
    lastNode.refresh = param
    del param

    # Refresh the GUI with the newly created parameters
    lastNode.setPagesOrder(['control', 'Node', 'Settings'])
    lastNode.refreshUserParamsGUI()
    del lastNode
    # End of node "TwelveRead1"

    # Start of node "Switch1"
    lastNode = app.createNode("net.sf.openfx.switchPlugin", 1, group)
    lastNode.setScriptName("Switch1")
    lastNode.setLabel("Switch1")
    lastNode.setPosition(634, -730)
    lastNode.setSize(104, 32)
    lastNode.setColor(0.3, 0.37, 0.776)
    groupSwitch1 = lastNode

    param = lastNode.getParam("which")
    if param is not None:
        param.setValue(0, 0)
        del param

    del lastNode
    # End of node "Switch1"

    # Start of node "Transform1"
    lastNode = app.createNode("net.sf.openfx.TransformPlugin", 1, group)
    lastNode.setScriptName("Transform1")
    lastNode.setLabel("Transform1")
    lastNode.setPosition(1515, -1565)
    lastNode.setSize(104, 32)
    lastNode.setColor(0.7, 0.3, 0.1)
    groupTransform1 = lastNode

    param = lastNode.getParam("translate")
    if param is not None:
        param.setValue(656, 0)
        param.setValue(40, 1)
        del param

    param = lastNode.getParam("rotate")
    if param is not None:
        param.setValue(-90, 0)
        del param

    del lastNode
    # End of node "Transform1"

    # Start of node "Transform1_2"
    lastNode = app.createNode("net.sf.openfx.TransformPlugin", 1, group)
    lastNode.setScriptName("Transform1_2")
    lastNode.setLabel("Transform1_2")
    lastNode.setPosition(1351, -1492)
    lastNode.setSize(104, 32)
    lastNode.setColor(0.7, 0.3, 0.1)
    groupTransform1_2 = lastNode

    param = lastNode.getParam("translate")
    if param is not None:
        param.setValue(-417, 0)
        del param

    param = lastNode.getParam("rotate")
    if param is not None:
        param.setValue(-90, 0)
        del param

    del lastNode
    # End of node "Transform1_2"

    # Start of node "Merge3"
    lastNode = app.createNode("net.sf.openfx.MergePlugin", 1, group)
    lastNode.setScriptName("Merge3")
    lastNode.setLabel("Merge3")
    lastNode.setPosition(1515, -1503)
    lastNode.setSize(104, 55)
    lastNode.setColor(0.3, 0.37, 0.776)
    groupMerge3 = lastNode

    param = lastNode.getParam("AChannelsA")
    if param is not None:
        param.setValue(False)
        del param

    param = lastNode.getParam("BChannelsA")
    if param is not None:
        param.setValue(False)
        del param

    del lastNode
    # End of node "Merge3"

    # Start of node "Dot7"
    lastNode = app.createNode("fr.inria.built-in.Dot", 1, group)
    lastNode.setScriptName("Dot7")
    lastNode.setLabel("Dot7")
    lastNode.setPosition(1396, -1607)
    lastNode.setSize(15, 15)
    lastNode.setColor(0.7, 0.7, 0.7)
    groupDot7 = lastNode

    del lastNode
    # End of node "Dot7"

    # Start of node "TimeOffset1"
    lastNode = app.createNode("net.sf.openfx.timeOffset", 1, group)
    lastNode.setScriptName("TimeOffset1")
    lastNode.setLabel("TimeOffset1")
    lastNode.setPosition(1515, -1616)
    lastNode.setSize(104, 32)
    lastNode.setColor(0.7, 0.65, 0.35)
    groupTimeOffset1 = lastNode

    param = lastNode.getParam("timeOffset")
    if param is not None:
        param.setValue(2, 0)
        del param

    del lastNode
    # End of node "TimeOffset1"

    # Start of node "Crop1"
    lastNode = app.createNode("net.sf.openfx.CropPlugin", 1, group)
    lastNode.setScriptName("Crop1")
    lastNode.setLabel("Crop1")
    lastNode.setPosition(1515, -1419)
    lastNode.setSize(104, 32)
    lastNode.setColor(0.7, 0.3, 0.1)
    groupCrop1 = lastNode

    param = lastNode.getParam("NatronParamFormatChoice")
    if param is not None:
        param.set("PC_Video")
        del param

    del lastNode
    # End of node "Crop1"

    # Start of node "vertical_switch_b"
    lastNode = app.createNode("net.sf.openfx.switchPlugin", 1, group)
    lastNode.setScriptName("vertical_switch_b")
    lastNode.setLabel("vertical_switch_b")
    lastNode.setPosition(1122, -1430)
    lastNode.setSize(104, 55)
    lastNode.setColor(0.3, 0.37, 0.776)
    groupvertical_switch_b = lastNode

    del lastNode
    # End of node "vertical_switch_b"

    # Start of node "Transform1_3"
    lastNode = app.createNode("net.sf.openfx.TransformPlugin", 1, group)
    lastNode.setScriptName("Transform1_3")
    lastNode.setLabel("Transform1_3")
    lastNode.setPosition(556, -1773)
    lastNode.setSize(104, 32)
    lastNode.setColor(0.7, 0.3, 0.1)
    groupTransform1_3 = lastNode

    param = lastNode.getParam("translate")
    if param is not None:
        param.setValue(663, 0)
        param.setValue(36, 1)
        del param

    param = lastNode.getParam("rotate")
    if param is not None:
        param.setValue(-90, 0)
        del param

    del lastNode
    # End of node "Transform1_3"

    # Start of node "Transform1_2_2"
    lastNode = app.createNode("net.sf.openfx.TransformPlugin", 1, group)
    lastNode.setScriptName("Transform1_2_2")
    lastNode.setLabel("Transform1_2_2")
    lastNode.setPosition(391, -1700)
    lastNode.setSize(104, 55)
    lastNode.setColor(0.7, 0.3, 0.1)
    groupTransform1_2_2 = lastNode

    param = lastNode.getParam("translate")
    if param is not None:
        param.setValue(-417, 0)
        del param

    param = lastNode.getParam("rotate")
    if param is not None:
        param.setValue(-90, 0)
        del param

    del lastNode
    # End of node "Transform1_2_2"

    # Start of node "Merge3_2"
    lastNode = app.createNode("net.sf.openfx.MergePlugin", 1, group)
    lastNode.setScriptName("Merge3_2")
    lastNode.setLabel("Merge3_2")
    lastNode.setPosition(556, -1700)
    lastNode.setSize(104, 55)
    lastNode.setColor(0.3, 0.37, 0.776)
    groupMerge3_2 = lastNode

    param = lastNode.getParam("AChannelsA")
    if param is not None:
        param.setValue(False)
        del param

    param = lastNode.getParam("BChannelsA")
    if param is not None:
        param.setValue(False)
        del param

    del lastNode
    # End of node "Merge3_2"

    # Start of node "Dot7_2"
    lastNode = app.createNode("fr.inria.built-in.Dot", 1, group)
    lastNode.setScriptName("Dot7_2")
    lastNode.setLabel("Dot7_2")
    lastNode.setPosition(436, -1815)
    lastNode.setSize(15, 15)
    lastNode.setColor(0.7, 0.7, 0.7)
    groupDot7_2 = lastNode

    del lastNode
    # End of node "Dot7_2"

    # Start of node "TimeOffset1_2"
    lastNode = app.createNode("net.sf.openfx.timeOffset", 1, group)
    lastNode.setScriptName("TimeOffset1_2")
    lastNode.setLabel("TimeOffset1_2")
    lastNode.setPosition(556, -1824)
    lastNode.setSize(104, 32)
    lastNode.setColor(0.7, 0.65, 0.35)
    groupTimeOffset1_2 = lastNode

    param = lastNode.getParam("timeOffset")
    if param is not None:
        param.setValue(1, 0)
        del param

    del lastNode
    # End of node "TimeOffset1_2"

    # Start of node "Crop1_2"
    lastNode = app.createNode("net.sf.openfx.CropPlugin", 1, group)
    lastNode.setScriptName("Crop1_2")
    lastNode.setLabel("Crop1_2")
    lastNode.setPosition(556, -1611)
    lastNode.setSize(104, 32)
    lastNode.setColor(0.7, 0.3, 0.1)
    groupCrop1_2 = lastNode

    param = lastNode.getParam("NatronParamFormatChoice")
    if param is not None:
        param.set("PC_Video")
        del param

    del lastNode
    # End of node "Crop1_2"

    # Start of node "glitch_opacity"
    lastNode = app.createNode("net.sf.openfx.GradePlugin", 2, group)
    lastNode.setScriptName("glitch_opacity")
    lastNode.setLabel("glitch_opacity")
    lastNode.setPosition(809, -1462)
    lastNode.setSize(104, 32)
    lastNode.setColor(0.48, 0.66, 1)
    groupglitch_opacity = lastNode

    param = lastNode.getParam("white")
    if param is not None:
        param.setValueAtTime(0, 1, 0)
        param.setValueAtTime(1, 51, 0)
        param.setValueAtTime(0, 101, 0)
        param.setValueAtTime(0, 1, 1)
        param.setValueAtTime(1, 51, 1)
        param.setValueAtTime(0, 101, 1)
        param.setValueAtTime(0, 1, 2)
        param.setValueAtTime(1, 51, 2)
        param.setValueAtTime(0, 101, 2)
        param.setValueAtTime(0, 1, 3)
        param.setValueAtTime(1, 51, 3)
        param.setValueAtTime(0, 101, 3)
        del param

    param = lastNode.getParam("premultChanged")
    if param is not None:
        param.setValue(True)
        del param

    del lastNode
    # End of node "glitch_opacity"

    # Start of node "vertical_switch_a"
    lastNode = app.createNode("net.sf.openfx.switchPlugin", 1, group)
    lastNode.setScriptName("vertical_switch_a")
    lastNode.setLabel("vertical_switch_a")
    lastNode.setPosition(809, -1622)
    lastNode.setSize(104, 55)
    lastNode.setColor(0.3, 0.37, 0.776)
    groupvertical_switch_a = lastNode

    del lastNode
    # End of node "vertical_switch_a"

    # Start of node "Dot8"
    lastNode = app.createNode("fr.inria.built-in.Dot", 1, group)
    lastNode.setScriptName("Dot8")
    lastNode.setLabel("Dot8")
    lastNode.setPosition(854, -1897)
    lastNode.setSize(15, 15)
    lastNode.setColor(0.7, 0.7, 0.7)
    groupDot8 = lastNode

    del lastNode
    # End of node "Dot8"

    # Start of node "Dot9"
    lastNode = app.createNode("fr.inria.built-in.Dot", 1, group)
    lastNode.setScriptName("Dot9")
    lastNode.setLabel("Dot9")
    lastNode.setPosition(436, -1896)
    lastNode.setSize(15, 15)
    lastNode.setColor(0.7, 0.7, 0.7)
    groupDot9 = lastNode

    del lastNode
    # End of node "Dot9"

    # Start of node "Transform2"
    lastNode = app.createNode("net.sf.openfx.TransformPlugin", 1, group)
    lastNode.setScriptName("Transform2")
    lastNode.setLabel("Transform2")
    lastNode.setPosition(391, -1952)
    lastNode.setSize(104, 32)
    lastNode.setColor(0.7, 0.3, 0.1)
    groupTransform2 = lastNode

    param = lastNode.getParam("scale")
    if param is not None:
        param.setValue(1.02, 0)
        del param

    del lastNode
    # End of node "Transform2"

    # Now that all nodes are created we can connect them together, restore expressions
    groupOutput1.connectInput(0, grouplimit)
    grouplens_distort.connectInput(0, groupcrop_a)
    groupKeyMix2.connectInput(0, grouplens_distort)
    groupKeyMix2.connectInput(1, groupmix_transform)
    groupKeyMix2.connectInput(2, groupDot2)
    groupGrade6.connectInput(0, groupRead7)
    groupMerge5.connectInput(0, groupKeyMix2)
    groupMerge5.connectInput(1, groupDot6)
    groupcrop_b.connectInput(0, groupChromaticAberration4)
    groupChromaticAberration4.connectInput(0, groupMerge5)
    groupmix_transform.connectInput(0, grouplens_distort)
    groupcrop_a.connectInput(0, groupKeyMix3)
    groupKeyMix3.connectInput(0, groupDot1)
    groupKeyMix3.connectInput(1, grouptransform_b)
    groupKeyMix3.connectInput(2, groupDot5)
    groupnoise.connectInput(0, groupnoise_background)
    groupnoise_keyer.connectInput(0, groupnoise)
    groupnoise_blur.connectInput(0, groupnoise_keyer)
    groupduplicate_a.connectInput(0, groupDot3)
    groupduplicate_b.connectInput(0, groupDot4)
    groupMerge1.connectInput(0, groupDot3)
    groupMerge1.connectInput(1, groupduplicate_a)
    groupDot3.connectInput(0, groupA)
    groupDot4.connectInput(0, groupB)
    groupMerge2.connectInput(0, groupDot4)
    groupMerge2.connectInput(1, groupduplicate_b)
    grouptransform_a.connectInput(0, groupMerge1)
    grouptransform_b.connectInput(0, groupMerge2)
    groupDot1.connectInput(0, grouptransform_a)
    grouplimit.connectInput(0, groupA)
    grouplimit.connectInput(1, groupcrop_b)
    grouplimit.connectInput(2, groupB)
    groupDot2.connectInput(0, groupDot5)
    groupto_blue.connectInput(0, groupto_alpha)
    groupto_blue.connectInput(1, groupnoise_blur)
    groupTwelveRender.connectInput(0, groupto_blue)
    groupFormat1.connectInput(0, groupvertical_switch_b)
    groupDot5.connectInput(0, groupSwitch1)
    groupShuffle1.connectInput(0, groupDot2)
    groupDot6.connectInput(0, groupShuffle1)
    groupto_alpha.connectInput(0, groupglitch_opacity)
    groupto_alpha.connectInput(1, groupFormat1)
    groupSwitch1.connectInput(0, groupto_blue)
    groupSwitch1.connectInput(1, groupTwelveRead1)
    groupTransform1.connectInput(0, groupTimeOffset1)
    groupTransform1_2.connectInput(0, groupDot7)
    groupMerge3.connectInput(0, groupTransform1_2)
    groupMerge3.connectInput(1, groupTransform1)
    groupDot7.connectInput(0, groupGrade6)
    groupTimeOffset1.connectInput(0, groupDot7)
    groupCrop1.connectInput(0, groupMerge3)
    groupvertical_switch_b.connectInput(0, groupGrade6)
    groupvertical_switch_b.connectInput(1, groupCrop1)
    groupTransform1_3.connectInput(0, groupTimeOffset1_2)
    groupTransform1_2_2.connectInput(0, groupDot7_2)
    groupMerge3_2.connectInput(0, groupTransform1_2_2)
    groupMerge3_2.connectInput(1, groupTransform1_3)
    groupDot7_2.connectInput(0, groupDot9)
    groupTimeOffset1_2.connectInput(0, groupDot7_2)
    groupCrop1_2.connectInput(0, groupMerge3_2)
    groupglitch_opacity.connectInput(0, groupvertical_switch_a)
    groupvertical_switch_a.connectInput(0, groupDot8)
    groupvertical_switch_a.connectInput(1, groupCrop1_2)
    groupDot8.connectInput(0, groupDot9)
    groupDot9.connectInput(0, groupTransform2)
    groupTransform2.connectInput(0, groupRead5)

    param = groupChromaticAberration4.getParam("state_label")
    group.getParam("state_label").setAsAlias(param)
    del param
    param = groupChromaticAberration4.getParam("format")
    group.getParam("format").setAsAlias(param)
    del param
    param = groupChromaticAberration4.getParam("speed")
    group.getParam("speed").setAsAlias(param)
    del param
    param = groupChromaticAberration4.getParam("durations")
    group.getParam("durations").setAsAlias(param)
    del param
    param = groupnoise.getParam("fbmLacunarity")
    param.slaveTo(group.getParam("lacunarity"), 0, 0)
    del param
    param = groupTwelveRender.getParam("state_label")
    group.getParam("state_label").setAsAlias(param)
    del param
    param = groupTwelveRender.getParam("format")
    group.getParam("format").setAsAlias(param)
    del param
    param = groupTwelveRender.getParam("speed")
    group.getParam("speed").setAsAlias(param)
    del param
    param = groupTwelveRender.getParam("durations")
    group.getParam("durations").setAsAlias(param)
    del param
    param = groupTwelveRender.getParam("prefix")
    group.getParam("prefix").setAsAlias(param)
    del param
    param = groupTwelveRender.getParam("current_state")
    group.getParam("current_state").setAsAlias(param)
    del param
    param = groupFormat1.getParam("state_label")
    groupTwelveRender.getParam("state_label").setAsAlias(param)
    del param
    param = groupFormat1.getParam("format")
    groupTwelveRender.getParam("format").setAsAlias(param)
    del param
    param = groupTwelveRead1.getParam("format")
    group.getParam("format").setAsAlias(param)
    del param
    param = groupTwelveRead1.getParam("speed")
    group.getParam("speed").setAsAlias(param)
    del param
    param = groupTwelveRead1.getParam("sequence_type")
    param.slaveTo(groupTwelveRender.getParam("sequence_type"), 0, 0)
    del param
    param = groupTwelveRead1.getParam("prefix")
    param.slaveTo(groupTwelveRender.getParam("prefix"), 0, 0)
    del param
    param = groupSwitch1.getParam("which")
    param.setExpression("thisGroup.prerender_read.get()", False, 0)
    del param

    try:
        extModule = sys.modules["GlitchTransitionExt"]
    except KeyError:
        extModule = None
    if extModule is not None and hasattr(extModule ,"createInstanceExt") and hasattr(extModule.createInstanceExt,"__call__"):
        extModule.createInstanceExt(app,group)
