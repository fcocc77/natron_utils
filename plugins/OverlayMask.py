# -*- coding: utf-8 -*-
# DO NOT EDIT THIS FILE
# Natron PyPlug
# This file was automatically generated by Natron PyPlug exporter version 10.

# Hand-written code should be added in a separate file named OverlayMaskExt.py
# See http://natron.readthedocs.org/en/master/devel/groups.html#adding-hand-written-code-callbacks-etc
# Note that Viewers are never exported

import NatronEngine
import sys

# Try to import the extensions file where callbacks and hand-written code should be located.
try:
    from OverlayMaskExt import *
except ImportError:
    pass

def getPluginID():
    return "vv.OverlayMask"

def getLabel():
    return "OverlayMask"

def getVersion():
    return 1

def getIconPath():
    return "OverlayMask.png"

def getGrouping():
    return "videovina"

def createInstance(app,group):
    # Create all nodes in the group

    # Create the parameters of the group node the same way we did for all internal nodes
    lastNode = group
    lastNode.setColor(0.7, 0.7, 0.7)

    # Create the user parameters
    lastNode.control = lastNode.createPageParam("control", "Control")
    param = lastNode.createDoubleParam("rscale", "Resolution Scale")
    param.setMinimum(0.1, 0)
    param.setMaximum(4, 0)
    param.setDisplayMinimum(0.1, 0)
    param.setDisplayMaximum(4, 0)

    # Add the param to the page
    lastNode.control.addParam(param)

    # Set param properties
    param.setHelp("")
    param.setAddNewLine(True)
    param.setAnimationEnabled(True)
    param.setValue(1, 0)
    lastNode.rscale = param
    del param

    param = lastNode.createSeparatorParam("sep2", "")

    # Add the param to the page
    lastNode.control.addParam(param)

    # Set param properties
    param.setHelp("")
    param.setAddNewLine(True)
    param.setPersistent(False)
    param.setEvaluateOnChange(False)
    lastNode.sep2 = param
    del param

    param = lastNode.createChoiceParam("mask_channel_a", "Channel A")
    entries = [ ("Red", ""),
    ("Green", ""),
    ("Blue", ""),
    ("Alpha", ""),
    ("None", "")]
    param.setOptions(entries)
    del entries

    # Add the param to the page
    lastNode.control.addParam(param)

    # Set param properties
    param.setHelp("")
    param.setAddNewLine(True)
    param.setAnimationEnabled(True)
    lastNode.mask_channel_a = param
    del param

    param = lastNode.createColorParam("color_a", "Color", False)
    param.setMinimum(-2147483648, 0)
    param.setMaximum(2147483647, 0)
    param.setDisplayMinimum(0, 0)
    param.setDisplayMaximum(1, 0)
    param.setMinimum(-2147483648, 1)
    param.setMaximum(2147483647, 1)
    param.setDisplayMinimum(0, 1)
    param.setDisplayMaximum(1, 1)
    param.setMinimum(-2147483648, 2)
    param.setMaximum(2147483647, 2)
    param.setDisplayMinimum(0, 2)
    param.setDisplayMaximum(1, 2)

    # Add the param to the page
    lastNode.control.addParam(param)

    # Set param properties
    param.setHelp("")
    param.setAddNewLine(False)
    param.setAnimationEnabled(True)
    param.setValue(0.75, 0)
    param.setValue(0.75, 1)
    param.setValue(0.75, 2)
    lastNode.color_a = param
    del param

    param = lastNode.createChoiceParam("mask_channel_b", "Channel B")
    entries = [ ("Red", ""),
    ("Green", ""),
    ("Blue", ""),
    ("Alpha", ""),
    ("None", "")]
    param.setOptions(entries)
    del entries
    param.setDefaultValue("None")
    param.restoreDefaultValue()

    # Add the param to the page
    lastNode.control.addParam(param)

    # Set param properties
    param.setHelp("")
    param.setAddNewLine(True)
    param.setAnimationEnabled(True)
    lastNode.mask_channel_b = param
    del param

    param = lastNode.createColorParam("color_b", "Color", False)
    param.setMinimum(-2147483648, 0)
    param.setMaximum(2147483647, 0)
    param.setDisplayMinimum(0, 0)
    param.setDisplayMaximum(1, 0)
    param.setMinimum(-2147483648, 1)
    param.setMaximum(2147483647, 1)
    param.setDisplayMinimum(0, 1)
    param.setDisplayMaximum(1, 1)
    param.setMinimum(-2147483648, 2)
    param.setMaximum(2147483647, 2)
    param.setDisplayMinimum(0, 2)
    param.setDisplayMaximum(1, 2)

    # Add the param to the page
    lastNode.control.addParam(param)

    # Set param properties
    param.setHelp("")
    param.setAddNewLine(False)
    param.setAnimationEnabled(True)
    param.setValue(0.75, 0)
    param.setValue(0.75, 1)
    param.setValue(0.75, 2)
    lastNode.color_b = param
    del param

    param = lastNode.createChoiceParam("mask_channel_c", "Channel C")
    entries = [ ("Red", ""),
    ("Green", ""),
    ("Blue", ""),
    ("Alpha", ""),
    ("None", "")]
    param.setOptions(entries)
    del entries
    param.setDefaultValue("None")
    param.restoreDefaultValue()

    # Add the param to the page
    lastNode.control.addParam(param)

    # Set param properties
    param.setHelp("")
    param.setAddNewLine(True)
    param.setAnimationEnabled(True)
    lastNode.mask_channel_c = param
    del param

    param = lastNode.createColorParam("color_c", "Color", False)
    param.setMinimum(-2147483648, 0)
    param.setMaximum(2147483647, 0)
    param.setDisplayMinimum(0, 0)
    param.setDisplayMaximum(1, 0)
    param.setMinimum(-2147483648, 1)
    param.setMaximum(2147483647, 1)
    param.setDisplayMinimum(0, 1)
    param.setDisplayMaximum(1, 1)
    param.setMinimum(-2147483648, 2)
    param.setMaximum(2147483647, 2)
    param.setDisplayMinimum(0, 2)
    param.setDisplayMaximum(1, 2)

    # Add the param to the page
    lastNode.control.addParam(param)

    # Set param properties
    param.setHelp("")
    param.setAddNewLine(False)
    param.setAnimationEnabled(True)
    param.setValue(0.75, 0)
    param.setValue(0.75, 1)
    param.setValue(0.75, 2)
    lastNode.color_c = param
    del param

    param = lastNode.createSeparatorParam("sep3", "")

    # Add the param to the page
    lastNode.control.addParam(param)

    # Set param properties
    param.setHelp("")
    param.setAddNewLine(True)
    param.setPersistent(False)
    param.setEvaluateOnChange(False)
    lastNode.sep3 = param
    del param

    param = lastNode.createDoubleParam("emboss", "Emboss")
    param.setMinimum(0, 0)
    param.setMaximum(1, 0)
    param.setDisplayMinimum(0, 0)
    param.setDisplayMaximum(1, 0)

    # Add the param to the page
    lastNode.control.addParam(param)

    # Set param properties
    param.setHelp("")
    param.setAddNewLine(True)
    param.setAnimationEnabled(True)
    param.setValue(1, 0)
    lastNode.emboss = param
    del param

    param = lastNode.createDoubleParam("emboss_distance", "Emboss Distance")
    param.setMinimum(-2147483648, 0)
    param.setMaximum(2147483647, 0)
    param.setDisplayMinimum(0, 0)
    param.setDisplayMaximum(100, 0)

    # Add the param to the page
    lastNode.control.addParam(param)

    # Set param properties
    param.setHelp("")
    param.setAddNewLine(True)
    param.setAnimationEnabled(True)
    param.setValue(10, 0)
    lastNode.emboss_distance = param
    del param

    param = lastNode.createDoubleParam("emboss_blur", "Emboss Blur")
    param.setMinimum(-2147483648, 0)
    param.setMaximum(2147483647, 0)
    param.setDisplayMinimum(0, 0)
    param.setDisplayMaximum(100, 0)

    # Add the param to the page
    lastNode.control.addParam(param)

    # Set param properties
    param.setHelp("")
    param.setAddNewLine(True)
    param.setAnimationEnabled(True)
    param.setValue(1, 0)
    lastNode.emboss_blur = param
    del param

    param = lastNode.createSeparatorParam("sep", "")

    # Add the param to the page
    lastNode.control.addParam(param)

    # Set param properties
    param.setHelp("")
    param.setAddNewLine(True)
    param.setPersistent(False)
    param.setEvaluateOnChange(False)
    lastNode.sep = param
    del param

    param = lastNode.createDoubleParam("shadow", "Shadow")
    param.setMinimum(0, 0)
    param.setMaximum(1, 0)
    param.setDisplayMinimum(0, 0)
    param.setDisplayMaximum(1, 0)

    # Add the param to the page
    lastNode.control.addParam(param)

    # Set param properties
    param.setHelp("")
    param.setAddNewLine(True)
    param.setAnimationEnabled(True)
    param.setValue(0.5, 0)
    lastNode.shadow = param
    del param

    param = lastNode.createDoubleParam("shadow_distance", "Shadow Distance")
    param.setMinimum(-2147483648, 0)
    param.setMaximum(2147483647, 0)
    param.setDisplayMinimum(0, 0)
    param.setDisplayMaximum(100, 0)

    # Add the param to the page
    lastNode.control.addParam(param)

    # Set param properties
    param.setHelp("")
    param.setAddNewLine(True)
    param.setAnimationEnabled(True)
    param.setValue(30, 0)
    lastNode.shadow_distance = param
    del param

    param = lastNode.createDoubleParam("shadow_blur", "Shadow Blur")
    param.setMinimum(-2147483648, 0)
    param.setMaximum(2147483647, 0)
    param.setDisplayMinimum(0, 0)
    param.setDisplayMaximum(100, 0)

    # Add the param to the page
    lastNode.control.addParam(param)

    # Set param properties
    param.setHelp("")
    param.setAddNewLine(True)
    param.setAnimationEnabled(True)
    param.setValue(50, 0)
    lastNode.shadow_blur = param
    del param

    # Refresh the GUI with the newly created parameters
    lastNode.setPagesOrder(['control', 'Node', 'Settings'])
    lastNode.refreshUserParamsGUI()
    del lastNode

    # Start of node "Output1"
    lastNode = app.createNode("fr.inria.built-in.Output", 1, group)
    lastNode.setLabel("Output")
    lastNode.setPosition(1730, 781)
    lastNode.setSize(104, 30)
    lastNode.setColor(0.7, 0.7, 0.7)
    groupOutput1 = lastNode

    del lastNode
    # End of node "Output1"

    # Start of node "Mask"
    lastNode = app.createNode("fr.inria.built-in.Input", 1, group)
    lastNode.setScriptName("Mask")
    lastNode.setLabel("Mask")
    lastNode.setPosition(462, -612)
    lastNode.setSize(104, 30)
    lastNode.setColor(0.3, 0.5, 0.2)
    groupMask = lastNode

    del lastNode
    # End of node "Mask"

    # Start of node "Transform2"
    lastNode = app.createNode("net.sf.openfx.TransformPlugin", 1, group)
    lastNode.setScriptName("Transform2")
    lastNode.setLabel("Transform2")
    lastNode.setPosition(-497, -159)
    lastNode.setSize(104, 32)
    lastNode.setColor(0.7, 0.3, 0.1)
    groupTransform2 = lastNode

    param = lastNode.getParam("translate")
    if param is not None:
        param.setValue(-10, 1)
        del param

    param = lastNode.getParam("black_outside")
    if param is not None:
        param.setValue(False)
        del param

    del lastNode
    # End of node "Transform2"

    # Start of node "Dot1"
    lastNode = app.createNode("fr.inria.built-in.Dot", 1, group)
    lastNode.setScriptName("Dot1")
    lastNode.setLabel("Dot1")
    lastNode.setPosition(-263, -212)
    lastNode.setSize(15, 15)
    lastNode.setColor(0.7, 0.7, 0.7)
    groupDot1 = lastNode

    del lastNode
    # End of node "Dot1"

    # Start of node "Merge2"
    lastNode = app.createNode("net.sf.openfx.MergePlugin", 1, group)
    lastNode.setScriptName("Merge2")
    lastNode.setLabel("Merge2")
    lastNode.setPosition(-308, -110)
    lastNode.setSize(104, 45)
    lastNode.setColor(0.3, 0.37, 0.776)
    groupMerge2 = lastNode

    param = lastNode.getParam("operation")
    if param is not None:
        param.set("stencil")
        del param

    param = lastNode.getParam("userTextArea")
    if param is not None:
        param.setValue("<Natron>(over)</Natron>")
        del param

    del lastNode
    # End of node "Merge2"

    # Start of node "Blur2"
    lastNode = app.createNode("net.sf.cimg.CImgBlur", 4, group)
    lastNode.setScriptName("Blur2")
    lastNode.setLabel("Blur2")
    lastNode.setPosition(-305, -1)
    lastNode.setSize(104, 30)
    lastNode.setColor(0.8, 0.5, 0.3)
    groupBlur2 = lastNode

    param = lastNode.getParam("size")
    if param is not None:
        param.setValue(1, 0)
        param.setValue(1, 1)
        del param

    del lastNode
    # End of node "Blur2"

    # Start of node "Dot3"
    lastNode = app.createNode("fr.inria.built-in.Dot", 1, group)
    lastNode.setScriptName("Dot3")
    lastNode.setLabel("Dot3")
    lastNode.setPosition(-452, -212)
    lastNode.setSize(15, 15)
    lastNode.setColor(0.7, 0.7, 0.7)
    groupDot3 = lastNode

    del lastNode
    # End of node "Dot3"

    # Start of node "channel_a"
    lastNode = app.createNode("net.sf.openfx.ShufflePlugin", 3, group)
    lastNode.setScriptName("channel_a")
    lastNode.setLabel("channel_a")
    lastNode.setPosition(-150, -434)
    lastNode.setSize(104, 32)
    lastNode.setColor(0.6, 0.24, 0.39)
    groupchannel_a = lastNode

    param = lastNode.getParam("outputR")
    if param is not None:
        param.set("A.uk.co.thefoundry.OfxImagePlaneColour.R")
        del param

    param = lastNode.getParam("outputG")
    if param is not None:
        param.set("A.uk.co.thefoundry.OfxImagePlaneColour.R")
        del param

    param = lastNode.getParam("outputB")
    if param is not None:
        param.set("A.uk.co.thefoundry.OfxImagePlaneColour.R")
        del param

    param = lastNode.getParam("outputA")
    if param is not None:
        param.set("A.uk.co.thefoundry.OfxImagePlaneColour.R")
        del param

    del lastNode
    # End of node "channel_a"

    # Start of node "Shadow2"
    lastNode = app.createNode("vv.DropShadow", 1, group)
    lastNode.setScriptName("Shadow2")
    lastNode.setLabel("Shadow2")
    lastNode.setPosition(1082, 151)
    lastNode.setSize(104, 32)
    lastNode.setColor(0.7, 0.7, 0.7)
    groupShadow2 = lastNode


    # Create the user parameters
    lastNode.control = lastNode.createPageParam("control", "Control")
    param = lastNode.createDoubleParam("angle", "Angle")
    param.setMinimum(0, 0)
    param.setMaximum(360, 0)
    param.setDisplayMinimum(0, 0)
    param.setDisplayMaximum(360, 0)

    # Add the param to the page
    lastNode.control.addParam(param)

    # Set param properties
    param.setHelp("")
    param.setAddNewLine(True)
    param.setAnimationEnabled(True)
    param.setValue(90, 0)
    lastNode.angle = param
    del param

    param = lastNode.createIntParam("distance", "Distance")
    param.setMinimum(0, 0)
    param.setMaximum(100, 0)
    param.setDisplayMinimum(0, 0)
    param.setDisplayMaximum(100, 0)
    param.setDefaultValue(0, 0)
    param.restoreDefaultValue(0)

    # Add the param to the page
    lastNode.control.addParam(param)

    # Set param properties
    param.setHelp("")
    param.setAddNewLine(True)
    param.setAnimationEnabled(True)
    param.setValue(30, 0)
    lastNode.distance = param
    del param

    param = lastNode.createDoubleParam("opacity", "Opacity")
    param.setMinimum(0, 0)
    param.setMaximum(1, 0)
    param.setDisplayMinimum(0, 0)
    param.setDisplayMaximum(1, 0)

    # Add the param to the page
    lastNode.control.addParam(param)

    # Set param properties
    param.setHelp("")
    param.setAddNewLine(True)
    param.setAnimationEnabled(True)
    param.setValue(0.5, 0)
    lastNode.opacity = param
    del param

    param = lastNode.createIntParam("blur", "Blur")
    param.setMinimum(0, 0)
    param.setMaximum(100, 0)
    param.setDisplayMinimum(0, 0)
    param.setDisplayMaximum(100, 0)
    param.setDefaultValue(0, 0)
    param.restoreDefaultValue(0)

    # Add the param to the page
    lastNode.control.addParam(param)

    # Set param properties
    param.setHelp("")
    param.setAddNewLine(True)
    param.setAnimationEnabled(True)
    param.setValue(50, 0)
    lastNode.blur = param
    del param

    # Refresh the GUI with the newly created parameters
    lastNode.setPagesOrder(['control', 'Node', 'Settings'])
    lastNode.refreshUserParamsGUI()
    del lastNode
    # End of node "Shadow2"

    # Start of node "Constant1"
    lastNode = app.createNode("net.sf.openfx.ConstantPlugin", 1, group)
    lastNode.setScriptName("Constant1")
    lastNode.setLabel("Constant1")
    lastNode.setPosition(1730, 61)
    lastNode.setSize(104, 32)
    lastNode.setColor(0.3, 0.5, 0.2)
    groupConstant1 = lastNode

    param = lastNode.getParam("NatronParamFormatChoice")
    if param is not None:
        param.set("PC_Video")
        del param

    param = lastNode.getParam("color")
    if param is not None:
        param.setValue(0.5, 0)
        param.setValue(0.5, 1)
        param.setValue(0.5, 2)
        param.setValue(0.5, 3)
        del param

    del lastNode
    # End of node "Constant1"

    # Start of node "Merge3"
    lastNode = app.createNode("net.sf.openfx.MergePlugin", 1, group)
    lastNode.setScriptName("Merge3")
    lastNode.setLabel("Merge3")
    lastNode.setPosition(1730, 294)
    lastNode.setSize(104, 55)
    lastNode.setColor(0.3, 0.37, 0.776)
    groupMerge3 = lastNode

    del lastNode
    # End of node "Merge3"

    # Start of node "color_node"
    lastNode = app.createNode("net.sf.openfx.GradePlugin", 2, group)
    lastNode.setScriptName("color_node")
    lastNode.setLabel("color_node")
    lastNode.setPosition(-150, -141)
    lastNode.setSize(104, 32)
    lastNode.setColor(0.48, 0.66, 1)
    groupcolor_node = lastNode

    param = lastNode.getParam("white")
    if param is not None:
        param.setValue(0.75, 0)
        param.setValue(0.75, 1)
        param.setValue(0.75, 2)
        param.setValue(1, 3)
        del param

    del lastNode
    # End of node "color_node"

    # Start of node "channel_b"
    lastNode = app.createNode("net.sf.openfx.ShufflePlugin", 3, group)
    lastNode.setScriptName("channel_b")
    lastNode.setLabel("channel_b")
    lastNode.setPosition(462, -438)
    lastNode.setSize(104, 32)
    lastNode.setColor(0.6, 0.24, 0.39)
    groupchannel_b = lastNode

    param = lastNode.getParam("outputR")
    if param is not None:
        param.set("0")
        del param

    param = lastNode.getParam("outputG")
    if param is not None:
        param.set("0")
        del param

    param = lastNode.getParam("outputB")
    if param is not None:
        param.set("0")
        del param

    param = lastNode.getParam("outputA")
    if param is not None:
        param.set("0")
        del param

    del lastNode
    # End of node "channel_b"

    # Start of node "channel_c"
    lastNode = app.createNode("net.sf.openfx.ShufflePlugin", 3, group)
    lastNode.setScriptName("channel_c")
    lastNode.setLabel("channel_c")
    lastNode.setPosition(1083, -438)
    lastNode.setSize(104, 32)
    lastNode.setColor(0.6, 0.24, 0.39)
    groupchannel_c = lastNode

    param = lastNode.getParam("outputR")
    if param is not None:
        param.set("0")
        del param

    param = lastNode.getParam("outputG")
    if param is not None:
        param.set("0")
        del param

    param = lastNode.getParam("outputB")
    if param is not None:
        param.set("0")
        del param

    param = lastNode.getParam("outputA")
    if param is not None:
        param.set("0")
        del param

    del lastNode
    # End of node "channel_c"

    # Start of node "Merge4"
    lastNode = app.createNode("net.sf.openfx.MergePlugin", 1, group)
    lastNode.setScriptName("Merge4")
    lastNode.setLabel("Merge4")
    lastNode.setPosition(-150, -15)
    lastNode.setSize(104, 55)
    lastNode.setColor(0.3, 0.37, 0.776)
    groupMerge4 = lastNode

    param = lastNode.getParam("operation")
    if param is not None:
        param.set("screen")
        del param

    param = lastNode.getParam("mix")
    if param is not None:
        param.setValue(1, 0)
        del param

    del lastNode
    # End of node "Merge4"

    # Start of node "Dot2"
    lastNode = app.createNode("fr.inria.built-in.Dot", 1, group)
    lastNode.setScriptName("Dot2")
    lastNode.setLabel("Dot2")
    lastNode.setPosition(-105, -212)
    lastNode.setSize(15, 15)
    lastNode.setColor(0.7, 0.7, 0.7)
    groupDot2 = lastNode

    del lastNode
    # End of node "Dot2"

    # Start of node "Transform2_2"
    lastNode = app.createNode("net.sf.openfx.TransformPlugin", 1, group)
    lastNode.setScriptName("Transform2_2")
    lastNode.setLabel("Transform2_2")
    lastNode.setPosition(114, -111)
    lastNode.setSize(104, 32)
    lastNode.setColor(0.7, 0.3, 0.1)
    groupTransform2_2 = lastNode

    param = lastNode.getParam("translate")
    if param is not None:
        param.setValue(-10, 1)
        del param

    param = lastNode.getParam("black_outside")
    if param is not None:
        param.setValue(False)
        del param

    del lastNode
    # End of node "Transform2_2"

    # Start of node "Dot1_2"
    lastNode = app.createNode("fr.inria.built-in.Dot", 1, group)
    lastNode.setScriptName("Dot1_2")
    lastNode.setLabel("Dot1_2")
    lastNode.setPosition(348, -183)
    lastNode.setSize(15, 15)
    lastNode.setColor(0.7, 0.7, 0.7)
    groupDot1_2 = lastNode

    del lastNode
    # End of node "Dot1_2"

    # Start of node "Merge2_2"
    lastNode = app.createNode("net.sf.openfx.MergePlugin", 1, group)
    lastNode.setScriptName("Merge2_2")
    lastNode.setLabel("Merge2_2")
    lastNode.setPosition(303, -61)
    lastNode.setSize(104, 45)
    lastNode.setColor(0.3, 0.37, 0.776)
    groupMerge2_2 = lastNode

    param = lastNode.getParam("operation")
    if param is not None:
        param.set("stencil")
        del param

    param = lastNode.getParam("userTextArea")
    if param is not None:
        param.setValue("<Natron>(stencil)</Natron>")
        del param

    del lastNode
    # End of node "Merge2_2"

    # Start of node "Blur2_2"
    lastNode = app.createNode("net.sf.cimg.CImgBlur", 4, group)
    lastNode.setScriptName("Blur2_2")
    lastNode.setLabel("Blur2_2")
    lastNode.setPosition(306, 28)
    lastNode.setSize(104, 32)
    lastNode.setColor(0.8, 0.5, 0.3)
    groupBlur2_2 = lastNode

    param = lastNode.getParam("size")
    if param is not None:
        param.setValue(1, 0)
        param.setValue(1, 1)
        del param

    del lastNode
    # End of node "Blur2_2"

    # Start of node "Dot3_2"
    lastNode = app.createNode("fr.inria.built-in.Dot", 1, group)
    lastNode.setScriptName("Dot3_2")
    lastNode.setLabel("Dot3_2")
    lastNode.setPosition(159, -183)
    lastNode.setSize(15, 15)
    lastNode.setColor(0.7, 0.7, 0.7)
    groupDot3_2 = lastNode

    del lastNode
    # End of node "Dot3_2"

    # Start of node "color_node_2"
    lastNode = app.createNode("net.sf.openfx.GradePlugin", 2, group)
    lastNode.setScriptName("color_node_2")
    lastNode.setLabel("color_node_2")
    lastNode.setPosition(461, -112)
    lastNode.setSize(104, 32)
    lastNode.setColor(0.48, 0.66, 1)
    groupcolor_node_2 = lastNode

    param = lastNode.getParam("white")
    if param is not None:
        param.setValue(0.75, 0)
        param.setValue(0.75, 1)
        param.setValue(0.75, 2)
        param.setValue(1, 3)
        del param

    del lastNode
    # End of node "color_node_2"

    # Start of node "Merge4_2"
    lastNode = app.createNode("net.sf.openfx.MergePlugin", 1, group)
    lastNode.setScriptName("Merge4_2")
    lastNode.setLabel("Merge4_2")
    lastNode.setPosition(461, 17)
    lastNode.setSize(104, 55)
    lastNode.setColor(0.3, 0.37, 0.776)
    groupMerge4_2 = lastNode

    param = lastNode.getParam("operation")
    if param is not None:
        param.set("screen")
        del param

    param = lastNode.getParam("mix")
    if param is not None:
        param.setValue(1, 0)
        del param

    del lastNode
    # End of node "Merge4_2"

    # Start of node "Dot2_2"
    lastNode = app.createNode("fr.inria.built-in.Dot", 1, group)
    lastNode.setScriptName("Dot2_2")
    lastNode.setLabel("Dot2_2")
    lastNode.setPosition(506, -183)
    lastNode.setSize(15, 15)
    lastNode.setColor(0.7, 0.7, 0.7)
    groupDot2_2 = lastNode

    del lastNode
    # End of node "Dot2_2"

    # Start of node "Transform2_3"
    lastNode = app.createNode("net.sf.openfx.TransformPlugin", 1, group)
    lastNode.setScriptName("Transform2_3")
    lastNode.setLabel("Transform2_3")
    lastNode.setPosition(736, -147)
    lastNode.setSize(104, 32)
    lastNode.setColor(0.7, 0.3, 0.1)
    groupTransform2_3 = lastNode

    param = lastNode.getParam("translate")
    if param is not None:
        param.setValue(-10, 1)
        del param

    param = lastNode.getParam("black_outside")
    if param is not None:
        param.setValue(False)
        del param

    del lastNode
    # End of node "Transform2_3"

    # Start of node "Dot1_3"
    lastNode = app.createNode("fr.inria.built-in.Dot", 1, group)
    lastNode.setScriptName("Dot1_3")
    lastNode.setLabel("Dot1_3")
    lastNode.setPosition(970, -186)
    lastNode.setSize(15, 15)
    lastNode.setColor(0.7, 0.7, 0.7)
    groupDot1_3 = lastNode

    del lastNode
    # End of node "Dot1_3"

    # Start of node "Merge2_3"
    lastNode = app.createNode("net.sf.openfx.MergePlugin", 1, group)
    lastNode.setScriptName("Merge2_3")
    lastNode.setLabel("Merge2_3")
    lastNode.setPosition(925, -77)
    lastNode.setSize(104, 45)
    lastNode.setColor(0.3, 0.37, 0.776)
    groupMerge2_3 = lastNode

    param = lastNode.getParam("operation")
    if param is not None:
        param.set("stencil")
        del param

    param = lastNode.getParam("userTextArea")
    if param is not None:
        param.setValue("<Natron>(stencil)</Natron>")
        del param

    del lastNode
    # End of node "Merge2_3"

    # Start of node "Blur2_3"
    lastNode = app.createNode("net.sf.cimg.CImgBlur", 4, group)
    lastNode.setScriptName("Blur2_3")
    lastNode.setLabel("Blur2_3")
    lastNode.setPosition(928, 25)
    lastNode.setSize(104, 32)
    lastNode.setColor(0.8, 0.5, 0.3)
    groupBlur2_3 = lastNode

    param = lastNode.getParam("size")
    if param is not None:
        param.setValue(1, 0)
        param.setValue(1, 1)
        del param

    del lastNode
    # End of node "Blur2_3"

    # Start of node "Dot3_3"
    lastNode = app.createNode("fr.inria.built-in.Dot", 1, group)
    lastNode.setScriptName("Dot3_3")
    lastNode.setLabel("Dot3_3")
    lastNode.setPosition(781, -186)
    lastNode.setSize(15, 15)
    lastNode.setColor(0.7, 0.7, 0.7)
    groupDot3_3 = lastNode

    del lastNode
    # End of node "Dot3_3"

    # Start of node "color_node_3"
    lastNode = app.createNode("net.sf.openfx.GradePlugin", 2, group)
    lastNode.setScriptName("color_node_3")
    lastNode.setLabel("color_node_3")
    lastNode.setPosition(1083, -115)
    lastNode.setSize(104, 32)
    lastNode.setColor(0.48, 0.66, 1)
    groupcolor_node_3 = lastNode

    param = lastNode.getParam("white")
    if param is not None:
        param.setValue(0.75, 0)
        param.setValue(0.75, 1)
        param.setValue(0.75, 2)
        param.setValue(1, 3)
        del param

    del lastNode
    # End of node "color_node_3"

    # Start of node "Merge4_3"
    lastNode = app.createNode("net.sf.openfx.MergePlugin", 1, group)
    lastNode.setScriptName("Merge4_3")
    lastNode.setLabel("Merge4_3")
    lastNode.setPosition(1083, 13)
    lastNode.setSize(104, 55)
    lastNode.setColor(0.3, 0.37, 0.776)
    groupMerge4_3 = lastNode

    param = lastNode.getParam("operation")
    if param is not None:
        param.set("screen")
        del param

    param = lastNode.getParam("mix")
    if param is not None:
        param.setValue(1, 0)
        del param

    del lastNode
    # End of node "Merge4_3"

    # Start of node "Dot2_3"
    lastNode = app.createNode("fr.inria.built-in.Dot", 1, group)
    lastNode.setScriptName("Dot2_3")
    lastNode.setLabel("Dot2_3")
    lastNode.setPosition(1128, -186)
    lastNode.setSize(15, 15)
    lastNode.setColor(0.7, 0.7, 0.7)
    groupDot2_3 = lastNode

    del lastNode
    # End of node "Dot2_3"

    # Start of node "Merge1"
    lastNode = app.createNode("net.sf.openfx.MergePlugin", 1, group)
    lastNode.setScriptName("Merge1")
    lastNode.setLabel("Merge1")
    lastNode.setPosition(461, 294)
    lastNode.setSize(104, 55)
    lastNode.setColor(0.3, 0.37, 0.776)
    groupMerge1 = lastNode

    del lastNode
    # End of node "Merge1"

    # Start of node "Shadow2_2"
    lastNode = app.createNode("vv.DropShadow", 1, group)
    lastNode.setScriptName("Shadow2_2")
    lastNode.setLabel("Shadow2_2")
    lastNode.setPosition(461, 149)
    lastNode.setSize(104, 32)
    lastNode.setColor(0.7, 0.7, 0.7)
    groupShadow2_2 = lastNode


    # Create the user parameters
    lastNode.control = lastNode.createPageParam("control", "Control")
    param = lastNode.createDoubleParam("angle", "Angle")
    param.setMinimum(0, 0)
    param.setMaximum(360, 0)
    param.setDisplayMinimum(0, 0)
    param.setDisplayMaximum(360, 0)

    # Add the param to the page
    lastNode.control.addParam(param)

    # Set param properties
    param.setHelp("")
    param.setAddNewLine(True)
    param.setAnimationEnabled(True)
    param.setValue(90, 0)
    lastNode.angle = param
    del param

    param = lastNode.createIntParam("distance", "Distance")
    param.setMinimum(0, 0)
    param.setMaximum(100, 0)
    param.setDisplayMinimum(0, 0)
    param.setDisplayMaximum(100, 0)
    param.setDefaultValue(0, 0)
    param.restoreDefaultValue(0)

    # Add the param to the page
    lastNode.control.addParam(param)

    # Set param properties
    param.setHelp("")
    param.setAddNewLine(True)
    param.setAnimationEnabled(True)
    param.setValue(30, 0)
    lastNode.distance = param
    del param

    param = lastNode.createDoubleParam("opacity", "Opacity")
    param.setMinimum(0, 0)
    param.setMaximum(1, 0)
    param.setDisplayMinimum(0, 0)
    param.setDisplayMaximum(1, 0)

    # Add the param to the page
    lastNode.control.addParam(param)

    # Set param properties
    param.setHelp("")
    param.setAddNewLine(True)
    param.setAnimationEnabled(True)
    param.setValue(0.5, 0)
    lastNode.opacity = param
    del param

    param = lastNode.createIntParam("blur", "Blur")
    param.setMinimum(0, 0)
    param.setMaximum(100, 0)
    param.setDisplayMinimum(0, 0)
    param.setDisplayMaximum(100, 0)
    param.setDefaultValue(0, 0)
    param.restoreDefaultValue(0)

    # Add the param to the page
    lastNode.control.addParam(param)

    # Set param properties
    param.setHelp("")
    param.setAddNewLine(True)
    param.setAnimationEnabled(True)
    param.setValue(50, 0)
    lastNode.blur = param
    del param

    # Refresh the GUI with the newly created parameters
    lastNode.setPagesOrder(['control', 'Node', 'Settings'])
    lastNode.refreshUserParamsGUI()
    del lastNode
    # End of node "Shadow2_2"

    # Start of node "Shadow2_3"
    lastNode = app.createNode("vv.DropShadow", 1, group)
    lastNode.setScriptName("Shadow2_3")
    lastNode.setLabel("Shadow2_3")
    lastNode.setPosition(-150, 119)
    lastNode.setSize(104, 32)
    lastNode.setColor(0.7, 0.7, 0.7)
    groupShadow2_3 = lastNode


    # Create the user parameters
    lastNode.control = lastNode.createPageParam("control", "Control")
    param = lastNode.createDoubleParam("angle", "Angle")
    param.setMinimum(0, 0)
    param.setMaximum(360, 0)
    param.setDisplayMinimum(0, 0)
    param.setDisplayMaximum(360, 0)

    # Add the param to the page
    lastNode.control.addParam(param)

    # Set param properties
    param.setHelp("")
    param.setAddNewLine(True)
    param.setAnimationEnabled(True)
    param.setValue(90, 0)
    lastNode.angle = param
    del param

    param = lastNode.createIntParam("distance", "Distance")
    param.setMinimum(0, 0)
    param.setMaximum(100, 0)
    param.setDisplayMinimum(0, 0)
    param.setDisplayMaximum(100, 0)
    param.setDefaultValue(0, 0)
    param.restoreDefaultValue(0)

    # Add the param to the page
    lastNode.control.addParam(param)

    # Set param properties
    param.setHelp("")
    param.setAddNewLine(True)
    param.setAnimationEnabled(True)
    param.setValue(30, 0)
    lastNode.distance = param
    del param

    param = lastNode.createDoubleParam("opacity", "Opacity")
    param.setMinimum(0, 0)
    param.setMaximum(1, 0)
    param.setDisplayMinimum(0, 0)
    param.setDisplayMaximum(1, 0)

    # Add the param to the page
    lastNode.control.addParam(param)

    # Set param properties
    param.setHelp("")
    param.setAddNewLine(True)
    param.setAnimationEnabled(True)
    param.setValue(0.5, 0)
    lastNode.opacity = param
    del param

    param = lastNode.createIntParam("blur", "Blur")
    param.setMinimum(0, 0)
    param.setMaximum(100, 0)
    param.setDisplayMinimum(0, 0)
    param.setDisplayMaximum(100, 0)
    param.setDefaultValue(0, 0)
    param.restoreDefaultValue(0)

    # Add the param to the page
    lastNode.control.addParam(param)

    # Set param properties
    param.setHelp("")
    param.setAddNewLine(True)
    param.setAnimationEnabled(True)
    param.setValue(50, 0)
    lastNode.blur = param
    del param

    # Refresh the GUI with the newly created parameters
    lastNode.setPagesOrder(['control', 'Node', 'Settings'])
    lastNode.refreshUserParamsGUI()
    del lastNode
    # End of node "Shadow2_3"

    # Start of node "Merge5"
    lastNode = app.createNode("net.sf.openfx.MergePlugin", 1, group)
    lastNode.setScriptName("Merge5")
    lastNode.setLabel("Merge5")
    lastNode.setPosition(1470, -291)
    lastNode.setSize(104, 55)
    lastNode.setColor(0.3, 0.37, 0.776)
    groupMerge5 = lastNode

    del lastNode
    # End of node "Merge5"

    # Start of node "Shuffle1"
    lastNode = app.createNode("net.sf.openfx.ShufflePlugin", 3, group)
    lastNode.setScriptName("Shuffle1")
    lastNode.setLabel("Shuffle1")
    lastNode.setPosition(1730, 602)
    lastNode.setSize(104, 32)
    lastNode.setColor(0.6, 0.24, 0.39)
    groupShuffle1 = lastNode

    param = lastNode.getParam("outputA")
    if param is not None:
        param.set("A.uk.co.thefoundry.OfxImagePlaneColour.A")
        del param

    del lastNode
    # End of node "Shuffle1"

    # Start of node "Dot4"
    lastNode = app.createNode("fr.inria.built-in.Dot", 1, group)
    lastNode.setScriptName("Dot4")
    lastNode.setLabel("Dot4")
    lastNode.setPosition(1515, 611)
    lastNode.setSize(15, 15)
    lastNode.setColor(0.7, 0.7, 0.7)
    groupDot4 = lastNode

    del lastNode
    # End of node "Dot4"

    # Start of node "Crop1"
    lastNode = app.createNode("net.sf.openfx.CropPlugin", 1, group)
    lastNode.setScriptName("Crop1")
    lastNode.setLabel("Crop1")
    lastNode.setPosition(736, -71)
    lastNode.setSize(104, 32)
    lastNode.setColor(0.7, 0.3, 0.1)
    groupCrop1 = lastNode

    param = lastNode.getParam("NatronParamFormatChoice")
    if param is not None:
        param.set("PC_Video")
        del param

    del lastNode
    # End of node "Crop1"

    # Start of node "Crop2"
    lastNode = app.createNode("net.sf.openfx.CropPlugin", 1, group)
    lastNode.setScriptName("Crop2")
    lastNode.setLabel("Crop2")
    lastNode.setPosition(114, -55)
    lastNode.setSize(104, 32)
    lastNode.setColor(0.7, 0.3, 0.1)
    groupCrop2 = lastNode

    param = lastNode.getParam("NatronParamFormatChoice")
    if param is not None:
        param.set("PC_Video")
        del param

    del lastNode
    # End of node "Crop2"

    # Start of node "Crop3"
    lastNode = app.createNode("net.sf.openfx.CropPlugin", 1, group)
    lastNode.setScriptName("Crop3")
    lastNode.setLabel("Crop3")
    lastNode.setPosition(-497, -104)
    lastNode.setSize(104, 32)
    lastNode.setColor(0.7, 0.3, 0.1)
    groupCrop3 = lastNode

    param = lastNode.getParam("NatronParamFormatChoice")
    if param is not None:
        param.set("PC_Video")
        del param

    del lastNode
    # End of node "Crop3"

    # Now that all nodes are created we can connect them together, restore expressions
    groupOutput1.connectInput(0, groupShuffle1)
    groupTransform2.connectInput(0, groupDot3)
    groupDot1.connectInput(0, groupDot2)
    groupMerge2.connectInput(0, groupDot1)
    groupMerge2.connectInput(1, groupCrop3)
    groupBlur2.connectInput(0, groupMerge2)
    groupDot3.connectInput(0, groupDot1)
    groupchannel_a.connectInput(1, groupMask)
    groupShadow2.connectInput(0, groupMerge4_3)
    groupMerge3.connectInput(0, groupConstant1)
    groupMerge3.connectInput(1, groupMerge1)
    groupcolor_node.connectInput(0, groupDot2)
    groupchannel_b.connectInput(1, groupMask)
    groupchannel_c.connectInput(1, groupMask)
    groupMerge4.connectInput(0, groupcolor_node)
    groupMerge4.connectInput(1, groupBlur2)
    groupDot2.connectInput(0, groupchannel_a)
    groupTransform2_2.connectInput(0, groupDot3_2)
    groupDot1_2.connectInput(0, groupDot2_2)
    groupMerge2_2.connectInput(0, groupDot1_2)
    groupMerge2_2.connectInput(1, groupCrop2)
    groupBlur2_2.connectInput(0, groupMerge2_2)
    groupDot3_2.connectInput(0, groupDot1_2)
    groupcolor_node_2.connectInput(0, groupDot2_2)
    groupMerge4_2.connectInput(0, groupcolor_node_2)
    groupMerge4_2.connectInput(1, groupBlur2_2)
    groupDot2_2.connectInput(0, groupchannel_b)
    groupTransform2_3.connectInput(0, groupDot3_3)
    groupDot1_3.connectInput(0, groupDot2_3)
    groupMerge2_3.connectInput(0, groupDot1_3)
    groupMerge2_3.connectInput(1, groupCrop1)
    groupBlur2_3.connectInput(0, groupMerge2_3)
    groupDot3_3.connectInput(0, groupDot1_3)
    groupcolor_node_3.connectInput(0, groupDot2_3)
    groupMerge4_3.connectInput(0, groupcolor_node_3)
    groupMerge4_3.connectInput(1, groupBlur2_3)
    groupDot2_3.connectInput(0, groupchannel_c)
    groupMerge1.connectInput(0, groupShadow2_3)
    groupMerge1.connectInput(1, groupShadow2_2)
    groupMerge1.connectInput(3, groupShadow2)
    groupShadow2_2.connectInput(0, groupMerge4_2)
    groupShadow2_3.connectInput(0, groupMerge4)
    groupMerge5.connectInput(0, groupchannel_c)
    groupMerge5.connectInput(1, groupchannel_b)
    groupMerge5.connectInput(3, groupchannel_a)
    groupShuffle1.connectInput(0, groupMerge3)
    groupShuffle1.connectInput(1, groupDot4)
    groupDot4.connectInput(0, groupMerge5)
    groupCrop1.connectInput(0, groupTransform2_3)
    groupCrop2.connectInput(0, groupTransform2_2)
    groupCrop3.connectInput(0, groupTransform2)

    param = groupTransform2.getParam("translate")
    param.setExpression("-thisGroup.emboss_distance.get() * thisGroup.rscale.get()", False, 1)
    del param
    param = groupBlur2.getParam("size")
    param.setExpression("thisGroup.emboss_blur.get() * thisGroup.rscale.get()", False, 0)
    param.setExpression("thisGroup.emboss_blur.get() * thisGroup.rscale.get()", False, 1)
    del param
    param = groupchannel_a.getParam("outputR")
    param.setExpression("thisGroup.mask_channel_a.get()", False, 0)
    del param
    param = groupchannel_a.getParam("outputG")
    param.setExpression("thisGroup.mask_channel_a.get()", False, 0)
    del param
    param = groupchannel_a.getParam("outputB")
    param.setExpression("thisGroup.mask_channel_a.get()", False, 0)
    del param
    param = groupchannel_a.getParam("outputA")
    param.setExpression("thisGroup.mask_channel_a.get()", False, 0)
    del param
    param = groupShadow2.getParam("distance")
    param.setExpression("thisGroup.shadow_distance.get() * thisGroup.rscale.get()", False, 0)
    del param
    param = groupShadow2.getParam("opacity")
    param.setExpression("thisGroup.shadow.get()", False, 0)
    del param
    param = groupShadow2.getParam("blur")
    param.setExpression("thisGroup.shadow_blur.get() * thisGroup.rscale.get()", False, 0)
    del param
    param = groupcolor_node.getParam("white")
    param.setExpression("thisGroup.color_a.get()[dimension]", False, 0)
    param.setExpression("thisGroup.color_a.get()[dimension]", False, 1)
    param.setExpression("thisGroup.color_a.get()[dimension]", False, 2)
    param.setExpression("thisGroup.color_a.get()[dimension]", False, 3)
    del param
    param = groupchannel_b.getParam("outputR")
    param.setExpression("thisGroup.mask_channel_b.get()", False, 0)
    del param
    param = groupchannel_b.getParam("outputG")
    param.setExpression("thisGroup.mask_channel_b.get()", False, 0)
    del param
    param = groupchannel_b.getParam("outputB")
    param.setExpression("thisGroup.mask_channel_b.get()", False, 0)
    del param
    param = groupchannel_b.getParam("outputA")
    param.setExpression("thisGroup.mask_channel_b.get()", False, 0)
    del param
    param = groupchannel_c.getParam("outputR")
    param.setExpression("thisGroup.mask_channel_c.get()", False, 0)
    del param
    param = groupchannel_c.getParam("outputG")
    param.setExpression("thisGroup.mask_channel_c.get()", False, 0)
    del param
    param = groupchannel_c.getParam("outputB")
    param.setExpression("thisGroup.mask_channel_c.get()", False, 0)
    del param
    param = groupchannel_c.getParam("outputA")
    param.setExpression("thisGroup.mask_channel_c.get()", False, 0)
    del param
    param = groupMerge4.getParam("mix")
    param.setExpression("thisGroup.emboss.get()", False, 0)
    del param
    param = groupTransform2_2.getParam("translate")
    param.setExpression("-thisGroup.emboss_distance.get() * thisGroup.rscale.get()", False, 1)
    del param
    param = groupBlur2_2.getParam("size")
    param.setExpression("thisGroup.emboss_blur.get() * thisGroup.rscale.get()", False, 0)
    param.setExpression("thisGroup.emboss_blur.get() * thisGroup.rscale.get()", False, 1)
    del param
    param = groupcolor_node_2.getParam("white")
    param.setExpression("thisGroup.color_b.get()[dimension]", False, 0)
    param.setExpression("thisGroup.color_b.get()[dimension]", False, 1)
    param.setExpression("thisGroup.color_b.get()[dimension]", False, 2)
    param.setExpression("thisGroup.color_b.get()[dimension]", False, 3)
    del param
    param = groupMerge4_2.getParam("mix")
    param.setExpression("thisGroup.emboss.get()", False, 0)
    del param
    param = groupTransform2_3.getParam("translate")
    param.setExpression("-thisGroup.emboss_distance.get() * thisGroup.rscale.get()", False, 1)
    del param
    param = groupBlur2_3.getParam("size")
    param.setExpression("thisGroup.emboss_blur.get() * thisGroup.rscale.get()", False, 0)
    param.setExpression("thisGroup.emboss_blur.get() * thisGroup.rscale.get()", False, 1)
    del param
    param = groupcolor_node_3.getParam("white")
    param.setExpression("thisGroup.color_c.get()[dimension]", False, 0)
    param.setExpression("thisGroup.color_c.get()[dimension]", False, 1)
    param.setExpression("thisGroup.color_c.get()[dimension]", False, 2)
    param.setExpression("thisGroup.color_c.get()[dimension]", False, 3)
    del param
    param = groupMerge4_3.getParam("mix")
    param.setExpression("thisGroup.emboss.get()", False, 0)
    del param
    param = groupShadow2_2.getParam("distance")
    param.setExpression("thisGroup.shadow_distance.get() * thisGroup.rscale.get()", False, 0)
    del param
    param = groupShadow2_2.getParam("opacity")
    param.setExpression("thisGroup.shadow.get()", False, 0)
    del param
    param = groupShadow2_2.getParam("blur")
    param.setExpression("thisGroup.shadow_blur.get() * thisGroup.rscale.get()", False, 0)
    del param
    param = groupShadow2_3.getParam("distance")
    param.setExpression("thisGroup.shadow_distance.get() * thisGroup.rscale.get()", False, 0)
    del param
    param = groupShadow2_3.getParam("opacity")
    param.setExpression("thisGroup.shadow.get()", False, 0)
    del param
    param = groupShadow2_3.getParam("blur")
    param.setExpression("thisGroup.shadow_blur.get() * thisGroup.rscale.get()", False, 0)
    del param

    try:
        extModule = sys.modules["OverlayMaskExt"]
    except KeyError:
        extModule = None
    if extModule is not None and hasattr(extModule ,"createInstanceExt") and hasattr(extModule.createInstanceExt,"__call__"):
        extModule.createInstanceExt(app,group)
